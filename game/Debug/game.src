; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optsize -noreduceopt -nopadbranch -debug
; -peephole -globalopt -localcse -const=ROM 
	FILE	"..\game.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "sokobanlevel",1207
.DEFINE "xpos"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "ypos"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "width"
.VALUE 2
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "goals"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "goalstaken"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "crates"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "data"
.VALUE 7
.CLASS 8
.DIM 30
.DIM 40
.TYPE 876
.ENDEF
.ENDREC "sokobanlevel"
.BEGREC "NONAME0",2
.DEFINE "ch"
.VALUE 0
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "tile_id"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "NONAME0"
.BEGREC "undoitem",2
.DEFINE "movekey"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pushed"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "undoitem"
.BEGREC "NONAME1",8
.DEFINE "baudRate"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "dataBits"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stopBits"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "parity"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flowcontrol"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "eir"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "NONAME1"
.BEGREC "fmt_type",19
.DEFINE "status"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flags"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "size"
.VALUE 2
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "chr"
.VALUE 3
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "type"
.VALUE 4
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "field_width"
.VALUE 5
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "precision"
.VALUE 6
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "set_begin"
.VALUE 7
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "set_end"
.VALUE 10
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "pad_whole"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_pre_fract"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_post_fract"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_at"
.VALUE 16
.CLASS 8
.TYPE 34
.ENDEF
.ENDREC "fmt_type"
.BEGREC "flt_info",12
.DEFINE "flags"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "digits"
.VALUE 2
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.ENDREC "flt_info"
	SEGMENT BSS
_undomove:
	DS	256
.DEFINE "undomove"
.ALIAS "_undomove"
.CLASS 83
.VALUE _undomove
.DIM 128
.TAG "undoitem"
.TYPE 104
.ENDEF
_undo_head:
	DS	1
.DEFINE "undo_head"
.ALIAS "_undo_head"
.CLASS 83
.VALUE _undo_head
.TYPE 12
.ENDEF
_num_undomoves:
	DS	1
.DEFINE "num_undomoves"
.ALIAS "_num_undomoves"
.CLASS 83
.VALUE _num_undomoves
.TYPE 12
.ENDEF
_bitmapbuffer:
	DS	1024
.DEFINE "bitmapbuffer"
.ALIAS "_bitmapbuffer"
.CLASS 83
.VALUE _bitmapbuffer
.DIM 256
.TYPE 111
.ENDEF
_sprites:
	DS	1200
.DEFINE "sprites"
.ALIAS "_sprites"
.CLASS 83
.VALUE _sprites
.DIM 30
.DIM 40
.TYPE 876
.ENDEF
_currentlevel:
	DS	1207
.DEFINE "currentlevel"
.ALIAS "_currentlevel"
.CLASS 83
.VALUE _currentlevel
.TAG "sokobanlevel"
.TYPE 8
.ENDEF
_spritenumber:
	DS	1
.DEFINE "spritenumber"
.ALIAS "_spritenumber"
.CLASS 83
.VALUE _spritenumber
.TYPE 12
.ENDEF
	SEGMENT DATA
_wall_data:
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-12566464
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-8355712
	DL	-12566464
	DL	-16744320
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-8355712
	DL	-12566464
	DL	-16744320
	DL	-16777088
	DL	-8355712
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-8355712
	DL	-8355712
	DL	-16777088
	DL	-16777088
	DL	-8355712
	DL	-12566464
	DL	-16744320
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-8355712
	DL	-12566464
	DL	-16744320
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-8355712
	DL	-12566464
	DL	-16744320
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-8355712
	DL	-8355712
	DL	-16777088
	DL	-8355712
	DL	-8355712
	DL	-8355712
	DL	-8355712
	DL	-8355712
	DL	-8355712
	DL	-8355712
	DL	-12566464
	DL	-16744320
	DL	-8355712
	DL	-8355712
	DL	-8355712
	DL	-8355712
	DL	-8355712
	DL	-8355712
	DL	-8355712
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-12566464
	DL	-16744320
	DL	-16744320
	DL	-16777088
	DL	-8355712
	DL	-8355712
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-8355712
	DL	-12566464
	DL	-16744320
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-8355712
	DL	-12566464
	DL	-16744320
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-8355712
	DL	-8355712
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-8355712
	DL	-12566464
	DL	-16744320
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-8355712
	DL	-16777088
	DL	-8355712
	DL	-12566464
	DL	-16744320
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-8355712
	DL	-12566464
	DL	-16744320
	DL	-8355712
	DL	-8355712
	DL	-8355712
	DL	-8355712
	DL	-8355712
	DL	-8355712
	DL	-8355712
	DL	-8355712
	DL	-8355712
	DL	-8355712
	DL	-8355712
	DL	-8355712
	DL	-8355712
	DL	-8355712
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
.DEFINE "wall_data"
.ALIAS "_wall_data"
.CLASS 69
.VALUE _wall_data
.DIM 1
.DIM 256
.TYPE 879
.ENDEF
_player_data:
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-12566464
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	-12566464
	DL	-16777216
	DL	-12566464
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-12566464
	DL	-16777216
	DL	-12566464
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	-16777216
	DL	-12566464
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-12566464
	DL	-16777216
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	-12566464
	DL	-8355712
	DL	-16777216
	DL	-16777216
	DL	-16744320
	DL	-16777216
	DL	-16777216
	DL	-8355712
	DL	-12566464
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	-16777216
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16777216
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	-16777216
	DL	-8355712
	DL	-8355712
	DL	-8355712
	DL	-16777216
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	-16777216
	DL	-16777088
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777088
	DL	-16777216
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	-16777216
	DL	-16777088
	DL	-16776961
	DL	-16776961
	DL	-16776961
	DL	-16776961
	DL	-16776961
	DL	-16777088
	DL	-16777216
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	-16777216
	DL	-16776961
	DL	-16776961
	DL	-16776961
	DL	-16776961
	DL	-16776961
	DL	-16776961
	DL	-16776961
	DL	-16776961
	DL	-16776961
	DL	-16777216
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	-12566464
	DL	-16777088
	DL	-16776961
	DL	-16777088
	DL	-16776961
	DL	-16776961
	DL	-16776961
	DL	-16777088
	DL	-16776961
	DL	-16777088
	DL	-12566464
	DL	0
	DL	0
	DL	0
	DL	0
	DL	-16777216
	DL	-16744320
	DL	-16744320
	DL	-16777088
	DL	-16777088
	DL	-16776961
	DL	-16776961
	DL	-16776961
	DL	-16777088
	DL	-16777088
	DL	-16744320
	DL	-16744320
	DL	-16777216
	DL	0
	DL	0
	DL	0
	DL	-16777216
	DL	-16744320
	DL	-16744320
	DL	-16777216
	DL	-8388608
	DL	-8388608
	DL	-8388608
	DL	-8388608
	DL	-8388608
	DL	-16777216
	DL	-16744320
	DL	-16744320
	DL	-16777216
	DL	0
	DL	0
	DL	0
	DL	0
	DL	-16777216
	DL	-16777216
	DL	-8388608
	DL	-65536
	DL	-65536
	DL	-65536
	DL	-65536
	DL	-65536
	DL	-8388608
	DL	-16777216
	DL	-16777216
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	-16777216
	DL	-8388608
	DL	-65536
	DL	-65536
	DL	-8388608
	DL	-65536
	DL	-65536
	DL	-8388608
	DL	-16777216
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	-16777216
	DL	-65536
	DL	-65536
	DL	-8388608
	DL	-16777216
	DL	-65536
	DL	-65536
	DL	-65536
	DL	-16777216
	DL	0
	DL	0
	DL	0
	DL	0
.DEFINE "player_data"
.ALIAS "_player_data"
.CLASS 69
.VALUE _player_data
.DIM 1
.DIM 256
.TYPE 879
.ENDEF
_goal_data:
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	-16744448
	DL	0
	DL	0
	DL	-16744448
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	-16744448
	DL	-16744448
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	-16744448
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	-16744448
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	-16744448
	DL	0
	DL	0
	DL	-16711936
	DL	-16711936
	DL	0
	DL	0
	DL	-16744448
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	-16744448
	DL	0
	DL	0
	DL	-16711936
	DL	-16711936
	DL	0
	DL	0
	DL	-16744448
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	-16744448
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	-16744448
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	-16744448
	DL	-16744448
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	-16744448
	DL	0
	DL	0
	DL	-16744448
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
	DL	0
.DEFINE "goal_data"
.ALIAS "_goal_data"
.CLASS 69
.VALUE _goal_data
.DIM 1
.DIM 256
.TYPE 879
.ENDEF
_box_data:
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16744320
	DL	-16744320
	DL	-16777216
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16777216
	DL	-16744320
	DL	-16744320
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16711681
	DL	-16711681
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16744320
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16744320
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16744320
	DL	-16744320
	DL	-16777216
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16744320
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16711681
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16744320
	DL	-16744320
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16777216
	DL	-16744320
	DL	-16744320
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
.DEFINE "box_data"
.ALIAS "_box_data"
.CLASS 69
.VALUE _box_data
.DIM 1
.DIM 256
.TYPE 879
.ENDEF
_boxongoal_data:
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16744320
	DL	-16744320
	DL	-16777216
	DL	-16744448
	DL	-16744448
	DL	-16744448
	DL	-16744448
	DL	-16777216
	DL	-16744320
	DL	-16744320
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16711936
	DL	-16711936
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16744448
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16744448
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16744448
	DL	-16711936
	DL	-16777216
	DL	-16744320
	DL	-16711936
	DL	-16711936
	DL	-16744320
	DL	-16777216
	DL	-16711936
	DL	-16744448
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16744448
	DL	-16711936
	DL	-16777216
	DL	-16711681
	DL	-16711936
	DL	-16711936
	DL	-16711681
	DL	-16777216
	DL	-16711936
	DL	-16744448
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16744448
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16744448
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16711936
	DL	-16711936
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16744320
	DL	-16744320
	DL	-16777216
	DL	-16744448
	DL	-16744448
	DL	-16744448
	DL	-16744448
	DL	-16777216
	DL	-16744320
	DL	-16744320
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16744320
	DL	-16711681
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
.DEFINE "boxongoal_data"
.ALIAS "_boxongoal_data"
.CLASS 69
.VALUE _boxongoal_data
.DIM 1
.DIM 256
.TYPE 879
.ENDEF
_boxmini_data:
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16777216
	DL	-16711681
	DL	-16777216
	DL	-16744320
	DL	-16744320
	DL	-16777216
	DL	-16711681
	DL	-16777216
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16777216
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16777216
	DL	-16777216
	DL	-16711681
	DL	-16777216
	DL	-16744320
	DL	-16744320
	DL	-16777216
	DL	-16711681
	DL	-16777216
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
.DEFINE "boxmini_data"
.ALIAS "_boxmini_data"
.CLASS 69
.VALUE _boxmini_data
.DIM 1
.DIM 64
.TYPE 879
.ENDEF
_wallmini_data:
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-12566464
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-12566464
	DL	-16744320
	DL	-16777088
	DL	-16777088
	DL	-8355712
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-12566464
	DL	-16744320
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-12566464
	DL	-16744320
	DL	-16777088
	DL	-16777088
	DL	-8355712
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-12566464
	DL	-16744320
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-16777088
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
.DEFINE "wallmini_data"
.ALIAS "_wallmini_data"
.CLASS 69
.VALUE _wallmini_data
.DIM 1
.DIM 64
.TYPE 879
.ENDEF
_goalmini_data:
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16711936
	DL	-16777216
	DL	-16777216
	DL	-16711936
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16711936
	DL	-16711936
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16711936
	DL	-16711936
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16711936
	DL	-16777216
	DL	-16777216
	DL	-16711936
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
.DEFINE "goalmini_data"
.ALIAS "_goalmini_data"
.CLASS 69
.VALUE _goalmini_data
.DIM 1
.DIM 64
.TYPE 879
.ENDEF
_boxongoalmini_data:
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16777216
	DL	-16711681
	DL	-16777216
	DL	-16744320
	DL	-16744320
	DL	-16777216
	DL	-16711681
	DL	-16777216
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16711936
	DL	-16711936
	DL	-16744320
	DL	-16711681
	DL	-16777216
	DL	-16777216
	DL	-16711681
	DL	-16744320
	DL	-16711936
	DL	-16711936
	DL	-16744320
	DL	-16711681
	DL	-16777216
	DL	-16777216
	DL	-16711681
	DL	-16777216
	DL	-16744320
	DL	-16744320
	DL	-16777216
	DL	-16711681
	DL	-16777216
	DL	-16777216
	DL	-16744320
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16711681
	DL	-16744320
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
.DEFINE "boxongoalmini_data"
.ALIAS "_boxongoalmini_data"
.CLASS 69
.VALUE _boxongoalmini_data
.DIM 1
.DIM 64
.TYPE 879
.ENDEF
_playermini_data:
	DL	-16777216
	DL	-16777216
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-12566464
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-12566464
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-12566464
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16744320
	DL	-16744320
	DL	-16744320
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-12566464
	DL	-16777088
	DL	-12566464
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16744320
	DL	-16776961
	DL	-16776961
	DL	-16776961
	DL	-16744320
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16776961
	DL	-16776961
	DL	-16776961
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-65536
	DL	-8388608
	DL	-65536
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-16777216
	DL	-65536
	DL	-65536
	DL	-16777216
	DL	-65536
	DL	-65536
	DL	-16777216
.DEFINE "playermini_data"
.ALIAS "_playermini_data"
.CLASS 69
.VALUE _playermini_data
.DIM 1
.DIM 64
.TYPE 879
.ENDEF
;    1	#include "game.h"
;    2	#include "sokobanprep.h"
;    3	#include "vdp.h"
;    4	#include <ctype.h>
;    5	#include <stdio.h>
;    6	#include <string.h>
;    7	#include "agontimer.h"
;    8	
;    9	struct undoitem undomove[UNDOBUFFERSIZE];
;   10	UINT8 undo_head;
;   11	UINT8 num_undomoves;
;   12	
;   13	UINT32 bitmapbuffer[BITMAPSIZE];	// will hold one bitmap at a time, to transmit to the VDU
;   14	UINT8 sprites[MAXHEIGHT][MAXWIDTH]; // will contain all sprites on-screen
;   15	struct sokobanlevel currentlevel;	// will contain the currentlevel;
;   16	UINT8 spritenumber;					// the current number of sprites in the current level
;   17	
;   18	UINT32 wall_data[1][256] = {
;   19	{
;   20	0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff404040, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 
;   21	0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff808080, 0xff404040, 0xff008080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 
;   22	0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff808080, 0xff404040, 0xff008080, 0xff000080, 0xff808080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 
;   23	0xff000080, 0xff000080, 0xff808080, 0xff808080, 0xff000080, 0xff000080, 0xff808080, 0xff404040, 0xff008080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 
;   24	0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff808080, 0xff404040, 0xff008080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 
;   25	0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff808080, 0xff404040, 0xff008080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff808080, 0xff808080, 0xff000080, 
;   26	0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff404040, 0xff008080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 
;   27	0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 
;   28	0xff404040, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 
;   29	0xff404040, 0xff008080, 0xff008080, 0xff000080, 0xff808080, 0xff808080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff808080, 
;   30	0xff404040, 0xff008080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff808080, 
;   31	0xff404040, 0xff008080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff808080, 0xff808080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff808080, 
;   32	0xff404040, 0xff008080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff808080, 0xff000080, 0xff808080, 
;   33	0xff404040, 0xff008080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff808080, 
;   34	0xff404040, 0xff008080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 
;   35	0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040
;   36	}
;   37	};
;   38	
;   39	UINT32 player_data[1][256] = {
;   40	{
;   41	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff404040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
;   42	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
;   43	0x00000000, 0x00000000, 0x00000000, 0xff404040, 0xff000000, 0xff404040, 0xff008080, 0xff008080, 0xff008080, 0xff404040, 0xff000000, 0xff404040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
;   44	0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff404040, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff404040, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
;   45	0x00000000, 0x00000000, 0x00000000, 0xff404040, 0xff808080, 0xff000000, 0xff000000, 0xff008080, 0xff000000, 0xff000000, 0xff808080, 0xff404040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
;   46	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
;   47	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff808080, 0xff808080, 0xff808080, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
;   48	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000080, 0xff000000, 0xff000000, 0xff000000, 0xff000080, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
;   49	0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000080, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff000080, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
;   50	0x00000000, 0x00000000, 0xff000000, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 
;   51	0x00000000, 0x00000000, 0xff404040, 0xff000080, 0xff0000ff, 0xff000080, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff000080, 0xff0000ff, 0xff000080, 0xff404040, 0x00000000, 0x00000000, 0x00000000, 
;   52	0x00000000, 0xff000000, 0xff008080, 0xff008080, 0xff000080, 0xff000080, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff000080, 0xff000080, 0xff008080, 0xff008080, 0xff000000, 0x00000000, 0x00000000, 
;   53	0x00000000, 0xff000000, 0xff008080, 0xff008080, 0xff000000, 0xff800000, 0xff800000, 0xff800000, 0xff800000, 0xff800000, 0xff000000, 0xff008080, 0xff008080, 0xff000000, 0x00000000, 0x00000000, 
;   54	0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff800000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xff800000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 
;   55	0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff800000, 0xffff0000, 0xffff0000, 0xff800000, 0xffff0000, 0xffff0000, 0xff800000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
;   56	0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xffff0000, 0xffff0000, 0xff800000, 0xff000000, 0xffff0000, 0xffff0000, 0xffff0000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
;   57	}
;   58	};
;   59	
;   60	UINT32 goal_data[1][256] = {
;   61	{
;   62	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
;   63	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
;   64	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
;   65	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff008000, 0x00000000, 0x00000000, 0xff008000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
;   66	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff008000, 0xff008000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
;   67	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
;   68	0x00000000, 0x00000000, 0x00000000, 0xff008000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff008000, 0x00000000, 0x00000000, 0x00000000, 
;   69	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff008000, 0x00000000, 0x00000000, 0xff00ff00, 0xff00ff00, 0x00000000, 0x00000000, 0xff008000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
;   70	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff008000, 0x00000000, 0x00000000, 0xff00ff00, 0xff00ff00, 0x00000000, 0x00000000, 0xff008000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
;   71	0x00000000, 0x00000000, 0x00000000, 0xff008000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff008000, 0x00000000, 0x00000000, 0x00000000, 
;   72	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
;   73	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff008000, 0xff008000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
;   74	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff008000, 0x00000000, 0x00000000, 0xff008000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
;   75	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
;   76	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
;   77	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
;   78	}
;   79	};
;   80	
;   81	UINT32 box_data[1][256] = {
;   82	{
;   83	0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 
;   84	0xff00ffff, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff00ffff, 0xff008080, 
;   85	0xff00ffff, 0xff008080, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff00ffff, 0xff008080, 
;   86	0xff00ffff, 0xff008080, 0xff000000, 0xff008080, 0xff008080, 0xff000000, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff000000, 0xff008080, 0xff008080, 0xff000000, 0xff00ffff, 0xff008080, 
;   87	0xff00ffff, 0xff008080, 0xff000000, 0xff008080, 0xff00ffff, 0xff008080, 0xff000000, 0xff00ffff, 0xff00ffff, 0xff000000, 0xff008080, 0xff00ffff, 0xff008080, 0xff000000, 0xff00ffff, 0xff008080, 
;   88	0xff00ffff, 0xff008080, 0xff000000, 0xff000000, 0xff008080, 0xff00ffff, 0xff008080, 0xff000000, 0xff000000, 0xff008080, 0xff00ffff, 0xff008080, 0xff000000, 0xff000000, 0xff00ffff, 0xff008080, 
;   89	0xff00ffff, 0xff008080, 0xff000000, 0xff008080, 0xff000000, 0xff008080, 0xff00ffff, 0xff008080, 0xff00ffff, 0xff00ffff, 0xff008080, 0xff000000, 0xff008080, 0xff000000, 0xff00ffff, 0xff008080, 
;   90	0xff00ffff, 0xff008080, 0xff000000, 0xff008080, 0xff00ffff, 0xff000000, 0xff008080, 0xff00ffff, 0xff00ffff, 0xff008080, 0xff000000, 0xff008080, 0xff00ffff, 0xff000000, 0xff00ffff, 0xff008080, 
;   91	0xff00ffff, 0xff008080, 0xff000000, 0xff008080, 0xff008080, 0xff000000, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff000000, 0xff008080, 0xff00ffff, 0xff000000, 0xff00ffff, 0xff008080, 
;   92	0xff00ffff, 0xff008080, 0xff000000, 0xff008080, 0xff000000, 0xff008080, 0xff00ffff, 0xff008080, 0xff00ffff, 0xff00ffff, 0xff008080, 0xff000000, 0xff00ffff, 0xff000000, 0xff00ffff, 0xff008080, 
;   93	0xff00ffff, 0xff008080, 0xff000000, 0xff000000, 0xff008080, 0xff00ffff, 0xff008080, 0xff000000, 0xff000000, 0xff008080, 0xff00ffff, 0xff008080, 0xff000000, 0xff000000, 0xff00ffff, 0xff008080, 
;   94	0xff00ffff, 0xff008080, 0xff000000, 0xff008080, 0xff00ffff, 0xff008080, 0xff000000, 0xff008080, 0xff00ffff, 0xff000000, 0xff008080, 0xff00ffff, 0xff008080, 0xff000000, 0xff00ffff, 0xff008080, 
;   95	0xff00ffff, 0xff008080, 0xff000000, 0xff008080, 0xff008080, 0xff000000, 0xff008080, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff000000, 0xff008080, 0xff008080, 0xff000000, 0xff00ffff, 0xff008080, 
;   96	0xff00ffff, 0xff008080, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff00ffff, 0xff008080, 
;   97	0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff008080, 
;   98	0xff00ffff, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080
;   99	}
;  100	};
;  101	
;  102	UINT32 boxongoal_data[1][256] = {
;  103	{
;  104	0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 
;  105	0xff00ffff, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff00ffff, 0xff008080, 
;  106	0xff00ffff, 0xff008080, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff00ffff, 0xff008080, 
;  107	0xff00ffff, 0xff008080, 0xff000000, 0xff008080, 0xff008080, 0xff000000, 0xff008000, 0xff008000, 0xff008000, 0xff008000, 0xff000000, 0xff008080, 0xff008080, 0xff000000, 0xff00ffff, 0xff008080, 
;  108	0xff00ffff, 0xff008080, 0xff000000, 0xff008080, 0xff00ffff, 0xff008080, 0xff000000, 0xff00ff00, 0xff00ff00, 0xff000000, 0xff008080, 0xff00ffff, 0xff008080, 0xff000000, 0xff00ffff, 0xff008080, 
;  109	0xff00ffff, 0xff008080, 0xff000000, 0xff000000, 0xff008080, 0xff00ffff, 0xff008080, 0xff000000, 0xff000000, 0xff008080, 0xff00ffff, 0xff008080, 0xff000000, 0xff000000, 0xff00ffff, 0xff008080, 
;  110	0xff00ffff, 0xff008080, 0xff000000, 0xff008000, 0xff000000, 0xff008080, 0xff00ffff, 0xff008080, 0xff00ffff, 0xff00ffff, 0xff008080, 0xff000000, 0xff008000, 0xff000000, 0xff00ffff, 0xff008080, 
;  111	0xff00ffff, 0xff008080, 0xff000000, 0xff008000, 0xff00ff00, 0xff000000, 0xff008080, 0xff00ff00, 0xff00ff00, 0xff008080, 0xff000000, 0xff00ff00, 0xff008000, 0xff000000, 0xff00ffff, 0xff008080, 
;  112	0xff00ffff, 0xff008080, 0xff000000, 0xff008000, 0xff00ff00, 0xff000000, 0xff00ffff, 0xff00ff00, 0xff00ff00, 0xff00ffff, 0xff000000, 0xff00ff00, 0xff008000, 0xff000000, 0xff00ffff, 0xff008080, 
;  113	0xff00ffff, 0xff008080, 0xff000000, 0xff008000, 0xff000000, 0xff008080, 0xff00ffff, 0xff008080, 0xff00ffff, 0xff00ffff, 0xff008080, 0xff000000, 0xff008000, 0xff000000, 0xff00ffff, 0xff008080, 
;  114	0xff00ffff, 0xff008080, 0xff000000, 0xff000000, 0xff008080, 0xff00ffff, 0xff008080, 0xff000000, 0xff000000, 0xff008080, 0xff00ffff, 0xff008080, 0xff000000, 0xff000000, 0xff00ffff, 0xff008080, 
;  115	0xff00ffff, 0xff008080, 0xff000000, 0xff008080, 0xff00ffff, 0xff008080, 0xff000000, 0xff00ff00, 0xff00ff00, 0xff000000, 0xff008080, 0xff00ffff, 0xff008080, 0xff000000, 0xff00ffff, 0xff008080, 
;  116	0xff00ffff, 0xff008080, 0xff000000, 0xff008080, 0xff008080, 0xff000000, 0xff008000, 0xff008000, 0xff008000, 0xff008000, 0xff000000, 0xff008080, 0xff008080, 0xff000000, 0xff00ffff, 0xff008080, 
;  117	0xff00ffff, 0xff008080, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff00ffff, 0xff008080, 
;  118	0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff008080, 
;  119	0xff00ffff, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080
;  120	}
;  121	};
;  122	
;  123	UINT32 boxmini_data[1][64] = {
;  124	{
;  125	0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
;  126	0xff000000, 0xff008080, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff008080, 0xff000000, 
;  127	0xff000000, 0xff00ffff, 0xff000000, 0xff008080, 0xff008080, 0xff000000, 0xff00ffff, 0xff000000, 
;  128	0xff000000, 0xff00ffff, 0xff008080, 0xff000000, 0xff000000, 0xff008080, 0xff00ffff, 0xff000000, 
;  129	0xff000000, 0xff00ffff, 0xff008080, 0xff000000, 0xff000000, 0xff008080, 0xff00ffff, 0xff000000, 
;  130	0xff000000, 0xff00ffff, 0xff000000, 0xff008080, 0xff008080, 0xff000000, 0xff00ffff, 0xff000000, 
;  131	0xff000000, 0xff008080, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff008080, 0xff000000, 
;  132	0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
;  133	}
;  134	};
;  135	
;  136	UINT32 wallmini_data[1][64] = {
;  137	{
;  138	0xff008080, 0xff008080, 0xff008080, 0xff404040, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 
;  139	0xff000080, 0xff000080, 0xff000080, 0xff404040, 0xff008080, 0xff000080, 0xff000080, 0xff808080, 
;  140	0xff000080, 0xff000080, 0xff000080, 0xff404040, 0xff008080, 0xff000080, 0xff000080, 0xff000080, 
;  141	0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 
;  142	0xff404040, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 0xff008080, 
;  143	0xff404040, 0xff008080, 0xff000080, 0xff000080, 0xff808080, 0xff000080, 0xff000080, 0xff000080, 
;  144	0xff404040, 0xff008080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 0xff000080, 
;  145	0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040
;  146	}
;  147	};
;  148	
;  149	UINT32 goalmini_data[1][64] = {
;  150	{
;  151	0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
;  152	0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
;  153	0xff000000, 0xff000000, 0xff00ff00, 0xff000000, 0xff000000, 0xff00ff00, 0xff000000, 0xff000000, 
;  154	0xff000000, 0xff000000, 0xff000000, 0xff00ff00, 0xff00ff00, 0xff000000, 0xff000000, 0xff000000, 
;  155	0xff000000, 0xff000000, 0xff000000, 0xff00ff00, 0xff00ff00, 0xff000000, 0xff000000, 0xff000000, 
;  156	0xff000000, 0xff000000, 0xff00ff00, 0xff000000, 0xff000000, 0xff00ff00, 0xff000000, 0xff000000, 
;  157	0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
;  158	0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
;  159	}
;  160	};
;  161	
;  162	UINT32 boxongoalmini_data[1][64] = {
;  163	{
;  164	0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
;  165	0xff000000, 0xff008080, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff008080, 0xff000000, 
;  166	0xff000000, 0xff00ffff, 0xff000000, 0xff008080, 0xff008080, 0xff000000, 0xff00ffff, 0xff000000, 
;  167	0xff000000, 0xff00ffff, 0xff008080, 0xff00ff00, 0xff00ff00, 0xff008080, 0xff00ffff, 0xff000000, 
;  168	0xff000000, 0xff00ffff, 0xff008080, 0xff00ff00, 0xff00ff00, 0xff008080, 0xff00ffff, 0xff000000, 
;  169	0xff000000, 0xff00ffff, 0xff000000, 0xff008080, 0xff008080, 0xff000000, 0xff00ffff, 0xff000000, 
;  170	0xff000000, 0xff008080, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff00ffff, 0xff008080, 0xff000000, 
;  171	0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
;  172	}
;  173	};
;  174	
;  175	UINT32 playermini_data[1][64] = {
	SEGMENT CODE
;  176	{
;  177	0xff000000, 0xff000000, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff404040, 0xff000000, 
;  178	0xff000000, 0xff000000, 0xff404040, 0xff008080, 0xff008080, 0xff008080, 0xff404040, 0xff000000, 
;  179	0xff000000, 0xff000000, 0xff000000, 0xff008080, 0xff008080, 0xff008080, 0xff000000, 0xff000000, 
;  180	0xff000000, 0xff000000, 0xff000000, 0xff404040, 0xff000080, 0xff404040, 0xff000000, 0xff000000, 
;  181	0xff000000, 0xff000000, 0xff008080, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff008080, 0xff000000, 
;  182	0xff000000, 0xff000000, 0xff000000, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff000000, 0xff000000, 
;  183	0xff000000, 0xff000000, 0xff000000, 0xffff0000, 0xff800000, 0xffff0000, 0xff000000, 0xff000000, 
;  184	0xff000000, 0xff000000, 0xffff0000, 0xffff0000, 0xff000000, 0xffff0000, 0xffff0000, 0xff000000
;  185	}
;  186	};
;  187	
;  188	void debug_print_playfieldText(void)
;  189	{
_debug_print_playfieldText:
.DEFINE "_debug_print_playfieldText"

.VALUE _debug_print_playfieldText

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "debug_print_playfieldText",189,"_debug_print_playfieldText"

.LINE 189

.DEFINE "width"

.CLASS 65

.VALUE -2

.TYPE 13

.ENDEF

.DEFINE "c"

.CLASS 65

.VALUE -3

.TYPE 2

.ENDEF

.DEFINE "height"

.CLASS 65

.VALUE -5

.TYPE 13

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
	DEC	SP
	DEC	SP
;  190		UINT16 width, height;
;  191		char c;
;  192		
;  193		for(height = 0; height < currentlevel.height; height++)
.LINE 193

	LD	(IX+%FFFFFFFB),%0
	LD	(IX+%FFFFFFFC),%0
	JR	L_19
L_17:
;  194		{
;  195			for(width = 0; width < currentlevel.width; width++)
.LINE 195

	LD	(IX+%FFFFFFFE),%0
	LD	(IX+%FFFFFFFF),%0
	JR	L_8
L_6:
;  196			{
;  197				c = currentlevel.data[height][width];
.LINE 197

	LD	BC,(IX+%FFFFFFFB)
	CALL	__stoiu
	LD	A,%28
	CALL	__imul_b
	LD	BC,_currentlevel+7
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%FFFFFFFE)
	CALL	__stoiu
	ADD	HL,DE
	LD	A,(HL)
	LD	(IX+%FFFFFFFD),A
;  198				printf("%c",c?c:' ');
.LINE 198

	OR	A,A
	JR	Z,L_4
	LD	A,(IX+%FFFFFFFD)
	SEXT	HL
	LD	L,(IX+%FFFFFFFD)
	LD	(IX+%FFFFFFF8),HL
	JR	L_5
L_4:
	LD	BC,32
	LD	(IX+%FFFFFFF8),BC
L_5:
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	C,(IX+%FFFFFFF8)
	LD	B,%0
	PUSH	BC
	CALL	___print_uputch
	POP	BC
	LD	HL,(IX+%FFFFFFFE)
	INC	HL
	LD	(IX+%FFFFFFFE),L
	LD	(IX+%FFFFFFFF),H
;  199			}
L_8:
.LINE 199

	LD	A,(_currentlevel+2)
	LD	C,A
	LD	B,%0
	LD	HL,(IX+%FFFFFFFE)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_6
;  200			printf(" ");
.LINE 200

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,32
	PUSH	BC
	CALL	___print_uputch
	POP	BC
;  201			for(width = 0; width < currentlevel.width; width++)
.LINE 201

	LD	(IX+%FFFFFFFE),%0
	LD	(IX+%FFFFFFFF),%0
	JR	L_15
L_13:
;  202			{
;  203				c = sprites[height][width] + '0';
.LINE 203

	LD	BC,(IX+%FFFFFFFB)
	CALL	__stoiu
	LD	A,%28
	CALL	__imul_b
	LD	BC,_sprites
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%FFFFFFFE)
	CALL	__stoiu
	ADD	HL,DE
	LD	A,(HL)
	ADD	A,%30
	LD	(IX+%FFFFFFFD),A
;  204				if(c > '9') c = 'X';
.LINE 204

	LD	A,%39
	CP	A,(IX+%FFFFFFFD)
	JP	P,L_12
	LD	(IX+%FFFFFFFD),%58
L_12:
;  205				printf("%c",c);
.LINE 205

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	L,(IX+%FFFFFFFD)
	LD	C,L
	LD	B,%0
	PUSH	BC
	CALL	___print_uputch
	POP	BC
	LD	HL,(IX+%FFFFFFFE)
	INC	HL
	LD	(IX+%FFFFFFFE),L
	LD	(IX+%FFFFFFFF),H
;  206			}
L_15:
.LINE 206

	LD	A,(_currentlevel+2)
	LD	C,A
	LD	B,%0
	LD	HL,(IX+%FFFFFFFE)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_13
;  207			printf("\n\r");
.LINE 207

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__4
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	HL,(IX+%FFFFFFFB)
	INC	HL
	LD	(IX+%FFFFFFFB),L
	LD	(IX+%FFFFFFFC),H
;  208		}
L_19:
.LINE 208

	LD	A,(_currentlevel+3)
	LD	C,A
	LD	B,%0
	LD	HL,(IX+%FFFFFFFB)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_17
;  209	}
.LINE 209

	LD	SP,IX
	POP	IX
	RET	


;**************************** _debug_print_playfieldText ***************************
;Name                         Addr/Register   Size   Type
;___print_sendstring                 IMPORT  -----   function
;_sprites                            STATIC   1200   variable
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_currentlevel                       STATIC   1207   variable
;temp2                                 IX-8      3   variable
;height                                IX-5      2   variable
;c                                     IX-3      1   variable
;width                                 IX-2      2   variable


; Stack Frame Size: 14 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "debug_print_playfieldText",209,"_debug_print_playfieldText"
	SEGMENT STRSECT
L__4:
	DB	10,13,0
	SEGMENT CODE
;  210	
;  211	void game_sendSpriteData(void)
;  212	{
_game_sendSpriteData:
.DEFINE "_game_sendSpriteData"

.VALUE _game_sendSpriteData

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "game_sendSpriteData",212,"_game_sendSpriteData"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  213		// needs to be called once, to load all bitmaps and sprites to the VDU
;  214		
;  215		vdp_bitmapSendData(TILE_WALL, BITMAP_WIDTH, BITMAP_HEIGHT, wall_data[0]);
.LINE 215

	LD	BC,_wall_data
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_vdp_bitmapSendData
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  216		vdp_bitmapSendData(TILE_PLAYER, BITMAP_WIDTH, BITMAP_HEIGHT, player_data[0]);
.LINE 216

	LD	BC,_player_data
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_vdp_bitmapSendData
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  217		vdp_bitmapSendData(TILE_PLAYERONGOAL, BITMAP_WIDTH, BITMAP_HEIGHT, player_data[0]);	
.LINE 217

	LD	BC,_player_data
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_vdp_bitmapSendData
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  218		vdp_bitmapSendData(TILE_BOX, BITMAP_WIDTH, BITMAP_HEIGHT, box_data[0]);
.LINE 218

	LD	BC,_box_data
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_vdp_bitmapSendData
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  219		vdp_bitmapSendData(TILE_BOXONGOAL, BITMAP_WIDTH, BITMAP_HEIGHT, boxongoal_data[0]);
.LINE 219

	LD	BC,_boxongoal_data
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PUSH	BC
	LD	BC,4
	PUSH	BC
	CALL	_vdp_bitmapSendData
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  220		vdp_bitmapSendData(TILE_GOAL, BITMAP_WIDTH, BITMAP_HEIGHT, goal_data[0]);
.LINE 220

	LD	BC,_goal_data
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_vdp_bitmapSendData
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  221		vdp_bitmapCreateSolidColor(TILE_FLOOR, BITMAP_WIDTH, BITMAP_HEIGHT, 0xff000000);
.LINE 221

	LD	BC,255
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,16
	PUSH	BC
	PUSH	BC
	LD	BC,6
	PUSH	BC
	CALL	_vdp_bitmapCreateSolidColor
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  222		
;  223		vdp_bitmapSendData(TILE_WALL_MINI, MINIMAP_WIDTH, MINIMAP_HEIGHT, wallmini_data[0]);
.LINE 223

	LD	BC,_wallmini_data
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	BC,7
	PUSH	BC
	CALL	_vdp_bitmapSendData
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  224		vdp_bitmapSendData(TILE_PLAYER_MINI, MINIMAP_WIDTH, MINIMAP_HEIGHT, playermini_data[0]);
.LINE 224

	LD	BC,_playermini_data
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_vdp_bitmapSendData
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  225		vdp_bitmapSendData(TILE_PLAYERONGOAL_MINI, MINIMAP_WIDTH, MINIMAP_HEIGHT, playermini_data[0]);
.LINE 225

	LD	BC,_playermini_data
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	BC,9
	PUSH	BC
	CALL	_vdp_bitmapSendData
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  226		vdp_bitmapSendData(TILE_BOX_MINI, MINIMAP_WIDTH, MINIMAP_HEIGHT, boxmini_data[0]);
.LINE 226

	LD	BC,_boxmini_data
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	BC,10
	PUSH	BC
	CALL	_vdp_bitmapSendData
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  227		vdp_bitmapSendData(TILE_BOXONGOAL_MINI, MINIMAP_WIDTH, MINIMAP_HEIGHT, boxongoalmini_data[0]);
.LINE 227

	LD	BC,_boxongoalmini_data
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	BC,11
	PUSH	BC
	CALL	_vdp_bitmapSendData
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  228		vdp_bitmapSendData(TILE_GOAL_MINI, MINIMAP_WIDTH, MINIMAP_HEIGHT, goalmini_data[0]);
.LINE 228

	LD	BC,_goalmini_data
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	BC,12
	PUSH	BC
	CALL	_vdp_bitmapSendData
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  229		vdp_bitmapCreateSolidColor(TILE_FLOOR_MINI,MINIMAP_WIDTH, MINIMAP_HEIGHT, 0xff000000);
.LINE 229

	LD	BC,255
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	BC,13
	PUSH	BC
	CALL	_vdp_bitmapCreateSolidColor
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  230		vdp_bitmapCreateSolidColor(TILE_MINIMAP_CLEAR,MINIMAP_WIDTH, MINIMAP_HEIGHT, 0xff000000);
.LINE 230

	LD	BC,255
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	BC,14
	PUSH	BC
	CALL	_vdp_bitmapCreateSolidColor
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  231		
;  232		return;
;  233	}
.LINE 233

	LD	SP,IX
	POP	IX
	RET	


;**************************** _game_sendSpriteData ***************************
;Name                         Addr/Register   Size   Type
;_goalmini_data                      STATIC    256   variable
;_boxongoalmini_data                 STATIC    256   variable
;_boxmini_data                       STATIC    256   variable
;_playermini_data                    STATIC    256   variable
;_wallmini_data                      STATIC    256   variable
;_vdp_bitmapCreateSolidColor         IMPORT  -----   function
;_goal_data                          STATIC   1024   variable
;_boxongoal_data                     STATIC   1024   variable
;_box_data                           STATIC   1024   variable
;_player_data                        STATIC   1024   variable
;_wall_data                          STATIC   1024   variable
;_vdp_bitmapSendData                 IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "game_sendSpriteData",233,"_game_sendSpriteData"
;  234	
;  235	void game_resetSprites(void)
;  236	{
_game_resetSprites:
.DEFINE "_game_resetSprites"

.VALUE _game_resetSprites

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "game_resetSprites",236,"_game_resetSprites"

.LINE 236

.DEFINE "n"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
;  237		UINT8 n;
;  238		
;  239		// disable all sprites
;  240		for(n = 0; n < spritenumber; n++)
.LINE 240

	LD	(IX+%FFFFFFFF),%0
	JR	L_25
L_23:
;  241		{
;  242			vdp_spriteSelect(n);
.LINE 242

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  243			vdp_spriteHide(n);
.LINE 243

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteHide
	POP	BC
;  244			vdp_spriteSetFrame(n,0);
.LINE 244

	LD	BC,0
	PUSH	BC
	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSetFrame
	POP	BC
	POP	BC
;  245			vdp_spriteClearFramesSelected();
.LINE 245

	CALL	_vdp_spriteClearFramesSelected
	INC	(IX+%FFFFFFFF)
;  246		}
L_25:
.LINE 246

	LD	A,(IX+%FFFFFFFF)
	LD	HL,_spritenumber
	CP	A,(HL)
	JR	C,L_23
;  247		vdp_spriteRefresh();
.LINE 247

	CALL	_vdp_spriteRefresh
;  248		vdp_spriteActivateTotal(0);
.LINE 248

	LD	BC,0
	PUSH	BC
	CALL	_vdp_spriteActivateTotal
	POP	BC
;  249		spritenumber = 0;
.LINE 249

	XOR	A,A
	LD	(_spritenumber),A
;  250	
;  251		// reset all sprite positions and clear out any sprites
;  252		memset(sprites, 255, MAXHEIGHT*MAXWIDTH);
.LINE 252

	LD	BC,1200
	PUSH	BC
	LD	BC,255
	PUSH	BC
	LD	BC,_sprites
	PUSH	BC
	CALL	_memset
	POP	BC
	POP	BC
	POP	BC
;  253	
;  254		vdp_spriteRefresh();
.LINE 254

	CALL	_vdp_spriteRefresh
;  255		return;
;  256	}
.LINE 256

	LD	SP,IX
	POP	IX
	RET	


;**************************** _game_resetSprites ***************************
;Name                         Addr/Register   Size   Type
;_sprites                            STATIC   1200   variable
;_memset                             IMPORT  -----   function
;_vdp_spriteActivateTotal            IMPORT  -----   function
;_vdp_spriteRefresh                  IMPORT  -----   function
;_spritenumber                       STATIC      1   variable
;_vdp_spriteClearFramesSelected      IMPORT  -----   function
;_vdp_spriteSetFrame                 IMPORT  -----   function
;_vdp_spriteHide                     IMPORT  -----   function
;_vdp_spriteSelect                   IMPORT  -----   function
;n                                     IX-1      1   variable


; Stack Frame Size: 7 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "game_resetSprites",256,"_game_resetSprites"
;  257	
;  258	BOOL canmove(UINT16 xn1, UINT16 yn1, UINT16 xn2, UINT16 yn2)
;  259	{
_canmove:
.DEFINE "_canmove"

.VALUE _canmove

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "canmove",259,"_canmove"

.LINE 259

.DEFINE "xn1"

.CLASS 65

.VALUE 6

.TYPE 13

.ENDEF

.DEFINE "yn1"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

.DEFINE "xn2"

.CLASS 65

.VALUE 12

.TYPE 13

.ENDEF

.DEFINE "yn2"

.CLASS 65

.VALUE 15

.TYPE 13

.ENDEF

.DEFINE "n1"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "n2"

.CLASS 65

.VALUE -2

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
	DEC	SP
;  260		BOOL can = FALSE;
;  261		UINT8 n1, n2;
;  262		
;  263		n1 = currentlevel.data[yn1][xn1];
.LINE 263

	LD	BC,(IX+%9)
	CALL	__stoiu
	LD	A,%28
	CALL	__imul_b
	LD	BC,_currentlevel+7
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%6)
	CALL	__stoiu
	ADD	HL,DE
	LD	A,(HL)
	LD	(IX+%FFFFFFFF),A
;  264		n2 = currentlevel.data[yn2][xn2];
.LINE 264

	LD	BC,(IX+%F)
	CALL	__stoiu
	LD	A,%28
	CALL	__imul_b
	LD	BC,_currentlevel+7
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%C)
	CALL	__stoiu
	ADD	HL,DE
	LD	A,(HL)
	LD	(IX+%FFFFFFFE),A
;  265		
;  266		switch(n1)
.LINE 266

	LD	A,(IX+%FFFFFFFF)
	UEXT	HL
	LD	L,A
	CALL	__case8D
	JP	(HL)
L__10:
	DW	3
	DB	32
	DW24	L_29	

	DB	35
	DW24	L_28	

	DB	46
	DW24	L_30	

	DW24	L_34	

;  267		{
;  268			case CHAR_WALL:
L_28:
.LINE 268

;  269				return FALSE;
.LINE 269

	XOR	A,A
	JR	L_36
;  270				break;
;  271			case CHAR_FLOOR:
L_29:
.LINE 271

;  272			case CHAR_GOAL:
L_30:
.LINE 272

;  273				return TRUE;
.LINE 273

	LD	A,%1
	JR	L_36
;  274				break;
;  275		}
L_34:
.LINE 275

;  276		// either BOX or BOXONGOAL next to player
;  277		switch(n2)
.LINE 277

	LD	A,(IX+%FFFFFFFE)
	UEXT	HL
	LD	L,A
	CALL	__case8D
	JP	(HL)
L__11:
	DW	3
	DB	35
	DW24	L_31	

	DB	36
	DW24	L_32	

	DB	42
	DW24	L_33	

	DW24	L_35	

;  278		{
;  279			case CHAR_WALL:
L_31:
.LINE 279

;  280				return FALSE;
.LINE 280

	XOR	A,A
	JR	L_36
;  281				break;
;  282			case CHAR_BOX:
L_32:
.LINE 282

;  283			case CHAR_BOXONGOAL:
L_33:
.LINE 283

;  284				return FALSE;
.LINE 284

	XOR	A,A
	JR	L_36
;  285				break;
;  286		}
L_35:
.LINE 286

;  287		// only FLOOR or empty GOAL remaining at n2
;  288		return TRUE;
.LINE 288

	LD	A,%1
;  289	}
L_36:
.LINE 289

	LD	SP,IX
	POP	IX
	RET	


;**************************** _canmove ***************************
;Name                         Addr/Register   Size   Type
;_currentlevel                       STATIC   1207   variable
;n2                                    IX-2      1   variable
;n1                                    IX-1      1   variable
;yn2                                  IX+15      2   parameter
;xn2                                  IX+12      2   parameter
;yn1                                   IX+9      2   parameter
;xn1                                   IX+6      2   parameter


; Stack Frame Size: 20 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "canmove",289,"_canmove"
;  290	
;  291	void move_sprites(UINT16 xn1, UINT16 yn1, UINT16 xn2, UINT16 yn2)
;  292	{
_move_sprites:
.DEFINE "_move_sprites"

.VALUE _move_sprites

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "move_sprites",292,"_move_sprites"

.LINE 292

.DEFINE "xn1"

.CLASS 65

.VALUE 6

.TYPE 13

.ENDEF

.DEFINE "yn1"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

.DEFINE "xn2"

.CLASS 65

.VALUE 12

.TYPE 13

.ENDEF

.DEFINE "yn2"

.CLASS 65

.VALUE 15

.TYPE 13

.ENDEF

.DEFINE "spriteid"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "n"

.CLASS 65

.VALUE -2

.TYPE 12

.ENDEF

.DEFINE "dx"

.CLASS 65

.VALUE -4

.TYPE 3

.ENDEF

.DEFINE "dy"

.CLASS 65

.VALUE -6

.TYPE 3

.ENDEF

.DEFINE "n2"

.CLASS 65

.VALUE -7

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
	DEC	SP
;  293		// move can happen, no need to check again
;  294		UINT8 spriteid = sprites[yn1][xn1];
.LINE 294

	LD	BC,(IX+%9)
	CALL	__stoiu
	LD	A,%28
	CALL	__imul_b
	LD	BC,_sprites
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%6)
	CALL	__stoiu
	ADD	HL,DE
	LD	A,(HL)
	LD	(IX+%FFFFFFFF),A
;  295		UINT8 n;
;  296		INT16 dx, dy;
;  297		UINT8 n2;
;  298			
;  299		dx = xn2 - xn1;
.LINE 299

	LD	BC,(IX+%6)
	LD	HL,(IX+%C)
	OR	A,A
	SBC.SIS	HL,BC
	LD	(IX+%FFFFFFFC),L
	LD	(IX+%FFFFFFFD),H
;  300		dy = yn2 - yn1;
.LINE 300

	LD	BC,(IX+%9)
	LD	HL,(IX+%F)
	OR	A,A
	SBC.SIS	HL,BC
	LD	(IX+%FFFFFFFA),L
	LD	(IX+%FFFFFFFB),H
;  301		
;  302		for(n = 0; n < BITMAP_WIDTH; n++)
.LINE 302

	LD	(IX+%FFFFFFFE),%0
	JR	L_42
L_40:
;  303		{
;  304			if(spriteid != NOSPRITE)
.LINE 304

	LD	A,(IX+%FFFFFFFF)
	CP	A,%FF
	JR	Z,L_39
;  305			{
;  306				vdp_spriteSelect(spriteid);
.LINE 306

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  307				vdp_spriteMoveBySelected(dx, dy);
.LINE 307

	LD	BC,(IX+%FFFFFFFA)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	CALL	_vdp_spriteMoveBySelected
	POP	BC
	POP	BC
;  308			}
L_39:
.LINE 308

;  309			vdp_spriteSelect(0); // player
.LINE 309

	LD	BC,0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  310			vdp_spriteMoveBySelected(dx, dy);
.LINE 310

	LD	BC,(IX+%FFFFFFFA)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	CALL	_vdp_spriteMoveBySelected
	POP	BC
	POP	BC
	INC	(IX+%FFFFFFFE)
;  311		}
L_42:
.LINE 311

	LD	A,(IX+%FFFFFFFE)
	CP	A,%10
	JR	C,L_40
;  312	
;  313		// set destination sprite frame
;  314		if(spriteid != NOSPRITE)
.LINE 314

	LD	A,(IX+%FFFFFFFF)
	CP	A,%FF
	JR	Z,L_48
;  315		{
;  316			vdp_spriteSelect(spriteid);
.LINE 316

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  317			// Check if the sprite moved to a goal or floor
;  318			n2 = currentlevel.data[yn2][xn2];
.LINE 318

	LD	BC,(IX+%F)
	CALL	__stoiu
	LD	A,%28
	CALL	__imul_b
	LD	BC,_currentlevel+7
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%C)
	CALL	__stoiu
	ADD	HL,DE
	LD	A,(HL)
	LD	(IX+%FFFFFFF9),A
;  319			switch(n2)
.LINE 319

	UEXT	HL
	LD	L,A
	CALL	__case8D
	JP	(HL)
L__16:
	DW	2
	DB	32
	DW24	L_43	

	DB	46
	DW24	L_44	

	DW24	L_48	

;  320			{
;  321				case CHAR_FLOOR:
L_43:
.LINE 321

;  322					vdp_spriteSetFrameSelected(0);
.LINE 322

	LD	BC,0
	PUSH	BC
	CALL	_vdp_spriteSetFrameSelected
	POP	BC
;  323					break;
.LINE 323

	JR	L_48
;  324				case CHAR_GOAL:
L_44:
.LINE 324

;  325					vdp_spriteSetFrameSelected(1);
.LINE 325

	LD	BC,1
	PUSH	BC
	CALL	_vdp_spriteSetFrameSelected
	POP	BC
;  326					break;
;  327			}
;  328		}
L_48:
.LINE 328

;  329		// update sprite number matrix
;  330		if(spriteid != NOSPRITE)
.LINE 330

	LD	A,(IX+%FFFFFFFF)
	CP	A,%FF
	JR	Z,L_49
;  331		{
;  332			// player shoves a box here
;  333			sprites[yn2][xn2] = sprites[yn1][xn1];
.LINE 333

	LD	BC,(IX+%9)
	CALL	__stoiu
	LD	A,%28
	CALL	__imul_b
	LD	BC,_sprites
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%6)
	CALL	__stoiu
	ADD	HL,DE
	LD	IY,HL
	LD	BC,(IX+%F)
	CALL	__stoiu
	LD	A,%28
	CALL	__imul_b
	LD	BC,_sprites
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%C)
	CALL	__stoiu
	ADD	HL,DE
	LD	A,(IY)
	LD	(HL),A
;  334		}
L_49:
.LINE 334

;  335		sprites[yn1][xn1] = NOSPRITE; // player's sprite isn't handled by using a box spriteid
.LINE 335

	LD	BC,(IX+%9)
	CALL	__stoiu
	LD	A,%28
	CALL	__imul_b
	LD	BC,_sprites
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%6)
	CALL	__stoiu
	ADD	HL,DE
	LD	(HL),%FF
;  336		sprites[currentlevel.ypos][currentlevel.xpos] = NOSPRITE;
.LINE 336

	LD	A,(_currentlevel+1)
	UEXT	HL
	LD	L,A
	LD	A,%28
	CALL	__imul_b
	LD	BC,_sprites
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_currentlevel)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),%FF
;  337		
;  338		vdp_spriteRefresh();
.LINE 338

	CALL	_vdp_spriteRefresh
;  339	}
.LINE 339

	LD	SP,IX
	POP	IX
	RET	


;**************************** _move_sprites ***************************
;Name                         Addr/Register   Size   Type
;_vdp_spriteRefresh                  IMPORT  -----   function
;_vdp_spriteSetFrameSelected         IMPORT  -----   function
;_currentlevel                       STATIC   1207   variable
;_vdp_spriteMoveBySelected           IMPORT  -----   function
;_vdp_spriteSelect                   IMPORT  -----   function
;_sprites                            STATIC   1200   variable
;n2                                    IX-7      1   variable
;dy                                    IX-6      2   variable
;dx                                    IX-4      2   variable
;n                                     IX-2      1   variable
;spriteid                              IX-1      1   variable
;yn2                                  IX+15      2   parameter
;xn2                                  IX+12      2   parameter
;yn1                                   IX+9      2   parameter
;xn1                                   IX+6      2   parameter


; Stack Frame Size: 25 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "move_sprites",339,"_move_sprites"
;  340	
;  341	void undomove_sprites(UINT16 xn1, UINT16 yn1, UINT16 xn2, UINT16 yn2)
;  342	{
_undomove_sprites:
.DEFINE "_undomove_sprites"

.VALUE _undomove_sprites

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "undomove_sprites",342,"_undomove_sprites"

.LINE 342

.DEFINE "xn1"

.CLASS 65

.VALUE 6

.TYPE 13

.ENDEF

.DEFINE "yn1"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

.DEFINE "xn2"

.CLASS 65

.VALUE 12

.TYPE 13

.ENDEF

.DEFINE "yn2"

.CLASS 65

.VALUE 15

.TYPE 13

.ENDEF

.DEFINE "spriteid"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "n"

.CLASS 65

.VALUE -2

.TYPE 12

.ENDEF

.DEFINE "dx"

.CLASS 65

.VALUE -4

.TYPE 3

.ENDEF

.DEFINE "dy"

.CLASS 65

.VALUE -6

.TYPE 3

.ENDEF

.DEFINE "n2"

.CLASS 65

.VALUE -7

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
	DEC	SP
;  343		// move can happen, no need to check again
;  344		UINT8 spriteid = sprites[yn1][xn1];
.LINE 344

	LD	BC,(IX+%9)
	CALL	__stoiu
	LD	A,%28
	CALL	__imul_b
	LD	BC,_sprites
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%6)
	CALL	__stoiu
	ADD	HL,DE
	LD	A,(HL)
	LD	(IX+%FFFFFFFF),A
;  345		UINT8 n;
;  346		INT16 dx, dy;
;  347		UINT8 n2;
;  348			
;  349		dx = xn2 - xn1;
.LINE 349

	LD	BC,(IX+%6)
	LD	HL,(IX+%C)
	OR	A,A
	SBC.SIS	HL,BC
	LD	(IX+%FFFFFFFC),L
	LD	(IX+%FFFFFFFD),H
;  350		dy = yn2 - yn1;
.LINE 350

	LD	BC,(IX+%9)
	LD	HL,(IX+%F)
	OR	A,A
	SBC.SIS	HL,BC
	LD	(IX+%FFFFFFFA),L
	LD	(IX+%FFFFFFFB),H
;  351		
;  352		for(n = 0; n < BITMAP_WIDTH; n++)
.LINE 352

	LD	(IX+%FFFFFFFE),%0
	JR	L_57
L_55:
;  353		{
;  354			if((undomove[undo_head].pushed) && (spriteid != NOSPRITE))
.LINE 354

	LD	A,(_undo_head)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	BC,_undomove
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+%1)
	OR	A,A
	JR	Z,L_54
	LD	A,(IX+%FFFFFFFF)
	CP	A,%FF
	JR	Z,L_54
;  355			{
;  356				vdp_spriteSelect(spriteid);
.LINE 356

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  357				vdp_spriteMoveBySelected(dx, dy);
.LINE 357

	LD	BC,(IX+%FFFFFFFA)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	CALL	_vdp_spriteMoveBySelected
	POP	BC
	POP	BC
;  358			}
L_54:
.LINE 358

;  359			vdp_spriteSelect(0); // player
.LINE 359

	LD	BC,0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  360			vdp_spriteMoveBySelected(dx, dy);
.LINE 360

	LD	BC,(IX+%FFFFFFFA)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	CALL	_vdp_spriteMoveBySelected
	POP	BC
	POP	BC
	INC	(IX+%FFFFFFFE)
;  361		}
L_57:
.LINE 361

	LD	A,(IX+%FFFFFFFE)
	CP	A,%10
	JR	C,L_55
;  362	
;  363		// set destination sprite frame
;  364		if((undomove[undo_head].pushed) && (spriteid != NOSPRITE))
.LINE 364

	LD	A,(_undo_head)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	BC,_undomove
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+%1)
	OR	A,A
	JR	Z,L_66
	LD	A,(IX+%FFFFFFFF)
	CP	A,%FF
	JR	Z,L_66
;  365		{
;  366			vdp_spriteSelect(spriteid);
.LINE 366

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  367			// Check if the sprite moved to a goal or floor
;  368			n2 = currentlevel.data[yn2][xn2];
.LINE 368

	LD	BC,(IX+%F)
	CALL	__stoiu
	LD	A,%28
	CALL	__imul_b
	LD	BC,_currentlevel+7
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%C)
	CALL	__stoiu
	ADD	HL,DE
	LD	A,(HL)
	LD	(IX+%FFFFFFF9),A
;  369			switch(n2)
.LINE 369

	UEXT	HL
	LD	L,A
	CALL	__case8D
	JP	(HL)
L__24:
	DW	2
	DB	43
	DW24	L_60	

	DB	64
	DW24	L_59	

	DW24	L_66	

;  370			{
;  371				case CHAR_PLAYER:
L_59:
.LINE 371

;  372					vdp_spriteSetFrameSelected(0);
.LINE 372

	LD	BC,0
	PUSH	BC
	CALL	_vdp_spriteSetFrameSelected
	POP	BC
;  373					break;
.LINE 373

	JR	L_66
;  374				case CHAR_PLAYERONGOAL:
L_60:
.LINE 374

;  375					vdp_spriteSetFrameSelected(1);
.LINE 375

	LD	BC,1
	PUSH	BC
	CALL	_vdp_spriteSetFrameSelected
	POP	BC
;  376					break;
;  377			}
;  378		}
L_66:
.LINE 378

;  379		// update sprite number matrix
;  380		if(undomove[undo_head].pushed)
.LINE 380

	LD	A,(_undo_head)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	BC,_undomove
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+%1)
	OR	A,A
	JR	Z,L_67
;  381		{
;  382			if(spriteid != NOSPRITE)
.LINE 382

	LD	A,(IX+%FFFFFFFF)
	CP	A,%FF
	JR	Z,L_64
;  383			{
;  384				// player shoved a box here
;  385				sprites[yn2][xn2] = sprites[yn1][xn1];
.LINE 385

	LD	BC,(IX+%9)
	CALL	__stoiu
	LD	A,%28
	CALL	__imul_b
	LD	BC,_sprites
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%6)
	CALL	__stoiu
	ADD	HL,DE
	LD	IY,HL
	LD	BC,(IX+%F)
	CALL	__stoiu
	LD	A,%28
	CALL	__imul_b
	LD	BC,_sprites
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%C)
	CALL	__stoiu
	ADD	HL,DE
	LD	A,(IY)
	LD	(HL),A
;  386			}
L_64:
.LINE 386

;  387			sprites[yn1][xn1] = NOSPRITE; // player's sprite isn't handled by using a box spriteid			
.LINE 387

	LD	BC,(IX+%9)
	CALL	__stoiu
	LD	A,%28
	CALL	__imul_b
	LD	BC,_sprites
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%6)
	CALL	__stoiu
	ADD	HL,DE
	LD	(HL),%FF
;  388		}
L_67:
.LINE 388

;  389		
;  390		vdp_spriteRefresh();
.LINE 390

	CALL	_vdp_spriteRefresh
;  391	}
.LINE 391

	LD	SP,IX
	POP	IX
	RET	


;**************************** _undomove_sprites ***************************
;Name                         Addr/Register   Size   Type
;_vdp_spriteRefresh                  IMPORT  -----   function
;_vdp_spriteSetFrameSelected         IMPORT  -----   function
;_currentlevel                       STATIC   1207   variable
;_vdp_spriteMoveBySelected           IMPORT  -----   function
;_vdp_spriteSelect                   IMPORT  -----   function
;_undo_head                          STATIC      1   variable
;_undomove                           STATIC    256   variable
;_sprites                            STATIC   1200   variable
;n2                                    IX-7      1   variable
;dy                                    IX-6      2   variable
;dx                                    IX-4      2   variable
;n                                     IX-2      1   variable
;spriteid                              IX-1      1   variable
;yn2                                  IX+15      2   parameter
;xn2                                  IX+12      2   parameter
;yn1                                   IX+9      2   parameter
;xn1                                   IX+6      2   parameter


; Stack Frame Size: 25 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "undomove_sprites",391,"_undomove_sprites"
;  392	
;  393	void move_updatelevel(UINT16 xn1, UINT16 yn1, UINT16 xn2, UINT16 yn2)
;  394	{
_move_updatelevel:
.DEFINE "_move_updatelevel"

.VALUE _move_updatelevel

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "move_updatelevel",394,"_move_updatelevel"

.LINE 394

.DEFINE "xn1"

.CLASS 65

.VALUE 6

.TYPE 13

.ENDEF

.DEFINE "yn1"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

.DEFINE "xn2"

.CLASS 65

.VALUE 12

.TYPE 13

.ENDEF

.DEFINE "yn2"

.CLASS 65

.VALUE 15

.TYPE 13

.ENDEF

.DEFINE "onlyplayermoves"

.CLASS 65

.VALUE -4

.TYPE 12

.ENDEF

.DEFINE "n1"

.CLASS 65

.VALUE -5

.TYPE 12

.ENDEF

.DEFINE "n2"

.CLASS 65

.VALUE -21

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFE5
	LD	SP,HL
;  395		// move can happen, no need to check again
;  396		UINT8 n1, n2;
;  397		BOOL onlyplayermoves;
;  398		
;  399		// move n1 => n2
;  400		n1 = currentlevel.data[yn1][xn1];
.LINE 400

	LD	BC,_currentlevel+7
	LD	(IX+%FFFFFFE5),BC
	LD	(IX+%FFFFFFEC),BC
	LD	BC,(IX+%9)
	CALL	__stoiu
	LD	A,%28
	CALL	__imul_b
	LD	(IX+%FFFFFFFD),HL
	LD	(IX+%FFFFFFEF),HL
	LD	(IX+%FFFFFFF2),HL
	LD	(IX+%FFFFFFE8),HL
	LD	BC,_currentlevel+7
	LD	HL,(IX+%FFFFFFFD)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%6)
	CALL	__stoiu
	ADD	HL,DE
	LD	A,(HL)
	LD	(IX+%FFFFFFFB),A
;  401		n2 = currentlevel.data[yn2][xn2];
.LINE 401

	LD	BC,(IX+%F)
	CALL	__stoiu
	LD	A,%28
	CALL	__imul_b
	LD	(IX+%FFFFFFF8),HL
	LD	BC,_currentlevel+7
	LD	HL,(IX+%FFFFFFF8)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%C)
	CALL	__stoiu
	ADD	HL,DE
	LD	A,(HL)
	LD	(IX+%FFFFFFEB),A
;  402	
;  403		
;  404		switch(n1)
.LINE 404

	LD	A,(IX+%FFFFFFFB)
	UEXT	HL
	LD	L,A
	CALL	__case8D
	JP	(HL)
L__28:
	DW	2
	DB	32
	DW24	L_69	

	DB	46
	DW24	L_70	

	DW24	L_71	

;  405		{
;  406			case CHAR_FLOOR:
L_69:
.LINE 406

;  407				onlyplayermoves = TRUE;
.LINE 407

	LD	(IX+%FFFFFFFC),%1
;  408				currentlevel.data[yn1][xn1] = CHAR_PLAYER;
.LINE 408

	LD	BC,_currentlevel+7
	LD	(IX+%FFFFFFE5),BC
	LD	(IX+%FFFFFFEC),BC
	LD	BC,(IX+%FFFFFFFD)
	LD	(IX+%FFFFFFEF),BC
	LD	BC,(IX+%FFFFFFFD)
	LD	(IX+%FFFFFFF2),BC
	LD	BC,(IX+%FFFFFFFD)
	LD	(IX+%FFFFFFE8),BC
	LD	BC,_currentlevel+7
	LD	HL,(IX+%FFFFFFFD)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%6)
	CALL	__stoiu
	ADD	HL,DE
	LD	(HL),%40
;  409				break;
.LINE 409

	JR	L_82
;  410			case CHAR_GOAL:
L_70:
.LINE 410

;  411				onlyplayermoves = TRUE;
.LINE 411

	LD	(IX+%FFFFFFFC),%1
;  412				currentlevel.data[yn1][xn1] = CHAR_PLAYERONGOAL;
.LINE 412

	LD	BC,_currentlevel+7
	LD	(IX+%FFFFFFE5),BC
	LD	(IX+%FFFFFFEC),BC
	LD	BC,(IX+%FFFFFFFD)
	LD	(IX+%FFFFFFEF),BC
	LD	BC,(IX+%FFFFFFFD)
	LD	(IX+%FFFFFFF2),BC
	LD	BC,(IX+%FFFFFFFD)
	LD	(IX+%FFFFFFE8),BC
	LD	BC,_currentlevel+7
	LD	HL,(IX+%FFFFFFFD)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%6)
	CALL	__stoiu
	ADD	HL,DE
	LD	(HL),%2B
;  413				break;
.LINE 413

	JR	L_82
;  414			default:
L_71:
.LINE 414

;  415				onlyplayermoves = FALSE;
.LINE 415

	LD	(IX+%FFFFFFFC),%0
;  416				break;
;  417		}
L_82:
.LINE 417

;  418		if(!onlyplayermoves)
.LINE 418

	LD	A,(IX+%FFFFFFFC)
	OR	A,A
	JR	NZ,L_85
;  419		{
;  420			switch(n2)
.LINE 420

	LD	A,(IX+%FFFFFFEB)
	UEXT	HL
	LD	L,A
	CALL	__case8D
	JP	(HL)
L__30:
	DW	2
	DB	32
	DW24	L_72	

	DB	46
	DW24	L_73	

	DW24	L_80	

;  421			{
;  422				case CHAR_FLOOR:
L_72:
.LINE 422

;  423					currentlevel.data[yn2][xn2] = CHAR_BOX;
.LINE 423

	LD	BC,(IX+%FFFFFFF8)
	LD	HL,(IX+%FFFFFFE5)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%C)
	CALL	__stoiu
	ADD	HL,DE
	LD	(HL),%24
;  424					break;
.LINE 424

	JR	L_80
;  425				case CHAR_GOAL:
L_73:
.LINE 425

;  426					currentlevel.data[yn2][xn2] = CHAR_BOXONGOAL;
.LINE 426

	LD	BC,(IX+%FFFFFFF8)
	LD	HL,(IX+%FFFFFFEC)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%C)
	CALL	__stoiu
	ADD	HL,DE
	LD	(HL),%2A
;  427					currentlevel.goalstaken++;
.LINE 427

	LD	A,(_currentlevel+5)
	INC	A
	LD	(_currentlevel+5),A
;  428					break;
;  429				default:
;  430					break; // ignore the rest
;  431			}
L_80:
.LINE 431

;  432			switch(n1)
.LINE 432

	LD	A,(IX+%FFFFFFFB)
	UEXT	HL
	LD	L,A
	CALL	__case8D
	JP	(HL)
L__31:
	DW	3
	DB	36
	DW24	L_76	

	DB	42
	DW24	L_77	

	DB	46
	DW24	L_79	

	DW24	L_85	

;  433			{
;  434				case CHAR_BOX:
L_76:
.LINE 434

;  435					currentlevel.data[yn1][xn1] = CHAR_PLAYER;				
.LINE 435

	LD	BC,_currentlevel+7
	LD	HL,(IX+%FFFFFFEF)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%6)
	CALL	__stoiu
	ADD	HL,DE
	LD	(HL),%40
;  436					break;
.LINE 436

	JR	L_85
;  437				case CHAR_BOXONGOAL:
L_77:
.LINE 437

;  438					currentlevel.data[yn1][xn1] = CHAR_PLAYERONGOAL;				
.LINE 438

	LD	BC,_currentlevel+7
	LD	HL,(IX+%FFFFFFF2)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%6)
	CALL	__stoiu
	ADD	HL,DE
	LD	(HL),%2B
;  439					currentlevel.goalstaken--;
.LINE 439

	LD	A,(_currentlevel+5)
	DEC	A
	LD	(_currentlevel+5),A
;  440					break;
.LINE 440

	JR	L_85
;  441				case CHAR_GOAL:
L_79:
.LINE 441

;  442					currentlevel.data[yn1][xn1] = CHAR_PLAYERONGOAL;
.LINE 442

	LD	BC,_currentlevel+7
	LD	HL,(IX+%FFFFFFE8)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%6)
	CALL	__stoiu
	ADD	HL,DE
	LD	(HL),%2B
;  443					break;
;  444			}
;  445		}
L_85:
.LINE 445

;  446		
;  447		
;  448		// check where the player was standing on
;  449		if(currentlevel.data[currentlevel.ypos][currentlevel.xpos] == CHAR_PLAYERONGOAL) currentlevel.data[currentlevel.ypos][currentlevel.xpos] = CHAR_GOAL;
.LINE 449

	LD	BC,_currentlevel+7
	LD	(IX+%FFFFFFF5),BC
	LD	A,(_currentlevel+1)
	UEXT	HL
	LD	L,A
	LD	A,%28
	CALL	__imul_b
	LD	BC,(IX+%FFFFFFF5)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_currentlevel)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,43
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_84
	LD	A,(_currentlevel+1)
	UEXT	HL
	LD	L,A
	LD	A,%28
	CALL	__imul_b
	LD	BC,(IX+%FFFFFFF5)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_currentlevel)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),%2E
;  450		else currentlevel.data[currentlevel.ypos][currentlevel.xpos] = CHAR_FLOOR;
.LINE 450

	JR	L_86
L_84:
	LD	A,(_currentlevel+1)
	UEXT	HL
	LD	L,A
	LD	A,%28
	CALL	__imul_b
	LD	BC,(IX+%FFFFFFF5)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(_currentlevel)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),%20
L_86:
;  451		
;  452		// update player position
;  453		currentlevel.xpos = xn1;
.LINE 453

	LD	A,(IX+%6)
	LD	(_currentlevel),A
;  454		currentlevel.ypos = yn1;
.LINE 454

	LD	A,(IX+%9)
	LD	(_currentlevel+1),A
;  455	}
.LINE 455

	LD	SP,IX
	POP	IX
	RET	


;**************************** _move_updatelevel ***************************
;Name                         Addr/Register   Size   Type
;_currentlevel                       STATIC   1207   variable
;G_4                                  IX-27      3   variable
;G_10                                 IX-24      3   variable
;n2                                   IX-21      1   variable
;G_6                                  IX-20      3   variable
;G_8                                  IX-17      3   variable
;G_9                                  IX-14      3   variable
;G_11                                 IX-11      3   variable
;G_5                                   IX-8      3   variable
;n1                                    IX-5      1   variable
;onlyplayermoves                       IX-4      1   variable
;G_1                                   IX-3      3   variable
;yn2                                  IX+15      2   parameter
;xn2                                  IX+12      2   parameter
;yn1                                   IX+9      2   parameter
;xn1                                   IX+6      2   parameter


; Stack Frame Size: 45 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "move_updatelevel",455,"_move_updatelevel"
;  456	
;  457	void undomove_updatelevel(UINT16 xn1, UINT16 yn1, UINT16 xn2, UINT16 yn2, UINT16 xn3, UINT16 yn3)
;  458	{
_undomove_updatelevel:
.DEFINE "_undomove_updatelevel"

.VALUE _undomove_updatelevel

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "undomove_updatelevel",458,"_undomove_updatelevel"

.LINE 458

.DEFINE "xn1"

.CLASS 65

.VALUE 6

.TYPE 13

.ENDEF

.DEFINE "yn1"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

.DEFINE "xn2"

.CLASS 65

.VALUE 12

.TYPE 13

.ENDEF

.DEFINE "yn2"

.CLASS 65

.VALUE 15

.TYPE 13

.ENDEF

.DEFINE "xn3"

.CLASS 65

.VALUE 18

.TYPE 13

.ENDEF

.DEFINE "yn3"

.CLASS 65

.VALUE 21

.TYPE 13

.ENDEF

.DEFINE "n2"

.CLASS 65

.VALUE -13

.TYPE 12

.ENDEF

.DEFINE "n1"

.CLASS 65

.VALUE -23

.TYPE 12

.ENDEF

.DEFINE "n3"

.CLASS 65

.VALUE -27

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFE5
	LD	SP,HL
;  459		UINT8 n1, n2, n3;
;  460		
;  461		// move n1 => n2 => n3
;  462		n1 = currentlevel.data[yn1][xn1]; // Source / from
.LINE 462

	LD	BC,_currentlevel+7
	LD	(IX+%FFFFFFE6),BC
	LD	(IX+%FFFFFFED),BC
	LD	(IX+%FFFFFFEA),BC
	LD	(IX+%FFFFFFF0),BC
	LD	(IX+%FFFFFFFD),BC
	LD	BC,(IX+%9)
	CALL	__stoiu
	LD	A,%28
	CALL	__imul_b
	LD	(IX+%FFFFFFF4),HL
	LD	BC,(IX+%FFFFFFFD)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%6)
	CALL	__stoiu
	ADD	HL,DE
	LD	A,(HL)
	LD	(IX+%FFFFFFE9),A
;  463		n2 = currentlevel.data[yn2][xn2]; // This is the curent player's position
.LINE 463

	LD	BC,(IX+%F)
	CALL	__stoiu
	LD	A,%28
	CALL	__imul_b
	LD	(IX+%FFFFFFFA),HL
	LD	BC,(IX+%FFFFFFFD)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%C)
	CALL	__stoiu
	ADD	HL,DE
	LD	A,(HL)
	LD	(IX+%FFFFFFF3),A
;  464		n3 = currentlevel.data[yn3][xn3]; // Destination / to
.LINE 464

	LD	BC,(IX+%15)
	CALL	__stoiu
	LD	A,%28
	CALL	__imul_b
	LD	(IX+%FFFFFFF7),HL
	LD	BC,(IX+%FFFFFFFD)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%12)
	CALL	__stoiu
	ADD	HL,DE
	LD	A,(HL)
	LD	(IX+%FFFFFFE5),A
;  465		
;  466		switch(n3)
.LINE 466

	UEXT	HL
	LD	L,A
	CALL	__case8D
	JP	(HL)
L__34:
	DW	2
	DB	32
	DW24	L_88	

	DB	46
	DW24	L_89	

	DW24	L_103	

;  467		{
;  468			case CHAR_FLOOR:
L_88:
.LINE 468

;  469				currentlevel.data[yn3][xn3] = CHAR_PLAYER;
.LINE 469

	LD	BC,_currentlevel+7
	LD	(IX+%FFFFFFE6),BC
	LD	(IX+%FFFFFFED),BC
	LD	(IX+%FFFFFFEA),BC
	LD	(IX+%FFFFFFF0),BC
	LD	HL,(IX+%FFFFFFF7)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%12)
	CALL	__stoiu
	ADD	HL,DE
	LD	(HL),%40
;  470				break;
.LINE 470

	JR	L_103
;  471			case CHAR_GOAL:
L_89:
.LINE 471

;  472				currentlevel.data[yn3][xn3] = CHAR_PLAYERONGOAL;
.LINE 472

	LD	BC,_currentlevel+7
	LD	(IX+%FFFFFFE6),BC
	LD	(IX+%FFFFFFED),BC
	LD	(IX+%FFFFFFEA),BC
	LD	(IX+%FFFFFFF0),BC
	LD	HL,(IX+%FFFFFFF7)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%12)
	CALL	__stoiu
	ADD	HL,DE
	LD	(HL),%2B
;  473				break;
;  474			default:
;  475				break;
;  476		}
L_103:
.LINE 476

;  477		
;  478		if(undomove[undo_head].pushed)
.LINE 478

	LD	A,(_undo_head)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	BC,_undomove
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+%1)
	OR	A,A
	JR	Z,L_102
;  479		{
;  480			switch(n1)
.LINE 480

	LD	A,(IX+%FFFFFFE9)
	UEXT	HL
	LD	L,A
	CALL	__case8D
	JP	(HL)
L__36:
	DW	2
	DB	36
	DW24	L_91	

	DB	42
	DW24	L_92	

	DW24	L_98	

;  481			{
;  482				case CHAR_BOX:
L_91:
.LINE 482

;  483					currentlevel.data[yn1][xn1] = CHAR_FLOOR;
.LINE 483

	LD	BC,(IX+%FFFFFFF4)
	LD	HL,(IX+%FFFFFFE6)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%6)
	CALL	__stoiu
	ADD	HL,DE
	LD	(HL),%20
;  484					break;
.LINE 484

	JR	L_98
;  485				case CHAR_BOXONGOAL:
L_92:
.LINE 485

;  486					currentlevel.data[yn1][xn1] = CHAR_GOAL;
.LINE 486

	LD	BC,(IX+%FFFFFFF4)
	LD	HL,(IX+%FFFFFFED)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%6)
	CALL	__stoiu
	ADD	HL,DE
	LD	(HL),%2E
;  487					currentlevel.goalstaken--;
.LINE 487

	LD	A,(_currentlevel+5)
	DEC	A
	LD	(_currentlevel+5),A
;  488					break;
;  489				default:
;  490					break;
;  491			}
L_98:
.LINE 491

;  492			switch(n2) // revert push to box
.LINE 492

	LD	A,(IX+%FFFFFFF3)
	UEXT	HL
	LD	L,A
	LD	BC,43
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_97
;  493			{
;  494				case CHAR_PLAYERONGOAL:
.LINE 494

;  495					currentlevel.data[yn2][xn2] = CHAR_BOXONGOAL;
.LINE 495

	LD	BC,_currentlevel+7
	LD	HL,(IX+%FFFFFFFA)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%C)
	CALL	__stoiu
	ADD	HL,DE
	LD	(HL),%2A
;  496					currentlevel.goalstaken++;
.LINE 496

	LD	A,(_currentlevel+5)
	INC	A
	LD	(_currentlevel+5),A
;  497					break;
.LINE 497

	JR	L_104
;  498				default:
L_97:
.LINE 498

;  499					currentlevel.data[yn2][xn2] = CHAR_BOX;
.LINE 499

	LD	BC,_currentlevel+7
	LD	HL,(IX+%FFFFFFFA)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%C)
	CALL	__stoiu
	ADD	HL,DE
	LD	(HL),%24
;  500					break;
.LINE 500

	JR	L_104
;  501			}
;  502		}
;  503		else // only the player switched position, nothing was pushed
L_102:
.LINE 503

;  504		{
;  505			switch(n2)
.LINE 505

	LD	A,(IX+%FFFFFFF3)
	UEXT	HL
	LD	L,A
	LD	BC,43
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_100
;  506			{
;  507				case CHAR_PLAYERONGOAL:
.LINE 507

;  508					currentlevel.data[yn2][xn2] = CHAR_GOAL;
.LINE 508

	LD	BC,(IX+%FFFFFFFA)
	LD	HL,(IX+%FFFFFFEA)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%C)
	CALL	__stoiu
	ADD	HL,DE
	LD	(HL),%2E
;  509					break;
.LINE 509

	JR	L_104
;  510				default:
L_100:
.LINE 510

;  511					currentlevel.data[yn2][xn2] = CHAR_FLOOR;
.LINE 511

	LD	BC,(IX+%FFFFFFFA)
	LD	HL,(IX+%FFFFFFF0)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%C)
	CALL	__stoiu
	ADD	HL,DE
	LD	(HL),%20
;  512					break;
;  513			}
;  514		}
L_104:
.LINE 514

;  515		
;  516		// update player position
;  517		currentlevel.xpos = xn3;
.LINE 517

	LD	A,(IX+%12)
	LD	(_currentlevel),A
;  518		currentlevel.ypos = yn3;
.LINE 518

	LD	A,(IX+%15)
	LD	(_currentlevel+1),A
;  519	}
.LINE 519

	LD	SP,IX
	POP	IX
	RET	


;**************************** _undomove_updatelevel ***************************
;Name                         Addr/Register   Size   Type
;_undo_head                          STATIC      1   variable
;_undomove                           STATIC    256   variable
;_currentlevel                       STATIC   1207   variable
;n3                                   IX-27      1   variable
;G_17                                 IX-26      3   variable
;n1                                   IX-23      1   variable
;G_23                                 IX-22      3   variable
;G_19                                 IX-19      3   variable
;G_25                                 IX-16      3   variable
;n2                                   IX-13      1   variable
;G_18                                 IX-12      3   variable
;G_14                                  IX-9      3   variable
;G_21                                  IX-6      3   variable
;yn3                                  IX+21      2   parameter
;xn3                                  IX+18      2   parameter
;yn2                                  IX+15      2   parameter
;xn2                                  IX+12      2   parameter
;yn1                                   IX+9      2   parameter
;xn1                                   IX+6      2   parameter


; Stack Frame Size: 51 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "undomove_updatelevel",519,"_undomove_updatelevel"
;  520	
;  521	void game_handleUndoMove(void)
;  522	{
_game_handleUndoMove:
.DEFINE "_game_handleUndoMove"

.VALUE _game_handleUndoMove

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "game_handleUndoMove",522,"_game_handleUndoMove"

.LINE 522

.DEFINE "xn2"

.CLASS 65

.VALUE -2

.TYPE 3

.ENDEF

.DEFINE "yn2"

.CLASS 65

.VALUE -4

.TYPE 3

.ENDEF

.DEFINE "yn1"

.CLASS 65

.VALUE -6

.TYPE 3

.ENDEF

.DEFINE "xn1"

.CLASS 65

.VALUE -8

.TYPE 3

.ENDEF

.DEFINE "xn3"

.CLASS 65

.VALUE -10

.TYPE 3

.ENDEF

.DEFINE "yn3"

.CLASS 65

.VALUE -12

.TYPE 3

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFF4
	LD	SP,HL
;  523		INT16 xn1 = 0, xn2 = 0, yn1 = 0, yn2 = 0, xn3 = 0, yn3 = 0;
.LINE 523

	LD	(IX+%FFFFFFF8),%0
	LD	(IX+%FFFFFFF9),%0
	LD	(IX+%FFFFFFFA),%0
	LD	(IX+%FFFFFFFB),%0
	LD	(IX+%FFFFFFF6),%0
	LD	(IX+%FFFFFFF7),%0
	LD	(IX+%FFFFFFF4),%0
	LD	(IX+%FFFFFFF5),%0
;  524		
;  525		if(num_undomoves)
.LINE 525

	LD	A,(_num_undomoves)
	OR	A,A
	JR	Z,L_117
;  526		{
;  527			xn2 = currentlevel.xpos;
.LINE 527

	LD	A,(_currentlevel)
	LD	C,A
	LD	B,%0
	LD	HL,BC
	LD	(IX+%FFFFFFFE),L
	LD	(IX+%FFFFFFFF),H
;  528			yn2 = currentlevel.ypos;
.LINE 528

	LD	A,(_currentlevel+1)
	LD	C,A
	LD	HL,BC
	LD	(IX+%FFFFFFFC),L
	LD	(IX+%FFFFFFFD),H
;  529	
;  530			// pop one move off circular buffer
;  531			if(undo_head) undo_head--;
.LINE 531

	LD	A,(_undo_head)
	OR	A,A
	JR	Z,L_108
	LD	A,(_undo_head)
	DEC	A
	LD	(_undo_head),A
;  532			else undo_head = UNDOBUFFERSIZE-1;		
.LINE 532

	JR	L_113
L_108:
	LD	A,%7F
	LD	(_undo_head),A
L_113:
;  533			// undo_head no points to previous move				
;  534			
;  535			switch(undomove[undo_head].movekey)
.LINE 535

	LD	A,(_undo_head)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	BC,_undomove
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+%0)
	UEXT	HL
	LD	L,A
	CALL	__case8D
	JP	(HL)
L__40:
	DW	4
	DB	8
	DW24	L_109	

	DB	10
	DW24	L_111	

	DB	11
	DW24	L_110	

	DB	21
	DW24	L_112	

	DW24	L_114	

;  536			{
;  537				case 0x8: // undo LEFT
L_109:
.LINE 537

;  538					yn1 = yn2;
.LINE 538

	LD	BC,(IX+%FFFFFFFC)
	LD	(IX+%FFFFFFFA),C
	LD	(IX+%FFFFFFFB),B
;  539					yn3 = yn2;
.LINE 539

	LD	BC,(IX+%FFFFFFFC)
	LD	(IX+%FFFFFFF4),C
	LD	(IX+%FFFFFFF5),B
;  540					xn1 = xn2 - 1;
.LINE 540

	LD	HL,(IX+%FFFFFFFE)
	DEC	HL
	LD	(IX+%FFFFFFF8),L
	LD	(IX+%FFFFFFF9),H
;  541					xn3 = xn2 + 1;
.LINE 541

	LD	HL,(IX+%FFFFFFFE)
	INC	HL
	LD	(IX+%FFFFFFF6),L
	LD	(IX+%FFFFFFF7),H
;  542					break;
.LINE 542

	JR	L_114
;  543				case 0xb: // undo UP
L_110:
.LINE 543

;  544					xn1 = xn2;
.LINE 544

	LD	BC,(IX+%FFFFFFFE)
	LD	(IX+%FFFFFFF8),C
	LD	(IX+%FFFFFFF9),B
;  545					xn3 = xn2;
.LINE 545

	LD	BC,(IX+%FFFFFFFE)
	LD	(IX+%FFFFFFF6),C
	LD	(IX+%FFFFFFF7),B
;  546					yn1 = yn2 - 1;
.LINE 546

	LD	HL,(IX+%FFFFFFFC)
	DEC	HL
	LD	(IX+%FFFFFFFA),L
	LD	(IX+%FFFFFFFB),H
;  547					yn3 = yn2 + 1;
.LINE 547

	LD	HL,(IX+%FFFFFFFC)
	INC	HL
	LD	(IX+%FFFFFFF4),L
	LD	(IX+%FFFFFFF5),H
;  548					break;
.LINE 548

	JR	L_114
;  549				case 0xa: // undo DOWN
L_111:
.LINE 549

;  550					xn1 = xn2;
.LINE 550

	LD	BC,(IX+%FFFFFFFE)
	LD	(IX+%FFFFFFF8),C
	LD	(IX+%FFFFFFF9),B
;  551					xn3 = xn2;
.LINE 551

	LD	BC,(IX+%FFFFFFFE)
	LD	(IX+%FFFFFFF6),C
	LD	(IX+%FFFFFFF7),B
;  552					yn1 = yn2 + 1;
.LINE 552

	LD	HL,(IX+%FFFFFFFC)
	INC	HL
	LD	(IX+%FFFFFFFA),L
	LD	(IX+%FFFFFFFB),H
;  553					yn3 = yn2 - 1;
.LINE 553

	LD	HL,(IX+%FFFFFFFC)
	DEC	HL
	LD	(IX+%FFFFFFF4),L
	LD	(IX+%FFFFFFF5),H
;  554					break;
.LINE 554

	JR	L_114
;  555				case 0x15: // undo RIGHT
L_112:
.LINE 555

;  556					yn1 = yn2;
.LINE 556

	LD	BC,(IX+%FFFFFFFC)
	LD	(IX+%FFFFFFFA),C
	LD	(IX+%FFFFFFFB),B
;  557					yn3 = yn2;
.LINE 557

	LD	BC,(IX+%FFFFFFFC)
	LD	(IX+%FFFFFFF4),C
	LD	(IX+%FFFFFFF5),B
;  558					xn1 = xn2 + 1;
.LINE 558

	LD	HL,(IX+%FFFFFFFE)
	INC	HL
	LD	(IX+%FFFFFFF8),L
	LD	(IX+%FFFFFFF9),H
;  559					xn3 = xn2 - 1;
.LINE 559

	LD	HL,(IX+%FFFFFFFE)
	DEC	HL
	LD	(IX+%FFFFFFF6),L
	LD	(IX+%FFFFFFF7),H
;  560					break;
;  561			}
L_114:
.LINE 561

;  562			undomove_sprites(xn1,yn1,xn2,yn2);			
.LINE 562

	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFE)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFA)
	PUSH	BC
	LD	BC,(IX+%FFFFFFF8)
	PUSH	BC
	CALL	_undomove_sprites
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  563			undomove_updatelevel(xn1, yn1, xn2, yn2, xn3, yn3);
.LINE 563

	LD	BC,(IX+%FFFFFFF4)
	PUSH	BC
	LD	BC,(IX+%FFFFFFF6)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFE)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFA)
	PUSH	BC
	LD	BC,(IX+%FFFFFFF8)
	PUSH	BC
	CALL	_undomove_updatelevel
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  564			
;  565			num_undomoves--;
.LINE 565

	LD	A,(_num_undomoves)
	DEC	A
	LD	(_num_undomoves),A
;  566		}
;  567	}
L_117:
.LINE 567

	LD	SP,IX
	POP	IX
	RET	


;**************************** _game_handleUndoMove ***************************
;Name                         Addr/Register   Size   Type
;_undomove                           STATIC    256   variable
;_undo_head                          STATIC      1   variable
;_currentlevel                       STATIC   1207   variable
;_num_undomoves                      STATIC      1   variable
;yn3                                  IX-12      2   variable
;xn3                                  IX-10      2   variable
;xn1                                   IX-8      2   variable
;yn1                                   IX-6      2   variable
;yn2                                   IX-4      2   variable
;xn2                                   IX-2      2   variable


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "game_handleUndoMove",567,"_game_handleUndoMove"
;  568	
;  569	BOOL game_handleKey(char key)
;  570	{
_game_handleKey:
.DEFINE "_game_handleKey"

.VALUE _game_handleKey

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "game_handleKey",570,"_game_handleKey"

.LINE 570

.DEFINE "key"

.CLASS 65

.VALUE 6

.TYPE 2

.ENDEF

.DEFINE "xn1"

.CLASS 65

.VALUE -2

.TYPE 3

.ENDEF

.DEFINE "yn1"

.CLASS 65

.VALUE -4

.TYPE 3

.ENDEF

.DEFINE "xn2"

.CLASS 65

.VALUE -6

.TYPE 3

.ENDEF

.DEFINE "yn2"

.CLASS 65

.VALUE -8

.TYPE 3

.ENDEF

.DEFINE "move"

.CLASS 65

.VALUE -9

.TYPE 12

.ENDEF

.DEFINE "done"

.CLASS 65

.VALUE -10

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFEA
	LD	SP,HL
;  571		BOOL done = FALSE;
.LINE 571

	LD	(IX+%FFFFFFF6),%0
;  572		BOOL move = FALSE;
;  573		INT16	xn1 = 0,xn2 = 0,yn1 = 0,yn2 = 0;
.LINE 573

	LD	(IX+%FFFFFFFE),%0
	LD	(IX+%FFFFFFFF),%0
	LD	(IX+%FFFFFFFA),%0
	LD	(IX+%FFFFFFFB),%0
	LD	(IX+%FFFFFFFC),%0
	LD	(IX+%FFFFFFFD),%0
	LD	(IX+%FFFFFFF8),%0
	LD	(IX+%FFFFFFF9),%0
;  574		
;  575		switch(key)
.LINE 575

	LD	A,(IX+%6)
	SEXT	HL
	LD	L,(IX+%6)
	CALL	__case8D
	JP	(HL)
L__42:
	DW	4
	DB	8
	DW24	L_118	

	DB	10
	DW24	L_120	

	DB	11
	DW24	L_119	

	DB	21
	DW24	L_121	

	DW24	L_122	

;  576		{
;  577			case 0x8: // LEFT
L_118:
.LINE 577

;  578				xn1 = currentlevel.xpos - 1;
.LINE 578

	LD	A,(_currentlevel)
	LD	C,A
	LD	B,%0
	DEC	BC
	LD	HL,BC
	LD	(IX+%FFFFFFFE),L
	LD	(IX+%FFFFFFFF),H
;  579				yn1 = currentlevel.ypos;
.LINE 579

	LD	A,(_currentlevel+1)
	LD	C,A
	LD	B,%0
	LD	HL,BC
	LD	(IX+%FFFFFFFC),L
	LD	(IX+%FFFFFFFD),H
;  580				xn2 = currentlevel.xpos - 2;
.LINE 580

	LD	A,(_currentlevel)
	LD	C,A
	DEC	BC
	DEC	BC
	LD	HL,BC
	LD	(IX+%FFFFFFFA),L
	LD	(IX+%FFFFFFFB),H
;  581				yn2 = currentlevel.ypos;
.LINE 581

	LD	A,(_currentlevel+1)
	LD	C,A
	LD	B,%0
	LD	HL,BC
	LD	(IX+%FFFFFFF8),L
	LD	(IX+%FFFFFFF9),H
;  582				move = TRUE;
.LINE 582

	LD	(IX+%FFFFFFF7),%1
;  583				break;
.LINE 583

	JR	L_134
;  584			case 0xb:
L_119:
.LINE 584

;  585				xn1 = currentlevel.xpos;
.LINE 585

	LD	A,(_currentlevel)
	LD	C,A
	LD	B,%0
	LD	HL,BC
	LD	(IX+%FFFFFFFE),L
	LD	(IX+%FFFFFFFF),H
;  586				yn1 = currentlevel.ypos - 1;
.LINE 586

	LD	A,(_currentlevel+1)
	LD	C,A
	DEC	BC
	LD	HL,BC
	LD	(IX+%FFFFFFFC),L
	LD	(IX+%FFFFFFFD),H
;  587				xn2 = currentlevel.xpos;
.LINE 587

	LD	A,(_currentlevel)
	LD	C,A
	LD	B,%0
	LD	HL,BC
	LD	(IX+%FFFFFFFA),L
	LD	(IX+%FFFFFFFB),H
;  588				yn2 = currentlevel.ypos - 2;
.LINE 588

	LD	A,(_currentlevel+1)
	LD	C,A
	DEC	BC
	DEC	BC
	LD	HL,BC
	LD	(IX+%FFFFFFF8),L
	LD	(IX+%FFFFFFF9),H
;  589				move = TRUE;
.LINE 589

	LD	(IX+%FFFFFFF7),%1
;  590				break;
.LINE 590

	JR	L_134
;  591			case 0xa:
L_120:
.LINE 591

;  592				xn1 = currentlevel.xpos;
.LINE 592

	LD	A,(_currentlevel)
	LD	C,A
	LD	B,%0
	LD	HL,BC
	LD	(IX+%FFFFFFFE),L
	LD	(IX+%FFFFFFFF),H
;  593				yn1 = currentlevel.ypos + 1;
.LINE 593

	LD	A,(_currentlevel+1)
	LD	C,A
	INC	BC
	LD	HL,BC
	LD	(IX+%FFFFFFFC),L
	LD	(IX+%FFFFFFFD),H
;  594				xn2 = currentlevel.xpos;
.LINE 594

	LD	A,(_currentlevel)
	LD	C,A
	LD	B,%0
	LD	HL,BC
	LD	(IX+%FFFFFFFA),L
	LD	(IX+%FFFFFFFB),H
;  595				yn2 = currentlevel.ypos + 2;
.LINE 595

	LD	A,(_currentlevel+1)
	LD	C,A
	INC	BC
	INC	BC
	LD	HL,BC
	LD	(IX+%FFFFFFF8),L
	LD	(IX+%FFFFFFF9),H
;  596				move = TRUE;
.LINE 596

	LD	(IX+%FFFFFFF7),%1
;  597				break;
.LINE 597

	JR	L_134
;  598			case 0x15: // RIGHT
L_121:
.LINE 598

;  599				xn1 = currentlevel.xpos + 1;
.LINE 599

	LD	A,(_currentlevel)
	LD	C,A
	LD	B,%0
	INC	BC
	LD	HL,BC
	LD	(IX+%FFFFFFFE),L
	LD	(IX+%FFFFFFFF),H
;  600				yn1 = currentlevel.ypos;
.LINE 600

	LD	A,(_currentlevel+1)
	LD	C,A
	LD	B,%0
	LD	HL,BC
	LD	(IX+%FFFFFFFC),L
	LD	(IX+%FFFFFFFD),H
;  601				xn2 = currentlevel.xpos + 2;
.LINE 601

	LD	A,(_currentlevel)
	LD	C,A
	INC	BC
	INC	BC
	LD	HL,BC
	LD	(IX+%FFFFFFFA),L
	LD	(IX+%FFFFFFFB),H
;  602				yn2 = currentlevel.ypos;
.LINE 602

	LD	A,(_currentlevel+1)
	LD	C,A
	LD	B,%0
	LD	HL,BC
	LD	(IX+%FFFFFFF8),L
	LD	(IX+%FFFFFFF9),H
;  603				move = TRUE;
.LINE 603

	LD	(IX+%FFFFFFF7),%1
;  604				break;
.LINE 604

	JR	L_134
;  605			default:
L_122:
.LINE 605

;  606				move = FALSE;
.LINE 606

	LD	(IX+%FFFFFFF7),%0
;  607				break;
;  608		}
L_134:
.LINE 608

;  609		if(move)
.LINE 609

	LD	A,(IX+%FFFFFFF7)
	OR	A,A
	JR	Z,L_135
;  610		{
;  611			if(canmove(xn1,yn1,xn2,yn2))
.LINE 611

	LD	BC,(IX+%FFFFFFF8)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFA)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFE)
	PUSH	BC
	CALL	_canmove
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_135
;  612			{
;  613				undomove[undo_head].movekey = key;
.LINE 613

	LD	A,(_undo_head)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	BC,_undomove
	ADD	HL,BC
	LD	(IX+%FFFFFFF0),HL
	LD	A,(IX+%6)
	LD	IY,(IX+%FFFFFFF0)
	LD	(IY+%0),A
;  614				undomove[undo_head].pushed = (currentlevel.data[yn1][xn1] == CHAR_BOX) || (currentlevel.data[yn1][xn1] == CHAR_BOXONGOAL);
.LINE 614

	LD	BC,(IX+%FFFFFFFC)
	CALL	__stoi
	LD	A,%28
	CALL	__imul_b
	LD	BC,_currentlevel+7
	ADD	HL,BC
	LD	(IX+%FFFFFFEA),HL
	LD	BC,(IX+%FFFFFFFE)
	CALL	__stoi
	LD	BC,(IX+%FFFFFFEA)
	ADD	HL,BC
	LD	(IX+%FFFFFFED),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,36
	OR	A,A
	SBC	HL,BC
	JR	Z,L_124
	LD	HL,(IX+%FFFFFFED)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,42
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_125
L_124:
	LD	BC,1
	LD	(IX+%FFFFFFF3),BC
	JR	L_126
L_125:
	LD	BC,0
	LD	(IX+%FFFFFFF3),BC
L_126:
	LD	A,(IX+%FFFFFFF3)
	LD	IY,(IX+%FFFFFFF0)
	LD	(IY+%1),A
;  615				// rotate buffer always
;  616				if(++undo_head == UNDOBUFFERSIZE) undo_head = 0;
.LINE 616

	LD	A,(_undo_head)
	INC	A
	LD	(_undo_head),A
	CP	A,%80
	JR	NZ,L_130
	XOR	A,A
	LD	(_undo_head),A
L_130:
;  617				// maximize number of undo
;  618				if(++num_undomoves > UNDOBUFFERSIZE) num_undomoves = UNDOBUFFERSIZE;
.LINE 618

	LD	A,(_num_undomoves)
	INC	A
	LD	(_num_undomoves),A
	LD	A,%80
	LD	HL,_num_undomoves
	CP	A,(HL)
	JR	NC,L_131
	LD	(_num_undomoves),A
L_131:
;  619				
;  620				move_sprites(xn1,yn1,xn2,yn2);
.LINE 620

	LD	BC,(IX+%FFFFFFF8)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFA)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFE)
	PUSH	BC
	CALL	_move_sprites
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  621				move_updatelevel(xn1,yn1,xn2,yn2);
.LINE 621

	LD	BC,(IX+%FFFFFFF8)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFA)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFE)
	PUSH	BC
	CALL	_move_updatelevel
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  622				done = (currentlevel.goals == currentlevel.goalstaken);
.LINE 622

	LD	A,(_currentlevel+4)
	LD	HL,_currentlevel+5
	CP	A,(HL)
	JR	NZ,L__50
	LD	A,%1
	JR	L__51
L__50:
	XOR	A,A
L__51:
	LD	(IX+%FFFFFFF6),A
;  623			}
;  624		}
L_135:
.LINE 624

;  625		return done;
.LINE 625

	LD	A,(IX+%FFFFFFF6)
;  626	}
.LINE 626

	LD	SP,IX
	POP	IX
	RET	


;**************************** _game_handleKey ***************************
;Name                         Addr/Register   Size   Type
;_num_undomoves                      STATIC      1   variable
;_undo_head                          STATIC      1   variable
;_undomove                           STATIC    256   variable
;_currentlevel                       STATIC   1207   variable
;G_27                                 IX-22      3   variable
;G_28                                 IX-19      3   variable
;G_30                                 IX-16      3   variable
;temp127                              IX-13      3   variable
;done                                 IX-10      1   variable
;move                                  IX-9      1   variable
;yn2                                   IX-8      2   variable
;xn2                                   IX-6      2   variable
;yn1                                   IX-4      2   variable
;xn1                                   IX-2      2   variable
;key                                   IX+6      1   parameter


; Stack Frame Size: 31 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "game_handleKey",626,"_game_handleKey"
;  627	
;  628	char game_getResponse(char *message, char option1, char option2)
;  629	{
_game_getResponse:
.DEFINE "_game_getResponse"

.VALUE _game_getResponse

.CLASS 2

.TYPE 66

.ENDEF

.BEGFUNC "game_getResponse",629,"_game_getResponse"

.LINE 629

.DEFINE "message"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "option1"

.CLASS 65

.VALUE 9

.TYPE 2

.ENDEF

.DEFINE "option2"

.CLASS 65

.VALUE 12

.TYPE 2

.ENDEF

.DEFINE "n"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "ret"

.CLASS 65

.VALUE -2

.TYPE 2

.ENDEF

.DEFINE "start"

.CLASS 65

.VALUE -3

.TYPE 12

.ENDEF

.DEFINE "len"

.CLASS 65

.VALUE -4

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	DEC	SP
;  630		UINT8 n;
;  631		UINT8 len = strlen(message);
.LINE 631

	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	(IX+%FFFFFFFC),L
;  632		UINT8 start = (80 - len) / 2;
.LINE 632

	LD	A,(IX+%FFFFFFFC)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,80
	OR	A,A
	SBC	HL,BC
	LD	BC,2
	CALL	__idivs
	LD	(IX+%FFFFFFFD),L
;  633		char ret = 0;
.LINE 633

	LD	(IX+%FFFFFFFE),%0
;  634		
;  635		
;  636		// vertical spacing
;  637		for(n = start - 1; n < (start+len+1); n++)
.LINE 637

	LD	A,(IX+%FFFFFFFD)
	DEC	A
	LD	(IX+%FFFFFFFF),A
	JR	L_140
L_138:
;  638		{
;  639			vdp_cursorGoto(n,27);
.LINE 639

	LD	BC,27
	PUSH	BC
	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_cursorGoto
	POP	BC
	POP	BC
;  640			putch(' ');
.LINE 640

	LD	BC,32
	PUSH	BC
	CALL	_putch
	POP	BC
;  641			vdp_cursorGoto(n,29);
.LINE 641

	LD	BC,29
	PUSH	BC
	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_cursorGoto
	POP	BC
	POP	BC
;  642			putch(' ');
.LINE 642

	LD	BC,32
	PUSH	BC
	CALL	_putch
	POP	BC
	INC	(IX+%FFFFFFFF)
;  643		}
L_140:
.LINE 643

	LD	A,(IX+%FFFFFFFD)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	A,(IX+%FFFFFFFC)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	INC	BC
	LD	A,(IX+%FFFFFFFF)
	UEXT	HL
	LD	L,A
	OR	A,A
	SBC	HL,BC
	JP	M,L_138
;  644		// horizontal spacing
;  645		vdp_cursorGoto(start-1,28);
.LINE 645

	LD	BC,28
	PUSH	BC
	LD	C,(IX+%FFFFFFFD)
	DEC	C
	LD	B,%0
	PUSH	BC
	CALL	_vdp_cursorGoto
	POP	BC
	POP	BC
;  646		putch(' ');
.LINE 646

	LD	BC,32
	PUSH	BC
	CALL	_putch
	POP	BC
;  647		printf("%s ", message);
.LINE 647

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,(IX+%6)
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,32
	PUSH	BC
	CALL	___print_uputch
	POP	BC
;  648	
;  649		while((ret != option1) && (ret != option2)) ret = getch();
.LINE 649

	JR	L_143
L_144:
	CALL	_getch
	LD	(IX+%FFFFFFFE),A
L_143:
	LD	A,(IX+%FFFFFFFE)
	CP	A,(IX+%9)
	JR	Z,L_145
	LD	A,(IX+%FFFFFFFE)
	CP	A,(IX+%C)
	JR	NZ,L_144
L_145:
;  650		
;  651		vdp_cls();
.LINE 651

	CALL	_vdp_cls
;  652	
;  653		return ret;
.LINE 653

	LD	A,(IX+%FFFFFFFE)
;  654	}
.LINE 654

	LD	SP,IX
	POP	IX
	RET	


;**************************** _game_getResponse ***************************
;Name                         Addr/Register   Size   Type
;_vdp_cls                            IMPORT  -----   function
;_getch                              IMPORT  -----   function
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_putch                              IMPORT  -----   function
;_vdp_cursorGoto                     IMPORT  -----   function
;_strlen                             IMPORT  -----   function
;len                                   IX-4      1   variable
;start                                 IX-3      1   variable
;ret                                   IX-2      1   variable
;n                                     IX-1      1   variable
;option2                              IX+12      1   parameter
;option1                               IX+9      1   parameter
;message                               IX+6      3   parameter


; Stack Frame Size: 19 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "game_getResponse",654,"_game_getResponse"
;  655	
;  656	void game_splash_screen()
;  657	{
_game_splash_screen:
.DEFINE "_game_splash_screen"

.VALUE _game_splash_screen

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "game_splash_screen",657,"_game_splash_screen"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  658		vdp_cls();
.LINE 658

	CALL	_vdp_cls
;  659	
;  660		vdp_cursorGoto(0,10);
.LINE 660

	LD	BC,10
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_vdp_cursorGoto
	POP	BC
	POP	BC
;  661		vdp_cursorDisable();
.LINE 661

	CALL	_vdp_cursorDisable
;  662		//vdp_fgcolour(255,0,0);
;  663		vdp_fgcolour(BRIGHT_RED);
.LINE 663

	LD	BC,9
	PUSH	BC
	CALL	_vdp_fgcolour
	POP	BC
;  664		puts("             _____       _         _                 \r\n");
.LINE 664

	LD	BC,L__57
	PUSH	BC
	CALL	_puts
	POP	BC
;  665		vdp_fgcolour(BRIGHT_MAGENTA);
.LINE 665

	LD	BC,13
	PUSH	BC
	CALL	_vdp_fgcolour
	POP	BC
;  666		puts("            / ____|     | |       | |                \r\n");
.LINE 666

	LD	BC,L__58
	PUSH	BC
	CALL	_puts
	POP	BC
;  667		vdp_fgcolour(BRIGHT_CYAN);
.LINE 667

	LD	BC,14
	PUSH	BC
	CALL	_vdp_fgcolour
	POP	BC
;  668		puts("           | (___   ___ | | _____ | |__   __ _ _ __  \r\n");
.LINE 668

	LD	BC,L__59
	PUSH	BC
	CALL	_puts
	POP	BC
;  669		vdp_fgcolour(BRIGHT_BLUE);
.LINE 669

	LD	BC,12
	PUSH	BC
	CALL	_vdp_fgcolour
	POP	BC
;  670		puts("            \\___ \\ / _ \\| |/ / _ \\| '_ \\ / _. | '_ \\ \r\n");
.LINE 670

	LD	BC,L__60
	PUSH	BC
	CALL	_puts
	POP	BC
;  671		vdp_fgcolour(BRIGHT_GREEN);
.LINE 671

	LD	BC,10
	PUSH	BC
	CALL	_vdp_fgcolour
	POP	BC
;  672		puts("            ____) | (_) |   < (_) | |_) | (_| | | | |\r\n");
.LINE 672

	LD	BC,L__61
	PUSH	BC
	CALL	_puts
	POP	BC
;  673		vdp_fgcolour(BRIGHT_WHITE);
.LINE 673

	LD	BC,15
	PUSH	BC
	CALL	_vdp_fgcolour
	POP	BC
;  674		puts("           |_____/ \\___/|_|\\_\\___/|_.__/ \\__,_|_| |_|\r\n");
.LINE 674

	LD	BC,L__62
	PUSH	BC
	CALL	_puts
	POP	BC
;  675		puts("\r\n");
.LINE 675

	LD	BC,L__63
	PUSH	BC
	CALL	_puts
	POP	BC
;  676		puts("\r\n");
.LINE 676

	LD	BC,L__64
	PUSH	BC
	CALL	_puts
	POP	BC
;  677		vdp_fgcolour(BRIGHT_GREEN);
.LINE 677

	LD	BC,10
	PUSH	BC
	CALL	_vdp_fgcolour
	POP	BC
;  678		puts("                           For Agon (TM)\r\n");
.LINE 678

	LD	BC,L__65
	PUSH	BC
	CALL	_puts
	POP	BC
;  679		puts("\r\n");
.LINE 679

	LD	BC,L__66
	PUSH	BC
	CALL	_puts
	POP	BC
;  680		vdp_fgcolour(DARK_WHITE);
.LINE 680

	LD	BC,7
	PUSH	BC
	CALL	_vdp_fgcolour
	POP	BC
;  681		puts("                     (c) 2023 Jeroen Venema\r\n");
.LINE 681

	LD	BC,L__67
	PUSH	BC
	CALL	_puts
	POP	BC
;  682	}
.LINE 682

	LD	SP,IX
	POP	IX
	RET	


;**************************** _game_splash_screen ***************************
;Name                         Addr/Register   Size   Type
;_puts                               IMPORT  -----   function
;_vdp_fgcolour                       IMPORT  -----   function
;_vdp_cursorDisable                  IMPORT  -----   function
;_vdp_cursorGoto                     IMPORT  -----   function
;_vdp_cls                            IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "game_splash_screen",682,"_game_splash_screen"
	SEGMENT STRSECT
L__57:
	DB	"             _____       _         _                 "
	DB	13,10,0
L__58:
	DB	"            / ____|     | |       | |                "
	DB	13,10,0
L__59:
	DB	"           | (___   ___ | | _____ | |__   __ _ _ __  "
	DB	13,10,0
L__60:
	DB	"            \\___ \\ / _ \\| |/ / _ \\| '_ \\ / _. | '_ \\ "
	DB	13,10,0
L__61:
	DB	"            ____) | (_) |   < (_) | |_) | (_| | | | |"
	DB	13,10,0
L__62:
	DB	"           |_____/ \\___/|_|\\_\\___/|_.__/ \\__,_|_| |_|"
	DB	13,10,0
L__63:
	DB	13,10,0
L__64:
	DB	13,10,0
L__65:
	DB	"                           For Agon (TM)"
	DB	13,10,0
L__66:
	DB	13,10,0
L__67:
	DB	"                     (c) 2023 Jeroen Venema"
	DB	13,10,0
	SEGMENT CODE
;  683	
;  684	void game_displayHelp(UINT8 xpos, UINT8 ypos)
;  685	{
_game_displayHelp:
.DEFINE "_game_displayHelp"

.VALUE _game_displayHelp

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "game_displayHelp",685,"_game_displayHelp"

.LINE 685

.DEFINE "xpos"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "ypos"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

.DEFINE "gxpos"

.CLASS 65

.VALUE -2

.TYPE 13

.ENDEF

.DEFINE "gypos"

.CLASS 65

.VALUE -4

.TYPE 13

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	DEC	SP
;  686		UINT16 gxpos = xpos * MINIMAP_WIDTH;
.LINE 686

	LD	C,(IX+%6)
	LD	B,%0
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+%FFFFFFFE),L
	LD	(IX+%FFFFFFFF),H
;  687		UINT16 gypos = (ypos * 8) + 72;
.LINE 687

	LD	C,(IX+%9)
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,HL
	LEA	HL,IY+%48
	LD	(IX+%FFFFFFFC),L
	LD	(IX+%FFFFFFFD),H
;  688		vdp_cursorGoto(xpos,ypos);
.LINE 688

	LD	C,(IX+%9)
	PUSH	BC
	LD	C,(IX+%6)
	PUSH	BC
	CALL	_vdp_cursorGoto
	POP	BC
	POP	BC
;  689		vdp_fgcolour(BRIGHT_WHITE);
.LINE 689

	LD	BC,15
	PUSH	BC
	CALL	_vdp_fgcolour
	POP	BC
;  690		puts("Game objective");
.LINE 690

	LD	BC,L__69
	PUSH	BC
	CALL	_puts
	POP	BC
;  691		vdp_cursorGoto(xpos,ypos+2);
.LINE 691

	LD	C,(IX+%9)
	INC	C
	INC	C
	LD	B,%0
	PUSH	BC
	LD	C,(IX+%6)
	PUSH	BC
	CALL	_vdp_cursorGoto
	POP	BC
	POP	BC
;  692		vdp_fgcolour(DARK_WHITE);
.LINE 692

	LD	BC,7
	PUSH	BC
	CALL	_vdp_fgcolour
	POP	BC
;  693		puts("Push all boxes");
.LINE 693

	LD	BC,L__70
	PUSH	BC
	CALL	_puts
	POP	BC
;  694		vdp_cursorGoto(xpos,ypos+3);
.LINE 694

	LD	A,(IX+%9)
	ADD	A,%3
	LD	C,A
	LD	B,%0
	PUSH	BC
	LD	C,(IX+%6)
	PUSH	BC
	CALL	_vdp_cursorGoto
	POP	BC
	POP	BC
;  695		puts("in this warehouse");
.LINE 695

	LD	BC,L__71
	PUSH	BC
	CALL	_puts
	POP	BC
;  696		vdp_cursorGoto(xpos,ypos+4);
.LINE 696

	LD	A,(IX+%9)
	ADD	A,%4
	LD	C,A
	LD	B,%0
	PUSH	BC
	LD	C,(IX+%6)
	PUSH	BC
	CALL	_vdp_cursorGoto
	POP	BC
	POP	BC
;  697		puts("to the target goals.");
.LINE 697

	LD	BC,L__72
	PUSH	BC
	CALL	_puts
	POP	BC
;  698		
;  699		vdp_cursorGoto(xpos,ypos+7);
.LINE 699

	LD	A,(IX+%9)
	ADD	A,%7
	LD	C,A
	LD	B,%0
	PUSH	BC
	LD	C,(IX+%6)
	PUSH	BC
	CALL	_vdp_cursorGoto
	POP	BC
	POP	BC
;  700		vdp_fgcolour(BRIGHT_WHITE);
.LINE 700

	LD	BC,15
	PUSH	BC
	CALL	_vdp_fgcolour
	POP	BC
;  701		puts("Legend");
.LINE 701

	LD	BC,L__73
	PUSH	BC
	CALL	_puts
	POP	BC
;  702		
;  703		vdp_bitmapDraw(TILE_PLAYER_MINI,gxpos,gypos);
.LINE 703

	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFE)
	PUSH	BC
	LD	BC,8
	PUSH	BC
	CALL	_vdp_bitmapDraw
	POP	BC
	POP	BC
	POP	BC
;  704		vdp_bitmapDraw(TILE_BOX_MINI, gxpos, gypos + 16);
.LINE 704

	LD	IY,(IX+%FFFFFFFC)
	LEA	BC,IY+%10
	PUSH	BC
	LD	BC,(IX+%FFFFFFFE)
	PUSH	BC
	LD	BC,10
	PUSH	BC
	CALL	_vdp_bitmapDraw
	POP	BC
	POP	BC
	POP	BC
;  705		vdp_bitmapDraw(TILE_BOXONGOAL_MINI, gxpos, gypos + 32);
.LINE 705

	LD	IY,(IX+%FFFFFFFC)
	LEA	BC,IY+%20
	PUSH	BC
	LD	BC,(IX+%FFFFFFFE)
	PUSH	BC
	LD	BC,11
	PUSH	BC
	CALL	_vdp_bitmapDraw
	POP	BC
	POP	BC
	POP	BC
;  706		vdp_bitmapDraw(TILE_GOAL_MINI, gxpos, gypos + 56);
.LINE 706

	LD	IY,(IX+%FFFFFFFC)
	LEA	BC,IY+%38
	PUSH	BC
	LD	BC,(IX+%FFFFFFFE)
	PUSH	BC
	LD	BC,12
	PUSH	BC
	CALL	_vdp_bitmapDraw
	POP	BC
	POP	BC
	POP	BC
;  707		
;  708		vdp_fgcolour(DARK_WHITE);
.LINE 708

	LD	BC,7
	PUSH	BC
	CALL	_vdp_fgcolour
	POP	BC
;  709		vdp_cursorGoto(xpos+2,ypos+9);
.LINE 709

	LD	A,(IX+%9)
	ADD	A,%9
	LD	C,A
	LD	B,%0
	PUSH	BC
	LD	C,(IX+%6)
	INC	C
	INC	C
	PUSH	BC
	CALL	_vdp_cursorGoto
	POP	BC
	POP	BC
;  710		puts("You, hard at work");
.LINE 710

	LD	BC,L__74
	PUSH	BC
	CALL	_puts
	POP	BC
;  711		vdp_cursorGoto(xpos+2,ypos+11);
.LINE 711

	LD	A,(IX+%9)
	ADD	A,%B
	LD	C,A
	LD	B,%0
	PUSH	BC
	LD	C,(IX+%6)
	INC	C
	INC	C
	PUSH	BC
	CALL	_vdp_cursorGoto
	POP	BC
	POP	BC
;  712		puts("Boxes with stuff");
.LINE 712

	LD	BC,L__75
	PUSH	BC
	CALL	_puts
	POP	BC
;  713		vdp_cursorGoto(xpos+2,ypos+13);
.LINE 713

	LD	A,(IX+%9)
	ADD	A,%D
	LD	C,A
	LD	B,%0
	PUSH	BC
	LD	C,(IX+%6)
	INC	C
	INC	C
	PUSH	BC
	CALL	_vdp_cursorGoto
	POP	BC
	POP	BC
;  714		puts("Boxes in shipping");
.LINE 714

	LD	BC,L__76
	PUSH	BC
	CALL	_puts
	POP	BC
;  715		vdp_cursorGoto(xpos+2,ypos+14);
.LINE 715

	LD	A,(IX+%9)
	ADD	A,%E
	LD	C,A
	LD	B,%0
	PUSH	BC
	LD	C,(IX+%6)
	INC	C
	INC	C
	PUSH	BC
	CALL	_vdp_cursorGoto
	POP	BC
	POP	BC
;  716		puts("position");
.LINE 716

	LD	BC,L__77
	PUSH	BC
	CALL	_puts
	POP	BC
;  717		vdp_cursorGoto(xpos+2,ypos+16);
.LINE 717

	LD	A,(IX+%9)
	ADD	A,%10
	LD	C,A
	LD	B,%0
	PUSH	BC
	LD	C,(IX+%6)
	INC	C
	INC	C
	PUSH	BC
	CALL	_vdp_cursorGoto
	POP	BC
	POP	BC
;  718		puts("Shipping goal");
.LINE 718

	LD	BC,L__78
	PUSH	BC
	CALL	_puts
	POP	BC
;  719		
;  720		vdp_fgcolour(BRIGHT_WHITE);
.LINE 720

	LD	BC,15
	PUSH	BC
	CALL	_vdp_fgcolour
	POP	BC
;  721		vdp_cursorGoto(xpos,ypos+19);
.LINE 721

	LD	A,(IX+%9)
	ADD	A,%13
	LD	C,A
	LD	B,%0
	PUSH	BC
	LD	C,(IX+%6)
	PUSH	BC
	CALL	_vdp_cursorGoto
	POP	BC
	POP	BC
;  722		puts("Game controls");
.LINE 722

	LD	BC,L__79
	PUSH	BC
	CALL	_puts
	POP	BC
;  723		
;  724		vdp_fgcolour(DARK_WHITE);
.LINE 724

	LD	BC,7
	PUSH	BC
	CALL	_vdp_fgcolour
	POP	BC
;  725		vdp_cursorGoto(xpos,ypos+21);
.LINE 725

	LD	A,(IX+%9)
	ADD	A,%15
	LD	C,A
	LD	B,%0
	PUSH	BC
	LD	C,(IX+%6)
	PUSH	BC
	CALL	_vdp_cursorGoto
	POP	BC
	POP	BC
;  726		puts("Cursor");
.LINE 726

	LD	BC,L__80
	PUSH	BC
	CALL	_puts
	POP	BC
;  727		vdp_cursorGoto(xpos,ypos+22);
.LINE 727

	LD	A,(IX+%9)
	ADD	A,%16
	LD	C,A
	LD	B,%0
	PUSH	BC
	LD	C,(IX+%6)
	PUSH	BC
	CALL	_vdp_cursorGoto
	POP	BC
	POP	BC
;  728		puts(" keys  - move player");
.LINE 728

	LD	BC,L__81
	PUSH	BC
	CALL	_puts
	POP	BC
;  729		vdp_cursorGoto(xpos,ypos+23);
.LINE 729

	LD	A,(IX+%9)
	ADD	A,%17
	LD	C,A
	LD	B,%0
	PUSH	BC
	LD	C,(IX+%6)
	PUSH	BC
	CALL	_vdp_cursorGoto
	POP	BC
	POP	BC
;  730		puts("    u  - undo move");
.LINE 730

	LD	BC,L__82
	PUSH	BC
	CALL	_puts
	POP	BC
;  731		vdp_cursorGoto(xpos,ypos+24);
.LINE 731

	LD	A,(IX+%9)
	ADD	A,%18
	LD	C,A
	LD	B,%0
	PUSH	BC
	LD	C,(IX+%6)
	PUSH	BC
	CALL	_vdp_cursorGoto
	POP	BC
	POP	BC
;  732		puts("esc/q  - quit level");
.LINE 732

	LD	BC,L__83
	PUSH	BC
	CALL	_puts
	POP	BC
;  733		vdp_cursorGoto(xpos,ypos+26);
.LINE 733

	LD	A,(IX+%9)
	ADD	A,%1A
	LD	C,A
	LD	B,%0
	PUSH	BC
	LD	C,(IX+%6)
	PUSH	BC
	CALL	_vdp_cursorGoto
	POP	BC
	POP	BC
;  734		puts("ENTER  - start level");
.LINE 734

	LD	BC,L__84
	PUSH	BC
	CALL	_puts
	POP	BC
;  735	
;  736		return;
;  737	}
.LINE 737

	LD	SP,IX
	POP	IX
	RET	


;**************************** _game_displayHelp ***************************
;Name                         Addr/Register   Size   Type
;_vdp_bitmapDraw                     IMPORT  -----   function
;_puts                               IMPORT  -----   function
;_vdp_fgcolour                       IMPORT  -----   function
;_vdp_cursorGoto                     IMPORT  -----   function
;gypos                                 IX-4      2   variable
;gxpos                                 IX-2      2   variable
;ypos                                  IX+9      1   parameter
;xpos                                  IX+6      1   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "game_displayHelp",737,"_game_displayHelp"
	SEGMENT STRSECT
L__69:
	DB	"Game objective"
	DB	0
L__70:
	DB	"Push all boxes"
	DB	0
L__71:
	DB	"in this warehouse"
	DB	0
L__72:
	DB	"to the target goals."
	DB	0
L__73:
	DB	"Legend"
	DB	0
L__74:
	DB	"You, hard at work"
	DB	0
L__75:
	DB	"Boxes with stuff"
	DB	0
L__76:
	DB	"Boxes in shipping"
	DB	0
L__77:
	DB	"position"
	DB	0
L__78:
	DB	"Shipping goal"
	DB	0
L__79:
	DB	"Game controls"
	DB	0
L__80:
	DB	"Cursor"
	DB	0
L__81:
	DB	" keys  - move player"
	DB	0
L__82:
	DB	"    u  - undo move"
	DB	0
L__83:
	DB	"esc/q  - quit level"
	DB	0
L__84:
	DB	"ENTER  - start level"
	DB	0
	SEGMENT CODE
;  738	
;  739	INT16 game_selectLevel(UINT8 levels, UINT16 previouslevel)
;  740	{
_game_selectLevel:
.DEFINE "_game_selectLevel"

.VALUE _game_selectLevel

.CLASS 2

.TYPE 67

.ENDEF

.BEGFUNC "game_selectLevel",740,"_game_selectLevel"

.LINE 740

.DEFINE "levels"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "previouslevel"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

.DEFINE "lvl"

.CLASS 65

.VALUE -2

.TYPE 3

.ENDEF

.DEFINE "selected"

.CLASS 65

.VALUE -3

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
;  741		INT16 lvl;
;  742		BOOL selected = FALSE;
.LINE 742

	LD	(IX+%FFFFFFFD),%0
;  743		lvl = previouslevel;
.LINE 743

	LD	BC,(IX+%9)
	LD	(IX+%FFFFFFFE),C
	LD	(IX+%FFFFFFFF),B
;  744		
;  745		while(!selected) {
.LINE 745

	JR	L_164
L_165:
;  746			game_initLevel(lvl);			// initialize playing field data from memory or disk
.LINE 746

	LD	C,(IX+%FFFFFFFE)
	LD	B,%0
	PUSH	BC
	CALL	_game_initLevel
	POP	BC
;  747			vdp_clearGraphics();
.LINE 747

	CALL	_vdp_clearGraphics
;  748			game_displayMinimap();			// display 'current' level
.LINE 748

	CALL	_game_displayMinimap
;  749	
;  750			vdp_cursorGoto(4,9);
.LINE 750

	LD	BC,9
	PUSH	BC
	LD	BC,4
	PUSH	BC
	CALL	_vdp_cursorGoto
	POP	BC
	POP	BC
;  751			vdp_fgcolour(BRIGHT_WHITE);
.LINE 751

	LD	BC,15
	PUSH	BC
	CALL	_vdp_fgcolour
	POP	BC
;  752			printf("Level %03d / %03d",lvl+1,levels); // user level# starts at 1, internally this is level 0
.LINE 752

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__86
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	A,%3
	LD	(___print_fmt+5),A
	LD	A,%40
	LD	(___print_fmt+1),A
	LD	BC,(IX+%FFFFFFFE)
	CALL	__stoi
	INC	HL
	LD	BC,HL
	CALL	__itol
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,L__87
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	A,%3
	LD	(___print_fmt+5),A
	LD	A,%40
	LD	(___print_fmt+1),A
	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	CALL	__itol
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
;  753	
;  754			vdp_cursorGoto(9,43);
.LINE 754

	LD	BC,43
	PUSH	BC
	LD	BC,9
	PUSH	BC
	CALL	_vdp_cursorGoto
	POP	BC
	POP	BC
;  755			puts("Select level with cursor keys");
.LINE 755

	LD	BC,L__88
	PUSH	BC
	CALL	_puts
	POP	BC
;  756			vdp_cursorGoto(18,45);
.LINE 756

	LD	BC,45
	PUSH	BC
	LD	BC,18
	PUSH	BC
	CALL	_vdp_cursorGoto
	POP	BC
	POP	BC
;  757			vdp_fgcolour(DARK_WHITE);
.LINE 757

	LD	BC,7
	PUSH	BC
	CALL	_vdp_fgcolour
	POP	BC
;  758			puts("ESC to quit");
.LINE 758

	LD	BC,L__89
	PUSH	BC
	CALL	_puts
	POP	BC
;  759	
;  760			vdp_plotMoveTo(750,335);
.LINE 760

	LD	BC,335
	PUSH	BC
	LD	BC,750
	PUSH	BC
	CALL	_vdp_plotMoveTo
	POP	BC
	POP	BC
;  761			vdp_plotColour(DARK_CYAN);
.LINE 761

	LD	BC,6
	PUSH	BC
	CALL	_vdp_plotColour
	POP	BC
;  762			vdp_plotLineTo(750,804);
.LINE 762

	LD	BC,804
	PUSH	BC
	LD	BC,750
	PUSH	BC
	CALL	_vdp_plotLineTo
	POP	BC
	POP	BC
;  763			
;  764	
;  765			game_displayHelp(HELP_XPOS_MAP, HELP_YPOS_MAP);
.LINE 765

	LD	BC,13
	PUSH	BC
	LD	BC,50
	PUSH	BC
	CALL	_game_displayHelp
	POP	BC
	POP	BC
;  766			
;  767			switch(getch())	{
.LINE 767

	CALL	_getch
	LD	B,A
	LD	A,B
	SEXT	HL
	LD	L,B
	CALL	__case8D
	JP	(HL)
L__90:
	DW	6
	DB	8
	DW24	L_149	

	DB	10
	DW24	L_150	

	DB	11
	DW24	L_155	

	DB	13
	DW24	L_161	

	DB	21
	DW24	L_156	

	DB	27
	DW24	L_162	

	DW24	L_164	

;  768				case 0x8:
L_149:
.LINE 768

;  769				case 0x0a:
L_150:
.LINE 769

;  770					if(lvl > 0) lvl --;
.LINE 770

	LD	BC,(IX+%FFFFFFFE)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC.SIS	HL,BC
	CALL	__setflag
	JP	P,L_153
	LD	HL,(IX+%FFFFFFFE)
	DEC	HL
	LD	(IX+%FFFFFFFE),L
	LD	(IX+%FFFFFFFF),H
;  771					else lvl = levels-1;
.LINE 771

	JR	L_164
L_153:
	LD	C,(IX+%6)
	LD	B,%0
	DEC	BC
	LD	HL,BC
	LD	(IX+%FFFFFFFE),L
	LD	(IX+%FFFFFFFF),H
;  772					break;
.LINE 772

	JR	L_164
;  773				case 0x0b:
L_155:
.LINE 773

;  774				case 0x15:
L_156:
.LINE 774

;  775					if(lvl < levels-1) lvl++;
.LINE 775

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	DEC	DE
	LD	BC,(IX+%FFFFFFFE)
	CALL	__stoi
	OR	A,A
	SBC	HL,DE
	CALL	__setflag
	JP	P,L_159
	LD	HL,(IX+%FFFFFFFE)
	INC	HL
	LD	(IX+%FFFFFFFE),L
	LD	(IX+%FFFFFFFF),H
;  776					else lvl = 0;
.LINE 776

	JR	L_164
L_159:
	LD	(IX+%FFFFFFFE),%0
	LD	(IX+%FFFFFFFF),%0
;  777					break;
.LINE 777

	JR	L_164
;  778				case 0xd:
L_161:
.LINE 778

;  779					selected = TRUE;
.LINE 779

	LD	(IX+%FFFFFFFD),%1
;  780					break;
.LINE 780

	JR	L_164
;  781				case 27:
L_162:
.LINE 781

;  782					lvl = -1;
.LINE 782

	LD	(IX+%FFFFFFFE),%FF
	LD	(IX+%FFFFFFFF),%FF
;  783					selected = TRUE;
.LINE 783

	LD	(IX+%FFFFFFFD),%1
;  784					break;
;  785				default:
;  786					break;
;  787			}
;  788		}
L_164:
.LINE 788

	LD	A,(IX+%FFFFFFFD)
	OR	A,A
	JR	Z,L_165
;  789		return lvl;
.LINE 789

	LD	HL,(IX+%FFFFFFFE)
;  790	}
.LINE 790

	LD	SP,IX
	POP	IX
	RET	


;**************************** _game_selectLevel ***************************
;Name                         Addr/Register   Size   Type
;_getch                              IMPORT  -----   function
;_game_displayHelp                   IMPORT  -----   function
;_vdp_plotLineTo                     IMPORT  -----   function
;_vdp_plotColour                     IMPORT  -----   function
;_vdp_plotMoveTo                     IMPORT  -----   function
;_puts                               IMPORT  -----   function
;__u_itoa                            IMPORT  -----   function
;___print_fmt                        IMPORT     19   variable
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_vdp_fgcolour                       IMPORT  -----   function
;_vdp_cursorGoto                     IMPORT  -----   function
;_game_displayMinimap                IMPORT  -----   function
;_vdp_clearGraphics                  IMPORT  -----   function
;_game_initLevel                     IMPORT  -----   function
;selected                              IX-3      1   variable
;lvl                                   IX-2      2   variable
;previouslevel                         IX+9      2   parameter
;levels                                IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "game_selectLevel",790,"_game_selectLevel"
	SEGMENT STRSECT
L__86:
	DB	"Level "
	DB	0
L__87:
	DB	" / "
	DB	0
L__88:
	DB	"Select level with cursor keys"
	DB	0
L__89:
	DB	"ESC to quit"
	DB	0
	SEGMENT CODE
;  791	
;  792	void game_displayLevel(void)
;  793	{
_game_displayLevel:
.DEFINE "_game_displayLevel"

.VALUE _game_displayLevel

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "game_displayLevel",793,"_game_displayLevel"

.LINE 793

.DEFINE "x"

.CLASS 65

.VALUE -2

.TYPE 13

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE -4

.TYPE 13

.ENDEF

.DEFINE "width"

.CLASS 65

.VALUE -6

.TYPE 13

.ENDEF

.DEFINE "height"

.CLASS 65

.VALUE -8

.TYPE 13

.ENDEF

.DEFINE "c"

.CLASS 65

.VALUE -9

.TYPE 2

.ENDEF

.DEFINE "xstart"

.CLASS 65

.VALUE -11

.TYPE 13

.ENDEF

.DEFINE "ystart"

.CLASS 65

.VALUE -13

.TYPE 13

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFF0
	LD	SP,HL
;  794		UINT16 width, height;
;  795		UINT16 ystart,xstart,x,y;
;  796		char c;
;  797		
;  798		// calculate on-screen base coordinates
;  799		xstart = ((MAXWIDTH - currentlevel.width) / 2) * BITMAP_WIDTH;
.LINE 799

	LD	A,(_currentlevel+2)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,40
	OR	A,A
	SBC	HL,BC
	LD	BC,2
	CALL	__idivs
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+%FFFFFFF5),L
	LD	(IX+%FFFFFFF6),H
;  800		ystart = ((MAXHEIGHT - currentlevel.height) / 2) *BITMAP_HEIGHT;
.LINE 800

	LD	A,(_currentlevel+3)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,30
	OR	A,A
	SBC	HL,BC
	LD	BC,2
	CALL	__idivs
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+%FFFFFFF3),L
	LD	(IX+%FFFFFFF4),H
;  801		
;  802		y = ystart;
.LINE 802

	LD	BC,(IX+%FFFFFFF3)
	LD	(IX+%FFFFFFFC),C
	LD	(IX+%FFFFFFFD),B
;  803		for(height = 0; height < currentlevel.height; height++)
.LINE 803

	LD	(IX+%FFFFFFF8),%0
	LD	(IX+%FFFFFFF9),%0
	JR	L_187
L_185:
;  804		{
;  805			x = xstart;
.LINE 805

	LD	BC,(IX+%FFFFFFF5)
	LD	(IX+%FFFFFFFE),C
	LD	(IX+%FFFFFFFF),B
;  806			for(width = 0; width < currentlevel.width; width++)
.LINE 806

	LD	(IX+%FFFFFFFA),%0
	LD	(IX+%FFFFFFFB),%0
	JR	L_183
L_181:
;  807			{
;  808				c = currentlevel.data[height][width];
.LINE 808

	LD	BC,(IX+%FFFFFFF8)
	CALL	__stoiu
	LD	A,%28
	CALL	__imul_b
	LD	(IX+%FFFFFFF0),HL
	LD	BC,_currentlevel+7
	LD	HL,(IX+%FFFFFFF0)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%FFFFFFFA)
	CALL	__stoiu
	ADD	HL,DE
	LD	A,(HL)
	LD	(IX+%FFFFFFF7),A
;  809				switch(c)
.LINE 809

	SEXT	HL
	LD	L,(IX+%FFFFFFF7)
	CALL	__case8D
	JP	(HL)
L__95:
	DW	7
	DB	32
	DW24	L_178	

	DB	35
	DW24	L_170	

	DB	36
	DW24	L_173	

	DB	42
	DW24	L_174	

	DB	43
	DW24	L_172	

	DB	46
	DW24	L_177	

	DB	64
	DW24	L_171	

	DW24	L_180	

;  810				{
;  811					case CHAR_WALL:
L_170:
.LINE 811

;  812						vdp_bitmapDraw(TILE_WALL, x, y);
.LINE 812

	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFE)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_vdp_bitmapDraw
	POP	BC
	POP	BC
	POP	BC
;  813						break;
.LINE 813

	JR	L_180
;  814					case CHAR_PLAYER:
L_171:
.LINE 814

;  815					case CHAR_PLAYERONGOAL:
L_172:
.LINE 815

;  816						vdp_spriteSelect(0);
.LINE 816

	LD	BC,0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  817						vdp_spriteMoveToSelected(x,y);
.LINE 817

	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFE)
	PUSH	BC
	CALL	_vdp_spriteMoveToSelected
	POP	BC
	POP	BC
;  818						vdp_spriteShowSelected();
.LINE 818

	CALL	_vdp_spriteShowSelected
;  819						break;
.LINE 819

	JR	L_180
;  820					case CHAR_BOX:
L_173:
.LINE 820

;  821					case CHAR_BOXONGOAL:
L_174:
.LINE 821

;  822						vdp_spriteSelect(sprites[height][width]);
.LINE 822

	LD	BC,_sprites
	LD	HL,(IX+%FFFFFFF0)
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%FFFFFFFA)
	CALL	__stoiu
	ADD	HL,DE
	LD	C,(HL)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  823						vdp_spriteMoveToSelected(x,y);
.LINE 823

	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFE)
	PUSH	BC
	CALL	_vdp_spriteMoveToSelected
	POP	BC
	POP	BC
;  824						vdp_spriteShowSelected();
.LINE 824

	CALL	_vdp_spriteShowSelected
;  825						if(c == CHAR_BOXONGOAL)
.LINE 825

	LD	A,(IX+%FFFFFFF7)
	CP	A,%2A
	JR	NZ,L_180
;  826						{
;  827							vdp_bitmapDraw(TILE_GOAL, x, y); // don't forget to draw the goal beneath
.LINE 827

	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFE)
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_vdp_bitmapDraw
	POP	BC
	POP	BC
	POP	BC
;  828						}
.LINE 828

;  829						break;
.LINE 829

	JR	L_180
;  830					case CHAR_GOAL:
L_177:
.LINE 830

;  831						vdp_bitmapDraw(TILE_GOAL, x, y);					
.LINE 831

	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFE)
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_vdp_bitmapDraw
	POP	BC
	POP	BC
	POP	BC
;  832						break;
.LINE 832

	JR	L_180
;  833					case CHAR_FLOOR:
L_178:
.LINE 833

;  834						vdp_bitmapDraw(TILE_FLOOR, x, y);			
.LINE 834

	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFE)
	PUSH	BC
	LD	BC,6
	PUSH	BC
	CALL	_vdp_bitmapDraw
	POP	BC
	POP	BC
	POP	BC
;  835						break;
;  836					default:
;  837						break;
;  838				}
L_180:
.LINE 838

;  839				x += BITMAP_WIDTH;
.LINE 839

	LD	IY,(IX+%FFFFFFFE)
	LEA	HL,IY+%10
	LD	(IX+%FFFFFFFE),L
	LD	(IX+%FFFFFFFF),H
	LD	HL,(IX+%FFFFFFFA)
	INC	HL
	LD	(IX+%FFFFFFFA),L
	LD	(IX+%FFFFFFFB),H
;  840			}
L_183:
.LINE 840

	LD	A,(_currentlevel+2)
	LD	C,A
	LD	B,%0
	LD	HL,(IX+%FFFFFFFA)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_181
;  841			y += BITMAP_HEIGHT;
.LINE 841

	LD	IY,(IX+%FFFFFFFC)
	LEA	HL,IY+%10
	LD	(IX+%FFFFFFFC),L
	LD	(IX+%FFFFFFFD),H
	LD	HL,(IX+%FFFFFFF8)
	INC	HL
	LD	(IX+%FFFFFFF8),L
	LD	(IX+%FFFFFFF9),H
;  842		}
L_187:
.LINE 842

	LD	A,(_currentlevel+3)
	LD	C,A
	LD	B,%0
	LD	HL,(IX+%FFFFFFF8)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_185
;  843	
;  844		vdp_spriteRefresh();
.LINE 844

	CALL	_vdp_spriteRefresh
;  845	}
.LINE 845

	LD	SP,IX
	POP	IX
	RET	


;**************************** _game_displayLevel ***************************
;Name                         Addr/Register   Size   Type
;_vdp_spriteRefresh                  IMPORT  -----   function
;_sprites                            STATIC   1200   variable
;_vdp_spriteShowSelected             IMPORT  -----   function
;_vdp_spriteMoveToSelected           IMPORT  -----   function
;_vdp_spriteSelect                   IMPORT  -----   function
;_vdp_bitmapDraw                     IMPORT  -----   function
;_currentlevel                       STATIC   1207   variable
;G_31                                 IX-16      3   variable
;ystart                               IX-13      2   variable
;xstart                               IX-11      2   variable
;c                                     IX-9      1   variable
;height                                IX-8      2   variable
;width                                 IX-6      2   variable
;y                                     IX-4      2   variable
;x                                     IX-2      2   variable


; Stack Frame Size: 22 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "game_displayLevel",845,"_game_displayLevel"
;  846	
;  847	void game_displayMinimap(void)
;  848	{
_game_displayMinimap:
.DEFINE "_game_displayMinimap"

.VALUE _game_displayMinimap

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "game_displayMinimap",848,"_game_displayMinimap"

.LINE 848

.DEFINE "x"

.CLASS 65

.VALUE -2

.TYPE 13

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE -4

.TYPE 13

.ENDEF

.DEFINE "width"

.CLASS 65

.VALUE -6

.TYPE 13

.ENDEF

.DEFINE "height"

.CLASS 65

.VALUE -8

.TYPE 13

.ENDEF

.DEFINE "c"

.CLASS 65

.VALUE -9

.TYPE 2

.ENDEF

.DEFINE "xstart"

.CLASS 65

.VALUE -11

.TYPE 13

.ENDEF

.DEFINE "ystart"

.CLASS 65

.VALUE -13

.TYPE 13

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFF3
	LD	SP,HL
;  849		UINT16 width, height;
;  850		UINT16 ystart,xstart,x,y;
;  851		char c;
;  852		
;  853		// calculate on-screen base coordinates
;  854		xstart = (((MAXWIDTH - currentlevel.width) / 2) * MINIMAP_WIDTH) + MINIMAP_XSTART;
.LINE 854

	LD	A,(_currentlevel+2)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,40
	OR	A,A
	SBC	HL,BC
	LD	BC,2
	CALL	__idivs
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,HL
	LEA	HL,IY+%20
	LD	(IX+%FFFFFFF5),L
	LD	(IX+%FFFFFFF6),H
;  855		ystart = (((MAXHEIGHT - currentlevel.height) / 2) * MINIMAP_HEIGHT) + MINIMAP_YSTART;
.LINE 855

	LD	A,(_currentlevel+3)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,30
	OR	A,A
	SBC	HL,BC
	LD	BC,2
	CALL	__idivs
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,HL
	LEA	HL,IY+%5C
	LD	(IX+%FFFFFFF3),L
	LD	(IX+%FFFFFFF4),H
;  856		
;  857		y = ystart;
.LINE 857

	LD	BC,(IX+%FFFFFFF3)
	LD	(IX+%FFFFFFFC),C
	LD	(IX+%FFFFFFFD),B
;  858		for(height = 0; height < currentlevel.height; height++)
.LINE 858

	LD	(IX+%FFFFFFF8),%0
	LD	(IX+%FFFFFFF9),%0
	JR	L_207
L_205:
;  859		{
;  860			x = xstart;
.LINE 860

	LD	BC,(IX+%FFFFFFF5)
	LD	(IX+%FFFFFFFE),C
	LD	(IX+%FFFFFFFF),B
;  861			for(width = 0; width < currentlevel.width; width++)
.LINE 861

	LD	(IX+%FFFFFFFA),%0
	LD	(IX+%FFFFFFFB),%0
	JR	L_203
L_201:
;  862			{
;  863				c = currentlevel.data[height][width];
.LINE 863

	LD	BC,(IX+%FFFFFFF8)
	CALL	__stoiu
	LD	A,%28
	CALL	__imul_b
	LD	BC,_currentlevel+7
	ADD	HL,BC
	LD	DE,HL
	LD	BC,(IX+%FFFFFFFA)
	CALL	__stoiu
	ADD	HL,DE
	LD	A,(HL)
	LD	(IX+%FFFFFFF7),A
;  864				switch(c)
.LINE 864

	SEXT	HL
	LD	L,(IX+%FFFFFFF7)
	CALL	__case8D
	JP	(HL)
L__100:
	DW	7
	DB	32
	DW24	L_198	

	DB	35
	DW24	L_192	

	DB	36
	DW24	L_195	

	DB	42
	DW24	L_196	

	DB	43
	DW24	L_194	

	DB	46
	DW24	L_197	

	DB	64
	DW24	L_193	

	DW24	L_200	

;  865				{
;  866					case CHAR_WALL:
L_192:
.LINE 866

;  867						vdp_bitmapDraw(TILE_WALL_MINI, x, y);
.LINE 867

	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFE)
	PUSH	BC
	LD	BC,7
	PUSH	BC
	CALL	_vdp_bitmapDraw
	POP	BC
	POP	BC
	POP	BC
;  868						break;
.LINE 868

	JR	L_200
;  869					case CHAR_PLAYER:
L_193:
.LINE 869

;  870						vdp_bitmapDraw(TILE_PLAYER_MINI, x, y);
.LINE 870

	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFE)
	PUSH	BC
	LD	BC,8
	PUSH	BC
	CALL	_vdp_bitmapDraw
	POP	BC
	POP	BC
	POP	BC
;  871						break;
.LINE 871

	JR	L_200
;  872					case CHAR_PLAYERONGOAL:
L_194:
.LINE 872

;  873						vdp_bitmapDraw(TILE_PLAYERONGOAL_MINI, x, y);
.LINE 873

	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFE)
	PUSH	BC
	LD	BC,9
	PUSH	BC
	CALL	_vdp_bitmapDraw
	POP	BC
	POP	BC
	POP	BC
;  874						break;
.LINE 874

	JR	L_200
;  875					case CHAR_BOX:
L_195:
.LINE 875

;  876						vdp_bitmapDraw(TILE_BOX_MINI, x, y);
.LINE 876

	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFE)
	PUSH	BC
	LD	BC,10
	PUSH	BC
	CALL	_vdp_bitmapDraw
	POP	BC
	POP	BC
	POP	BC
;  877						break;
.LINE 877

	JR	L_200
;  878					case CHAR_BOXONGOAL:
L_196:
.LINE 878

;  879						vdp_bitmapDraw(TILE_BOXONGOAL_MINI, x, y);
.LINE 879

	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFE)
	PUSH	BC
	LD	BC,11
	PUSH	BC
	CALL	_vdp_bitmapDraw
	POP	BC
	POP	BC
	POP	BC
;  880						break;
.LINE 880

	JR	L_200
;  881						break;
;  882					case CHAR_GOAL:
L_197:
.LINE 882

;  883						vdp_bitmapDraw(TILE_GOAL_MINI, x, y);					
.LINE 883

	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFE)
	PUSH	BC
	LD	BC,12
	PUSH	BC
	CALL	_vdp_bitmapDraw
	POP	BC
	POP	BC
	POP	BC
;  884						break;
.LINE 884

	JR	L_200
;  885					case CHAR_FLOOR:
L_198:
.LINE 885

;  886						vdp_bitmapDraw(TILE_FLOOR_MINI, x, y);			
.LINE 886

	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFE)
	PUSH	BC
	LD	BC,13
	PUSH	BC
	CALL	_vdp_bitmapDraw
	POP	BC
	POP	BC
	POP	BC
;  887						break;
;  888					default:
;  889						break;
;  890				}
L_200:
.LINE 890

;  891				x += MINIMAP_WIDTH;
.LINE 891

	LD	IY,(IX+%FFFFFFFE)
	LEA	HL,IY+%8
	LD	(IX+%FFFFFFFE),L
	LD	(IX+%FFFFFFFF),H
	LD	HL,(IX+%FFFFFFFA)
	INC	HL
	LD	(IX+%FFFFFFFA),L
	LD	(IX+%FFFFFFFB),H
;  892			}
L_203:
.LINE 892

	LD	A,(_currentlevel+2)
	LD	C,A
	LD	B,%0
	LD	HL,(IX+%FFFFFFFA)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_201
;  893			y += MINIMAP_HEIGHT;
.LINE 893

	LD	IY,(IX+%FFFFFFFC)
	LEA	HL,IY+%8
	LD	(IX+%FFFFFFFC),L
	LD	(IX+%FFFFFFFD),H
	LD	HL,(IX+%FFFFFFF8)
	INC	HL
	LD	(IX+%FFFFFFF8),L
	LD	(IX+%FFFFFFF9),H
;  894		}
L_207:
.LINE 894

	LD	A,(_currentlevel+3)
	LD	C,A
	LD	B,%0
	LD	HL,(IX+%FFFFFFF8)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_205
;  895	}
.LINE 895

	LD	SP,IX
	POP	IX
	RET	


;**************************** _game_displayMinimap ***************************
;Name                         Addr/Register   Size   Type
;_vdp_bitmapDraw                     IMPORT  -----   function
;_currentlevel                       STATIC   1207   variable
;ystart                               IX-13      2   variable
;xstart                               IX-11      2   variable
;c                                     IX-9      1   variable
;height                                IX-8      2   variable
;width                                 IX-6      2   variable
;y                                     IX-4      2   variable
;x                                     IX-2      2   variable


; Stack Frame Size: 19 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "game_displayMinimap",895,"_game_displayMinimap"
;  896	
;  897	
;  898	UINT8 game_readLevels(char *filename)
;  899	{
_game_readLevels:
.DEFINE "_game_readLevels"

.VALUE _game_readLevels

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "game_readLevels",899,"_game_readLevels"

.LINE 899

.DEFINE "filename"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "numlevels"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "file"

.CLASS 65

.VALUE -2

.TYPE 12

.ENDEF

.DEFINE "size"

.CLASS 65

.VALUE -4

.TYPE 13

.ENDEF

.DEFINE "ptr"

.CLASS 65

.VALUE -7

.TYPE 34

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
	DEC	SP
;  900		// Reads all the levels in the standard file into memory and returns the number of levels
;  901		UINT8 numlevels = 0;
.LINE 901

	LD	(IX+%FFFFFFFF),%0
;  902		UINT16 size;
;  903		UINT8 file;
;  904		char* ptr = (char*)LEVELDATA;
.LINE 904

	LD	BC,393216
	LD	(IX+%FFFFFFF9),BC
;  905	
;  906		vdp_fgcolour(BRIGHT_WHITE);
.LINE 906

	LD	BC,15
	PUSH	BC
	CALL	_vdp_fgcolour
	POP	BC
;  907	
;  908		file = mos_fopen(filename, fa_read);
.LINE 908

	LD	BC,1
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_mos_fopen
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFE),A
;  909		if(file)
.LINE 909

	OR	A,A
	JR	Z,L_219
;  910		{
;  911			numlevels = 0;
.LINE 911

	LD	(IX+%FFFFFFFF),%0
;  912			
;  913			while(!mos_feof(file))
.LINE 913

	JR	L_215
L_216:
;  914			{
;  915				size = sizeof(struct sokobanlevel);
.LINE 915

	LD	(IX+%FFFFFFFC),%B7
	LD	(IX+%FFFFFFFD),%4
;  916				while(size)
.LINE 916

	JR	L_211
L_212:
;  917				{
;  918					*ptr = mos_fgetc(file);
.LINE 918

	LD	C,(IX+%FFFFFFFE)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fgetc
	POP	BC
	LD	HL,(IX+%FFFFFFF9)
	LD	(HL),A
;  919					ptr++;
.LINE 919

	LD	BC,(IX+%FFFFFFF9)
	INC	BC
	LD	(IX+%FFFFFFF9),BC
;  920					size--;
.LINE 920

	LD	IY,(IX+%FFFFFFFC)
	LEA	HL,IY+%FFFFFFFF
	LD	(IX+%FFFFFFFC),L
	LD	(IX+%FFFFFFFD),H
;  921				}
L_211:
.LINE 921

	LD	HL,(IX+%FFFFFFFC)
	CALL	__scmpzero
	JR	NZ,L_212
;  922				numlevels++;
.LINE 922

	INC	(IX+%FFFFFFFF)
;  923				vdp_cursorGoto(20,38);
.LINE 923

	LD	BC,38
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_vdp_cursorGoto
	POP	BC
	POP	BC
;  924				printf("Loading levels (%03d)....",numlevels);
.LINE 924

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__106
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	A,%3
	LD	(___print_fmt+5),A
	LD	A,%40
	LD	(___print_fmt+1),A
	LD	A,(IX+%FFFFFFFF)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	CALL	__itol
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,L__107
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  925	
;  926			}		
L_215:
.LINE 926

	LD	C,(IX+%FFFFFFFE)
	LD	B,%0
	PUSH	BC
	CALL	_mos_feof
	POP	BC
	OR	A,A
	JR	Z,L_216
;  927			mos_fclose(file);
.LINE 927

	LD	C,(IX+%FFFFFFFE)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  928		}
L_219:
.LINE 928

;  929		return numlevels;
.LINE 929

	LD	A,(IX+%FFFFFFFF)
;  930	}	
.LINE 930

	LD	SP,IX
	POP	IX
	RET	


;**************************** _game_readLevels ***************************
;Name                         Addr/Register   Size   Type
;_mos_fclose                         IMPORT  -----   function
;_mos_feof                           IMPORT  -----   function
;__u_itoa                            IMPORT  -----   function
;___print_fmt                        IMPORT     19   variable
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_vdp_cursorGoto                     IMPORT  -----   function
;_mos_fgetc                          IMPORT  -----   function
;_mos_fopen                          IMPORT  -----   function
;_vdp_fgcolour                       IMPORT  -----   function
;ptr                                   IX-7      3   variable
;size                                  IX-4      2   variable
;file                                  IX-2      1   variable
;numlevels                             IX-1      1   variable
;filename                              IX+6      3   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "game_readLevels",930,"_game_readLevels"
	SEGMENT STRSECT
L__106:
	DB	"Loading levels ("
	DB	0
L__107:
	DB	")...."
	DB	0
	SEGMENT CODE
;  931	
;  932	
;  933	void game_initLevel(UINT8 levelid)
;  934	{
_game_initLevel:
.DEFINE "_game_initLevel"

.VALUE _game_initLevel

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "game_initLevel",934,"_game_initLevel"

.LINE 934

.DEFINE "levelid"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  935		memset(&currentlevel, 0, sizeof(struct sokobanlevel));
.LINE 935

	LD	BC,1207
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,_currentlevel
	PUSH	BC
	CALL	_memset
	POP	BC
	POP	BC
	POP	BC
;  936		memcpy(&currentlevel, (void*)(LEVELDATA+(sizeof(struct sokobanlevel))*levelid), sizeof(struct sokobanlevel));
.LINE 936

	LD	BC,1207
	PUSH	BC
	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,1207
	CALL	__imulu
	LD	BC,393216
	ADD	HL,BC
	PUSH	HL
	LD	BC,_currentlevel
	PUSH	BC
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  937		// initialize undo buffer
;  938		undo_head = 0;
.LINE 938

	XOR	A,A
	LD	(_undo_head),A
;  939		num_undomoves = 0;
.LINE 939

	XOR	A,A
	LD	(_num_undomoves),A
;  940	}
.LINE 940

	LD	SP,IX
	POP	IX
	RET	


;**************************** _game_initLevel ***************************
;Name                         Addr/Register   Size   Type
;_num_undomoves                      STATIC      1   variable
;_undo_head                          STATIC      1   variable
;_memcpy                             IMPORT  -----   function
;_currentlevel                       STATIC   1207   variable
;_memset                             IMPORT  -----   function
;levelid                               IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "game_initLevel",940,"_game_initLevel"
;  941	
;  942	void game_initSprites(void)
;  943	{
_game_initSprites:
.DEFINE "_game_initSprites"

.VALUE _game_initSprites

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "game_initSprites",943,"_game_initSprites"

.LINE 943

.DEFINE "x"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "boxsprite"

.CLASS 65

.VALUE -2

.TYPE 12

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE -3

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFF4
	LD	SP,HL
;  944		UINT8 x,y;
;  945		UINT8 boxsprite = 1;
.LINE 945

	LD	(IX+%FFFFFFFE),%1
;  946		
;  947		// Now build up the current level
;  948		// Player sprite
;  949		vdp_spriteSelect(0);
.LINE 949

	LD	BC,0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  950		vdp_spriteClearFramesSelected();
.LINE 950

	CALL	_vdp_spriteClearFramesSelected
;  951		vdp_spriteAddFrameSelected(TILE_PLAYER);
.LINE 951

	LD	BC,1
	PUSH	BC
	CALL	_vdp_spriteAddFrameSelected
	POP	BC
;  952		vdp_spriteHideSelected();
.LINE 952

	CALL	_vdp_spriteHideSelected
;  953	
;  954		// set sprite positions
;  955		for(y = 0; y < currentlevel.height; y++)
.LINE 955

	LD	(IX+%FFFFFFFD),%0
	JR	L_236
L_234:
;  956		{
;  957			for(x = 0; x < currentlevel.width; x++)
.LINE 957

	LD	(IX+%FFFFFFFF),%0
	JR	L_233
L_231:
;  958			{
;  959				switch(currentlevel.data[y][x])
.LINE 959

	LD	A,(IX+%FFFFFFFD)
	UEXT	HL
	LD	L,A
	LD	A,%28
	CALL	__imul_b
	LD	(IX+%FFFFFFFA),HL
	LD	BC,_currentlevel+7
	ADD	HL,BC
	LD	(IX+%FFFFFFF4),HL
	LD	A,(IX+%FFFFFFFF)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+%FFFFFFF4)
	ADD	HL,BC
	LD	(IX+%FFFFFFF7),HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	CALL	__case8D
	JP	(HL)
L__111:
	DW	2
	DB	36
	DW24	L_224	

	DB	42
	DW24	L_225	

	DW24	L_230	

;  960				{
;  961					case CHAR_BOX:
L_224:
.LINE 961

;  962					case CHAR_BOXONGOAL:
L_225:
.LINE 962

;  963						vdp_spriteSelect(boxsprite);
.LINE 963

	LD	C,(IX+%FFFFFFFE)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  964						vdp_spriteClearFramesSelected();
.LINE 964

	CALL	_vdp_spriteClearFramesSelected
;  965						vdp_spriteAddFrameSelected(TILE_BOX);
.LINE 965

	LD	BC,3
	PUSH	BC
	CALL	_vdp_spriteAddFrameSelected
	POP	BC
;  966						vdp_spriteAddFrameSelected(TILE_BOXONGOAL);
.LINE 966

	LD	BC,4
	PUSH	BC
	CALL	_vdp_spriteAddFrameSelected
	POP	BC
;  967						if(currentlevel.data[y][x] == CHAR_BOXONGOAL) vdp_spriteSetFrameSelected(1);
.LINE 967

	LD	HL,(IX+%FFFFFFF7)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,42
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_227
	LD	BC,1
	PUSH	BC
	CALL	_vdp_spriteSetFrameSelected
	POP	BC
;  968						else vdp_spriteSetFrameSelected(0);
.LINE 968

	JR	L_228
L_227:
	LD	BC,0
	PUSH	BC
	CALL	_vdp_spriteSetFrameSelected
	POP	BC
L_228:
;  969						vdp_spriteHideSelected();
.LINE 969

	CALL	_vdp_spriteHideSelected
;  970						sprites[y][x] = boxsprite;
.LINE 970

	LD	BC,_sprites
	LD	HL,(IX+%FFFFFFFA)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+%FFFFFFFF)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(IX+%FFFFFFFE)
	LD	(HL),A
;  971						boxsprite++;
.LINE 971

	INC	(IX+%FFFFFFFE)
;  972						break;
.LINE 972

	JR	L_232
;  973					default:
L_230:
.LINE 973

;  974						sprites[y][x] = NOSPRITE;
.LINE 974

	LD	BC,_sprites
	LD	HL,(IX+%FFFFFFFA)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+%FFFFFFFF)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(HL),%FF
;  975						break;
;  976				}	
;  977			}
L_232:
.LINE 977

	INC	(IX+%FFFFFFFF)
L_233:
	LD	A,(IX+%FFFFFFFF)
	LD	HL,_currentlevel+2
	CP	A,(HL)
	JR	C,L_231
	INC	(IX+%FFFFFFFD)
;  978		}
L_236:
.LINE 978

	LD	A,(IX+%FFFFFFFD)
	LD	HL,_currentlevel+3
	CP	A,(HL)
	JR	C,L_234
;  979	
;  980		// activate all sprites. boxsprite is allready set to one extra, we use that extra to account for the player sprite
;  981		spritenumber = boxsprite;
.LINE 981

	LD	A,(IX+%FFFFFFFE)
	LD	(_spritenumber),A
;  982		vdp_spriteActivateTotal(spritenumber);
.LINE 982

	LD	C,A
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteActivateTotal
	POP	BC
;  983	}
.LINE 983

	LD	SP,IX
	POP	IX
	RET	


;**************************** _game_initSprites ***************************
;Name                         Addr/Register   Size   Type
;_vdp_spriteActivateTotal            IMPORT  -----   function
;_spritenumber                       STATIC      1   variable
;_sprites                            STATIC   1200   variable
;_vdp_spriteSetFrameSelected         IMPORT  -----   function
;_currentlevel                       STATIC   1207   variable
;_vdp_spriteHideSelected             IMPORT  -----   function
;_vdp_spriteAddFrameSelected         IMPORT  -----   function
;_vdp_spriteClearFramesSelected      IMPORT  -----   function
;_vdp_spriteSelect                   IMPORT  -----   function
;G_32                                 IX-12      3   variable
;G_33                                  IX-9      3   variable
;G_34                                  IX-6      3   variable
;y                                     IX-3      1   variable
;boxsprite                             IX-2      1   variable
;x                                     IX-1      1   variable


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "game_initSprites",983,"_game_initSprites"
	XREF _strlen:ROM
	XREF _memset:ROM
	XREF _memcpy:ROM
	XREF _puts:ROM
	XREF __u_itoa:ROM
	XREF ___print_sendstring:ROM
	XREF ___print_xputch:ROM
	XREF ___print_uputch:ROM
	XREF ___print_fmt:ROM
	XREF _vdp_spriteRefresh:ROM
	XREF _vdp_spriteActivateTotal:ROM
	XREF _vdp_spriteMoveBySelected:ROM
	XREF _vdp_spriteMoveToSelected:ROM
	XREF _vdp_spriteHide:ROM
	XREF _vdp_spriteHideSelected:ROM
	XREF _vdp_spriteShowSelected:ROM
	XREF _vdp_spriteSetFrame:ROM
	XREF _vdp_spriteSetFrameSelected:ROM
	XREF _vdp_spriteAddFrameSelected:ROM
	XREF _vdp_spriteClearFramesSelected:ROM
	XREF _vdp_spriteSelect:ROM
	XREF _vdp_bitmapCreateSolidColor:ROM
	XREF _vdp_bitmapDraw:ROM
	XREF _vdp_bitmapSendData:ROM
	XREF _vdp_plotLineTo:ROM
	XREF _vdp_plotMoveTo:ROM
	XREF _vdp_plotColour:ROM
	XREF _vdp_clearGraphics:ROM
	XREF _vdp_fgcolour:ROM
	XREF _vdp_cursorDisable:ROM
	XREF _vdp_cursorGoto:ROM
	XREF _vdp_cls:ROM
	XREF _mos_feof:ROM
	XREF _mos_fgetc:ROM
	XREF _mos_fclose:ROM
	XREF _mos_fopen:ROM
	XREF _getch:ROM
	XREF _putch:ROM
	XREF __idivs:ROM
	XREF __imulu:ROM
	XREF __stoi:ROM
	XREF __stoiu:ROM
	XREF __itol:ROM
	XREF __setflag:ROM
	XREF __scmpzero:ROM
	XREF __case8D:ROM
	XREF __imul_b:ROM
	XDEF _game_initSprites
	XDEF _game_initLevel
	XDEF _game_readLevels
	XDEF _game_displayMinimap
	XDEF _game_displayLevel
	XDEF _game_selectLevel
	XDEF _game_displayHelp
	XDEF _game_splash_screen
	XDEF _game_getResponse
	XDEF _game_handleKey
	XDEF _game_handleUndoMove
	XDEF _undomove_updatelevel
	XDEF _move_updatelevel
	XDEF _undomove_sprites
	XDEF _move_sprites
	XDEF _canmove
	XDEF _game_resetSprites
	XDEF _game_sendSpriteData
	XDEF _debug_print_playfieldText
	XDEF _playermini_data
	XDEF _boxongoalmini_data
	XDEF _goalmini_data
	XDEF _wallmini_data
	XDEF _boxmini_data
	XDEF _boxongoal_data
	XDEF _box_data
	XDEF _goal_data
	XDEF _player_data
	XDEF _wall_data
	XDEF _spritenumber
	XDEF _currentlevel
	XDEF _sprites
	XDEF _bitmapbuffer
	XDEF _num_undomoves
	XDEF _undo_head
	XDEF _undomove
	END
