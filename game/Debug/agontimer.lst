Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED15-Apr-23     15:21:42     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\agontimer.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "NONAME0",8
                           A     9    .DEFINE "baudRate"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 4
                           A    13    .ENDEF
                           A    14    .DEFINE "dataBits"
                           A    15    .VALUE 3
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "stopBits"
                           A    20    .VALUE 4
                           A    21    .CLASS 8
                           A    22    .TYPE 12
                           A    23    .ENDEF
                           A    24    .DEFINE "parity"
                           A    25    .VALUE 5
                           A    26    .CLASS 8
                           A    27    .TYPE 12
                           A    28    .ENDEF
                           A    29    .DEFINE "flowcontrol"
                           A    30    .VALUE 6
                           A    31    .CLASS 8
                           A    32    .TYPE 12
                           A    33    .ENDEF
                           A    34    .DEFINE "eir"
                           A    35    .VALUE 7
                           A    36    .CLASS 8
                           A    37    .TYPE 12
                           A    38    .ENDEF
                           A    39    .ENDREC "NONAME0"
                           A    40    	SEGMENT BSS
04633C                     A    41    __timer0_prevhandler:
04633C                     A    42    	DS	3
                           A    43    .DEFINE "_timer0_prevhandler"
                           A    44    .ALIAS "__timer0_prevhandler"
                           A    45    .CLASS 83
                           A    46    .VALUE __timer0_prevhandler
                           A    47    .TYPE 33
                           A    48    .ENDEF
                           A    49    ;    1	/*
                           A    50    ;    2	 * Title:			AGON timer interfac
                           A    51    ;    3	 * Author:			Jeroen Venema
                           A    52    ;    4	 * Created:			06/11/2022
                           A    53    ;    5	 * Last Updated:	22/01/2023
                           A    54    ;    6	 * 
                           A    55    ;    7	 * Modinfo:
                           A    56    ;    8	 * 06/11/2022:		Initial version
                           A    57    ;    9	 * 22/01/2023:		Interrupt-based fre
                           A    58    ;   10	 * 10/04/2023:		Using mos_setintvec
                           A    59    ;   11	 */
                           A    60    ;   12	
                           A    61    ;   13	#include <defines.h>
                           A    62    ;   14	#include <ez80.h>
                           A    63    ;   15	#include "agontimer.h"
                           A    64    ;   16	#include "mos-interface.h"
                           A    65    ;   17	
                           A    66    ;   18	#define TMR0_COUNTER_1ms	(unsigned s
                           A    67    ;   19	
                           A    68    ;   20	void *_timer0_prevhandler;				
                           A    69    	SEGMENT CODE
                           A    70    ;   21	
                           A    71    ;   22	// start timer0 on a millisecond interv
                           A    72    ;   23	// this function registers an interrupt
                           A    73    ;   24	void timer0_begin(int interval)
                           A    74    ;   25	{
042CE2                     A    75    _timer0_begin:
                           A    76    .DEFINE "_timer0_begin"
                           A    77    
                           A    78    .VALUE _timer0_begin
                           A    79    
                           A    80    .CLASS 2
                           A    81    
                           A    82    .TYPE 65
                           A    83    
                           A    84    .ENDEF
                           A    85    
                           A    86    .BEGFUNC "timer0_begin",25,"_timer0_begin"
                           A    87    
                           A    88    .LINE 25
                           A    89    
                           A    90    .DEFINE "interval"
                           A    91    
                           A    92    .CLASS 65
                           A    93    
                           A    94    .VALUE 6
                           A    95    
                           A    96    .TYPE 4
                           A    97    
                           A    98    .ENDEF
                           A    99    
                           A   100    .DEFINE "rr"
                           A   101    
                           A   102    .CLASS 65
                           A   103    
                           A   104    .VALUE -2
                           A   105    
                           A   106    .TYPE 13
                           A   107    
                           A   108    .ENDEF
                           A   109    
                           A   110    .DEFINE "tmp"
                           A   111    
                           A   112    .CLASS 65
                           A   113    
                           A   114    .VALUE -3
                           A   115    
                           A   116    .TYPE 12
                           A   117    
                           A   118    .ENDEF
                           A   119    
042CE2 DDE5                A   120    	PUSH	IX
042CE4 DD210000 00         A   121    	LD	IX,0
042CE9 DD39                A   122    	ADD	IX,SP
042CEB C5                  A   123    	PUSH	BC
                           A   124    ;   26		unsigned char tmp;
                           A   125    ;   27		unsigned short rr;
                           A   126    ;   28		
                           A   127    ;   29		_timer0_prevhandler = mos_setintvec
                           A   128    .LINE 29
                           A   129    
042CEC 01 DB 2D 04         A   130    	LD	BC,_timer0_handler
042CF0 C5                  A   131    	PUSH	BC
042CF1 010A0000            A   132    	LD	BC,10
042CF5 C5                  A   133    	PUSH	BC
042CF6 CD 84 2C 04         A   134    	CALL	_mos_setintvector
042CFA C1                  A   135    	POP	BC
042CFB C1                  A   136    	POP	BC
042CFC 22 3C 63 04         A   137    	LD	(__timer0_prevhandler),HL
                           A   138    ;   30	
                           A   139    ;   31		timer0 = 0;
                           A   140    .LINE 31
                           A   141    
042D00 01000000            A   142    	LD	BC,0
042D04 ED43 55 51 04       A   143    	LD	(_timer0),BC
                           A   144    ;   32		TMR0_CTL = 0x00;
                           A   145    .LINE 32
                           A   146    
042D09 AF                  A   147    	XOR	A,A
042D0A ED3980              A   148    	OUT0	(128),A
                           A   149    ;   33		rr = (unsigned short)(((18432000 / 
                           A   150    .LINE 33
                           A   151    
042D0D DD0706              A   152    	LD	BC,(IX+%6)
042D10 CD C8 36 04         A   153    	CALL	__itol
042D14 5F                  A   154    	LD	E,A
042D15 C5E1                A   155    	LD	HL,BC
042D17 01004800            A   156    	LD	BC,18432
042D1B AF                  A   157    	XOR	A,A
042D1C CD B8 37 04         A   158    	CALL	__lmuls
042D20 01100000            A   159    	LD	BC,16
042D24 AF                  A   160    	XOR	A,A
042D25 CD 39 30 04         A   161    	CALL	__ldivs
042D29 DD75FE              A   162    	LD	(IX+%FFFFFFFE),L
042D2C DD74FF              A   163    	LD	(IX+%FFFFFFFF),H
                           A   164    ;   34		TMR0_RR_H = (unsigned char)(rr >> 8
                           A   165    .LINE 34
                           A   166    
042D2F DD07FE              A   167    	LD	BC,(IX+%FFFFFFFE)
042D32 CD AD 2F 04         A   168    	CALL	__stoiu
042D36 3E08                A   169    	LD	A,%8
042D38 CD 02 2E 04         A   170    	CALL	__ishrs_b
042D3C 7D                  A   171    	LD	A,L
042D3D ED3982              A   172    	OUT0	(130),A
                           A   173    ;   35		TMR0_RR_L = (unsigned char)(rr);
                           A   174    .LINE 35
                           A   175    
042D40 DD7EFE              A   176    	LD	A,(IX+%FFFFFFFE)
042D43 ED3981              A   177    	OUT0	(129),A
                           A   178    ;   36		tmp = TMR0_CTL;
                           A   179    .LINE 36
                           A   180    
042D46 ED3880              A   181    	IN0	A,(128)
042D49 DD77FD              A   182    	LD	(IX+%FFFFFFFD),A
                           A   183    ;   37	    TMR0_CTL = 0x57;
                           A   184    .LINE 37
                           A   185    
042D4C 3E57                A   186    	LD	A,%57
042D4E ED3980              A   187    	OUT0	(128),A
                           A   188    ;   38	}
                           A   189    .LINE 38
                           A   190    
042D51 DDF9                A   191    	LD	SP,IX
042D53 DDE1                A   192    	POP	IX
042D55 C9                  A   193    	RET	
                           A   194    
                           A   195    
                           A   196    ;**************************** _timer0_begin ***
                           A   197    ;Name                         Addr/Register   S
                           A   198    ;_timer0                             IMPORT    
                           A   199    ;__timer0_prevhandler                STATIC    
                           A   200    ;_timer0_handler                     IMPORT  --
                           A   201    ;_mos_setintvector                   IMPORT  --
                           A   202    ;tmp                                   IX-3    
                           A   203    ;rr                                    IX-2    
                           A   204    ;interval                              IX+6    
                           A   205    
                           A   206    
                           A   207    ; Stack Frame Size: 12 (bytes)
                           A   208    ;       Spill Code: 0 (instruction)
                           A   209    
                           A   210    
                           A   211    .ENDFUNC "timer0_begin",38,"_timer0_begin"
                           A   212    ;   39	
                           A   213    ;   40	void timer0_end(void)
                           A   214    ;   41	{
042D56                     A   215    _timer0_end:
                           A   216    .DEFINE "_timer0_end"
                           A   217    
                           A   218    .VALUE _timer0_end
                           A   219    
                           A   220    .CLASS 2
                           A   221    
                           A   222    .TYPE 65
                           A   223    
                           A   224    .ENDEF
                           A   225    
                           A   226    .BEGFUNC "timer0_end",41,"_timer0_end"
                           A   227    
042D56 DDE5                A   228    	PUSH	IX
042D58 DD210000 00         A   229    	LD	IX,0
042D5D DD39                A   230    	ADD	IX,SP
                           A   231    ;   42		TMR0_CTL = 0;
                           A   232    .LINE 42
                           A   233    
042D5F AF                  A   234    	XOR	A,A
042D60 ED3980              A   235    	OUT0	(128),A
                           A   236    ;   43		mos_setintvector(PRT0_IVECT, _timer
                           A   237    .LINE 43
                           A   238    
042D63 ED4B 3C 63 04       A   239    	LD	BC,(__timer0_prevhandler)
042D68 C5                  A   240    	PUSH	BC
042D69 010A0000            A   241    	LD	BC,10
042D6D C5                  A   242    	PUSH	BC
042D6E CD 84 2C 04         A   243    	CALL	_mos_setintvector
042D72 C1                  A   244    	POP	BC
042D73 C1                  A   245    	POP	BC
                           A   246    ;   44	}
                           A   247    .LINE 44
                           A   248    
042D74 DDF9                A   249    	LD	SP,IX
042D76 DDE1                A   250    	POP	IX
042D78 C9                  A   251    	RET	
                           A   252    
                           A   253    
                           A   254    ;**************************** _timer0_end *****
                           A   255    ;Name                         Addr/Register   S
                           A   256    ;__timer0_prevhandler                STATIC    
                           A   257    ;_mos_setintvector                   IMPORT  --
                           A   258    
                           A   259    
                           A   260    ; Stack Frame Size: 6 (bytes)
                           A   261    ;       Spill Code: 0 (instruction)
                           A   262    
                           A   263    
                           A   264    .ENDFUNC "timer0_end",44,"_timer0_end"
                           A   265    ;   45	
                           A   266    ;   46	// delay for number of ms using TMR0
                           A   267    ;   47	// this routine doesn't use the interru
                           A   268    ;   48	void delayms(int ms)
                           A   269    ;   49	{
042D79                     A   270    _delayms:
                           A   271    .DEFINE "_delayms"
                           A   272    
                           A   273    .VALUE _delayms
                           A   274    
                           A   275    .CLASS 2
                           A   276    
                           A   277    .TYPE 65
                           A   278    
                           A   279    .ENDEF
                           A   280    
                           A   281    .BEGFUNC "delayms",49,"_delayms"
                           A   282    
                           A   283    .LINE 49
                           A   284    
                           A   285    .DEFINE "ms"
                           A   286    
                           A   287    .CLASS 65
                           A   288    
                           A   289    .VALUE 6
                           A   290    
                           A   291    .TYPE 4
                           A   292    
                           A   293    .ENDEF
                           A   294    
                           A   295    .DEFINE "timer0"
                           A   296    
                           A   297    .CLASS 65
                           A   298    
                           A   299    .VALUE -2
                           A   300    
                           A   301    .TYPE 13
                           A   302    
                           A   303    .ENDEF
                           A   304    
042D79 DDE5                A   305    	PUSH	IX
042D7B DD210000 00         A   306    	LD	IX,0
042D80 DD39                A   307    	ADD	IX,SP
042D82 3B                  A   308    	DEC	SP
042D83 3B                  A   309    	DEC	SP
                           A   310    ;   50		unsigned short rr;
                           A   311    ;   51		UINT16 timer0;
                           A   312    ;   52	
                           A   313    ;   53		rr = TMR0_COUNTER_1ms - 19;	// 1,7%
                           A   314    ;   54		
                           A   315    ;   55		TMR0_CTL = 0x00;	// disable time
                           A   316    .LINE 55
                           A   317    
042D84 AF                  A   318    	XOR	A,A
042D85 ED3980              A   319    	OUT0	(128),A
                           A   320    ;   56		
                           A   321    ;   57		while(ms)
                           A   322    .LINE 57
                           A   323    
042D88 18 43               A   324    	JR	L_6
042D8A                     A   325    L_7:
                           A   326    ;   58		{	
                           A   327    ;   59			TMR0_RR_H = (unsigned char)(rr 
                           A   328    .LINE 59
                           A   329    
042D8A 3E04                A   330    	LD	A,%4
042D8C ED3982              A   331    	OUT0	(130),A
                           A   332    ;   60			TMR0_RR_L = (unsigned char)(rr)
                           A   333    .LINE 60
                           A   334    
042D8F 3E6D                A   335    	LD	A,%6D
042D91 ED3981              A   336    	OUT0	(129),A
                           A   337    ;   61					
                           A   338    ;   62			TMR0_CTL = 0x87; // enable, sin
                           A   339    .LINE 62
                           A   340    
042D94 3E87                A   341    	LD	A,%87
042D96 ED3980              A   342    	OUT0	(128),A
                           A   343    ;   63			do
042D99                     A   344    L_2:
                           A   345    .LINE 63
                           A   346    
                           A   347    ;   64			{
                           A   348    ;   65				timer0 = TMR0_DR_L;
                           A   349    .LINE 65
                           A   350    
042D99 ED3881              A   351    	IN0	A,(129)
042D9C 4F                  A   352    	LD	C,A
042D9D 0600                A   353    	LD	B,%0
042D9F C5E1                A   354    	LD	HL,BC
042DA1 DD75FE              A   355    	LD	(IX+%FFFFFFFE),L
042DA4 DD74FF              A   356    	LD	(IX+%FFFFFFFF),H
                           A   357    ;   66				timer0 = timer0 | (TMR0_DR_
                           A   358    .LINE 66
                           A   359    
042DA7 ED3882              A   360    	IN0	A,(130)
042DAA 4F                  A   361    	LD	C,A
042DAB C5E1                A   362    	LD	HL,BC
042DAD 65                  A   363    	LD	H,L
042DAE 2E00                A   364    	LD	L,%0
042DB0 DD07FE              A   365    	LD	BC,(IX+%FFFFFFFE)
042DB3 CD A7 37 04         A   366    	CALL	__sor
042DB7 DD75FE              A   367    	LD	(IX+%FFFFFFFE),L
042DBA DD74FF              A   368    	LD	(IX+%FFFFFFFF),H
                           A   369    ;   67			}
                           A   370    ;   68			while(timer0);
                           A   371    .LINE 68
                           A   372    
042DBD DD27FE              A   373    	LD	HL,(IX+%FFFFFFFE)
042DC0 CD 49 37 04         A   374    	CALL	__scmpzero
042DC4 20 D3               A   375    	JR	NZ,L_2
                           A   376    ;   69			ms--;
                           A   377    .LINE 69
                           A   378    
042DC6 DD0706              A   379    	LD	BC,(IX+%6)
042DC9 0B                  A   380    	DEC	BC
042DCA DD0F06              A   381    	LD	(IX+%6),BC
                           A   382    ;   70		}
042DCD                     A   383    L_6:
                           A   384    .LINE 70
                           A   385    
042DCD DD2706              A   386    	LD	HL,(IX+%6)
042DD0 CD B3 33 04         A   387    	CALL	__icmpzero
042DD4 20 B4               A   388    	JR	NZ,L_7
                           A   389    .LINE 71
                           A   390    
042DD6 DDF9                A   391    	LD	SP,IX
042DD8 DDE1                A   392    	POP	IX
042DDA C9                  A   393    	RET	
                           A   394    
                           A   395    
                           A   396    ;**************************** _delayms ********
                           A   397    ;Name                         Addr/Register   S
                           A   398    ;timer0                                IX-2    
                           A   399    ;ms                                    IX+6    
                           A   400    
                           A   401    
                           A   402    ; Stack Frame Size: 11 (bytes)
                           A   403    ;       Spill Code: 0 (instruction)
                           A   404    
                           A   405    
                           A   406    .ENDFUNC "delayms",71,"_delayms"
                           A   407    	XREF _mos_setintvector:ROM
                           A   408    	XREF _timer0_handler:ROM
                           A   409    	XREF _timer0:ROM
                           A   410    	XREF __ldivs:ROM
                           A   411    	XREF __lmuls:ROM
                           A   412    	XREF __sor:ROM
                           A   413    	XREF __stoiu:ROM
                           A   414    	XREF __itol:ROM
                           A   415    	XREF __scmpzero:ROM
                           A   416    	XREF __icmpzero:ROM
                           A   417    	XREF __ishrs_b:ROM
                           A   418    	XDEF _delayms
                           A   419    	XDEF _timer0_end
                           A   420    	XDEF _timer0_begin
                           A   421    	XDEF __timer0_prevhandler
                           A   422    	END


Errors: 0
Warnings: 0
Lines Assembled: 423
