; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optsize -noreduceopt -nopadbranch -debug
; -peephole -globalopt -localcse -const=ROM 
	FILE	"..\vdp.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "NONAME0",8
.DEFINE "baudRate"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "dataBits"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stopBits"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "parity"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flowcontrol"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "eir"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "NONAME0"
;    1	#include <defines.h>
;    2	#include "vdp.h"
;    3	#include "mos-interface.h"
;    4	
;    5	// Generic functions
;    6	
;    7	void write16bit(UINT16 w)
;    8	{
_write16bit:
.DEFINE "_write16bit"

.VALUE _write16bit

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "write16bit",8,"_write16bit"

.LINE 8

.DEFINE "w"

.CLASS 65

.VALUE 6

.TYPE 13

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;    9		putch(w & 0xFF); // write LSB
.LINE 9

	LD	BC,(IX+%6)
	CALL	__stoiu
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   10		putch(w >> 8);	 // write MSB	
.LINE 10

	LD	BC,(IX+%6)
	CALL	__stoiu
	LD	A,%8
	CALL	__ishrs_b
	PUSH	HL
	CALL	_putch
	POP	BC
;   11	}
.LINE 11

	LD	SP,IX
	POP	IX
	RET	


;**************************** _write16bit ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;w                                     IX+6      2   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "write16bit",11,"_write16bit"
;   12	
;   13	void write32bit(UINT32 l)
;   14	{
_write32bit:
.DEFINE "_write32bit"

.VALUE _write32bit

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "write32bit",14,"_write32bit"

.LINE 14

.DEFINE "l"

.CLASS 65

.VALUE 6

.TYPE 15

.ENDEF

.DEFINE "temp"

.CLASS 65

.VALUE -4

.TYPE 15

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	DEC	SP
;   15		UINT32 temp = l;
;   16		
;   17		putch(temp & 0xFF); // write LSB
.LINE 17

	LD	HL,(IX+%6)
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   18		temp = temp >> 8;
.LINE 18

	LD	BC,(IX+%6)
	LD	A,(IX+%9)
	LD	L,%8
	CALL	__lshru
	LD	(IX+%FFFFFFFC),BC
	LD	(IX+%FFFFFFFF),A
;   19		putch(temp & 0xFF);
.LINE 19

	LD	HL,BC
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   20		temp = temp >> 8;
.LINE 20

	LD	BC,(IX+%FFFFFFFC)
	LD	A,(IX+%FFFFFFFF)
	LD	L,%8
	CALL	__lshru
	LD	(IX+%FFFFFFFC),BC
	LD	(IX+%FFFFFFFF),A
;   21		putch(temp & 0xFF);
.LINE 21

	LD	HL,BC
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   22		temp = temp >> 8;
.LINE 22

	LD	BC,(IX+%FFFFFFFC)
	LD	A,(IX+%FFFFFFFF)
	LD	L,%8
	CALL	__lshru
	LD	(IX+%FFFFFFFC),BC
	LD	(IX+%FFFFFFFF),A
;   23		putch(temp & 0xFF);
.LINE 23

	LD	HL,BC
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   24		return;	
;   25	}
.LINE 25

	LD	SP,IX
	POP	IX
	RET	


;**************************** _write32bit ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;temp                                  IX-4      4   variable
;l                                     IX+6      4   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "write32bit",25,"_write32bit"
;   26	
;   27	void vdp_mode(unsigned char mode)
;   28	{
_vdp_mode:
.DEFINE "_vdp_mode"

.VALUE _vdp_mode

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_mode",28,"_vdp_mode"

.LINE 28

.DEFINE "mode"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   29	    putch(22);
.LINE 29

	LD	BC,22
	PUSH	BC
	CALL	_putch
	POP	BC
;   30	    putch(mode);
.LINE 30

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   31	}
.LINE 31

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_mode ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;mode                                  IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_mode",31,"_vdp_mode"
;   32	
;   33	void vdp_getMode(void) {
_vdp_getMode:
.DEFINE "_vdp_getMode"

.VALUE _vdp_getMode

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_getMode",33,"_vdp_getMode"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   34		putch(23);
.LINE 34

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;   35		putch(0);
.LINE 35

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;   36		putch(0x86);
.LINE 36

	LD	BC,134
	PUSH	BC
	CALL	_putch
	POP	BC
;   37	}
.LINE 37

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_getMode ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_getMode",37,"_vdp_getMode"
;   38	
;   39	void vdp_setPaletteColor(UINT8 index, UINT8 color, UINT8 r, UINT8 g, UINT8 b) {
_vdp_setPaletteColor:
.DEFINE "_vdp_setPaletteColor"

.VALUE _vdp_setPaletteColor

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_setPaletteColor",39,"_vdp_setPaletteColor"

.LINE 39

.DEFINE "index"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "color"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

.DEFINE "r"

.CLASS 65

.VALUE 12

.TYPE 12

.ENDEF

.DEFINE "g"

.CLASS 65

.VALUE 15

.TYPE 12

.ENDEF

.DEFINE "b"

.CLASS 65

.VALUE 18

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   40		putch(0x13); // VDU palette
.LINE 40

	LD	BC,19
	PUSH	BC
	CALL	_putch
	POP	BC
;   41		putch(index);
.LINE 41

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   42		putch(color); // 255 - set R/G/B colors, or <80 color lookup table
.LINE 42

	LD	A,(IX+%9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   43		putch(r);
.LINE 43

	LD	A,(IX+%C)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   44		putch(g);
.LINE 44

	LD	A,(IX+%F)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   45		putch(b);
.LINE 45

	LD	A,(IX+%12)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   46	}
.LINE 46

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_setPaletteColor ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;b                                    IX+18      1   parameter
;g                                    IX+15      1   parameter
;r                                    IX+12      1   parameter
;color                                 IX+9      1   parameter
;index                                 IX+6      1   parameter


; Stack Frame Size: 21 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_setPaletteColor",46,"_vdp_setPaletteColor"
;   47	
;   48	// Text functions
;   49	void vdp_cls()
;   50	{
_vdp_cls:
.DEFINE "_vdp_cls"

.VALUE _vdp_cls

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_cls",50,"_vdp_cls"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   51	    putch(12);
.LINE 51

	LD	BC,12
	PUSH	BC
	CALL	_putch
	POP	BC
;   52	}
.LINE 52

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_cls ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_cls",52,"_vdp_cls"
;   53	
;   54	void vdp_cursorHome()
;   55	{
_vdp_cursorHome:
.DEFINE "_vdp_cursorHome"

.VALUE _vdp_cursorHome

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_cursorHome",55,"_vdp_cursorHome"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   56	    putch(30);
.LINE 56

	LD	BC,30
	PUSH	BC
	CALL	_putch
	POP	BC
;   57	}
.LINE 57

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_cursorHome ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_cursorHome",57,"_vdp_cursorHome"
;   58	
;   59	void vdp_cursorUp()
;   60	{
_vdp_cursorUp:
.DEFINE "_vdp_cursorUp"

.VALUE _vdp_cursorUp

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_cursorUp",60,"_vdp_cursorUp"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   61	    putch(11);
.LINE 61

	LD	BC,11
	PUSH	BC
	CALL	_putch
	POP	BC
;   62	}
.LINE 62

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_cursorUp ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_cursorUp",62,"_vdp_cursorUp"
;   63	
;   64	void vdp_cursorGoto(unsigned char x, unsigned char y)
;   65	{
_vdp_cursorGoto:
.DEFINE "_vdp_cursorGoto"

.VALUE _vdp_cursorGoto

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_cursorGoto",65,"_vdp_cursorGoto"

.LINE 65

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   66	    putch(31); // TAB
.LINE 66

	LD	BC,31
	PUSH	BC
	CALL	_putch
	POP	BC
;   67	    putch(x);
.LINE 67

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   68	    putch(y);
.LINE 68

	LD	A,(IX+%9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   69	}
.LINE 69

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_cursorGoto ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;y                                     IX+9      1   parameter
;x                                     IX+6      1   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_cursorGoto",69,"_vdp_cursorGoto"
;   70	
;   71	/*
;   72	void vdp_colour(unsigned char foreground, unsigned char r, unsigned char g, unsigned char b)
;   73	{
;   74	    putch(17); // COLOUR
;   75	    putch(!foreground);
;   76	    putch(r);
;   77	    putch(g);
;   78	    putch(b);
;   79	}
;   80	
;   81	void vdp_fgcolour(unsigned char r, unsigned char g, unsigned char b)
;   82	{
;   83	    vdp_colour(1,r,g,b);
;   84	}
;   85	
;   86	void vdp_bgcolour(unsigned char r, unsigned char g, unsigned char b)
;   87	{
;   88	    vdp_colour(0,r,g,b);
;   89	}
;   90	*/
;   91	
;   92	void vdp_fgcolour(unsigned char colorindex) {
_vdp_fgcolour:
.DEFINE "_vdp_fgcolour"

.VALUE _vdp_fgcolour

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_fgcolour",92,"_vdp_fgcolour"

.LINE 92

.DEFINE "colorindex"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   93		putch(17); // COLOUR
.LINE 93

	LD	BC,17
	PUSH	BC
	CALL	_putch
	POP	BC
;   94		putch(colorindex);	
.LINE 94

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   95	}
.LINE 95

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_fgcolour ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;colorindex                            IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_fgcolour",95,"_vdp_fgcolour"
;   96	
;   97	void vdp_bgcolour(unsigned char colorindex) {
_vdp_bgcolour:
.DEFINE "_vdp_bgcolour"

.VALUE _vdp_bgcolour

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_bgcolour",97,"_vdp_bgcolour"

.LINE 97

.DEFINE "colorindex"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   98		putch(17); // COLOUR
.LINE 98

	LD	BC,17
	PUSH	BC
	CALL	_putch
	POP	BC
;   99		putch(colorindex | 0x80);	
.LINE 99

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	LD	BC,128
	CALL	__ior
	PUSH	HL
	CALL	_putch
	POP	BC
;  100	}
.LINE 100

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_bgcolour ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;colorindex                            IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_bgcolour",100,"_vdp_bgcolour"
;  101	
;  102	//
;  103	// Graphics functions
;  104	//
;  105	
;  106	void vdp_clearGraphics()
;  107	{
_vdp_clearGraphics:
.DEFINE "_vdp_clearGraphics"

.VALUE _vdp_clearGraphics

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_clearGraphics",107,"_vdp_clearGraphics"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  108	    putch(16);    
.LINE 108

	LD	BC,16
	PUSH	BC
	CALL	_putch
	POP	BC
;  109	}
.LINE 109

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_clearGraphics ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_clearGraphics",109,"_vdp_clearGraphics"
;  110	
;  111	/*
;  112	void vdp_plotColour(unsigned char r, unsigned char g, unsigned char b)
;  113	{
;  114	    putch(18); // GCOL
;  115	    putch(0);
;  116	    putch(r);
;  117	    putch(g);
;  118	    putch(b);
;  119	}
;  120	*/
;  121	void vdp_plotColour(unsigned char colorindex)
;  122	{
_vdp_plotColour:
.DEFINE "_vdp_plotColour"

.VALUE _vdp_plotColour

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_plotColour",122,"_vdp_plotColour"

.LINE 122

.DEFINE "colorindex"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  123	    putch(18); // GCOL
.LINE 123

	LD	BC,18
	PUSH	BC
	CALL	_putch
	POP	BC
;  124	    putch(1);
.LINE 124

	LD	BC,1
	PUSH	BC
	CALL	_putch
	POP	BC
;  125		putch(colorindex);
.LINE 125

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  126	}
.LINE 126

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_plotColour ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;colorindex                            IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_plotColour",126,"_vdp_plotColour"
;  127	
;  128	// internal function
;  129	void vdp_plot(unsigned char mode, unsigned int x, unsigned int y)
;  130	{
_vdp_plot:
.DEFINE "_vdp_plot"

.VALUE _vdp_plot

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_plot",130,"_vdp_plot"

.LINE 130

.DEFINE "mode"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "x"

.CLASS 65

.VALUE 9

.TYPE 14

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 12

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  131	    putch(25); // PLOT
.LINE 131

	LD	BC,25
	PUSH	BC
	CALL	_putch
	POP	BC
;  132	    putch(mode);
.LINE 132

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  133	    putch(x & 0xFF);
.LINE 133

	LD	A,(IX+%9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  134	    putch(x >> 8);
.LINE 134

	LD	HL,(IX+%9)
	LD	A,%8
	CALL	__ishru_b
	PUSH	HL
	CALL	_putch
	POP	BC
;  135	    putch(y & 0xFF);
.LINE 135

	LD	A,(IX+%C)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  136	    putch(y >> 8);
.LINE 136

	LD	HL,(IX+%C)
	LD	A,%8
	CALL	__ishru_b
	PUSH	HL
	CALL	_putch
	POP	BC
;  137	}
.LINE 137

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_plot ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;y                                    IX+12      3   parameter
;x                                     IX+9      3   parameter
;mode                                  IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_plot",137,"_vdp_plot"
;  138	
;  139	void vdp_plotMoveTo(unsigned int x, unsigned int y)
;  140	{
_vdp_plotMoveTo:
.DEFINE "_vdp_plotMoveTo"

.VALUE _vdp_plotMoveTo

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_plotMoveTo",140,"_vdp_plotMoveTo"

.LINE 140

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 14

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  141		vdp_plot(0x04,x,y);
.LINE 141

	LD	BC,(IX+%9)
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	LD	BC,4
	PUSH	BC
	CALL	_vdp_plot
	POP	BC
	POP	BC
	POP	BC
;  142	}
.LINE 142

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_plotMoveTo ***************************
;Name                         Addr/Register   Size   Type
;y                                     IX+9      3   parameter
;x                                     IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_plotMoveTo",142,"_vdp_plotMoveTo"
;  143	
;  144	void vdp_plotLineTo(unsigned int x, unsigned int y)
;  145	{
_vdp_plotLineTo:
.DEFINE "_vdp_plotLineTo"

.VALUE _vdp_plotLineTo

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_plotLineTo",145,"_vdp_plotLineTo"

.LINE 145

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 14

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  146		vdp_plot(0x05,x,y);
.LINE 146

	LD	BC,(IX+%9)
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_vdp_plot
	POP	BC
	POP	BC
	POP	BC
;  147	}
.LINE 147

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_plotLineTo ***************************
;Name                         Addr/Register   Size   Type
;y                                     IX+9      3   parameter
;x                                     IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_plotLineTo",147,"_vdp_plotLineTo"
;  148	
;  149	void vdp_plotPoint(unsigned int x, unsigned int y)
;  150	{
_vdp_plotPoint:
.DEFINE "_vdp_plotPoint"

.VALUE _vdp_plotPoint

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_plotPoint",150,"_vdp_plotPoint"

.LINE 150

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 14

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  151		vdp_plot(0x40,x,y);
.LINE 151

	LD	BC,(IX+%9)
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	LD	BC,64
	PUSH	BC
	CALL	_vdp_plot
	POP	BC
	POP	BC
	POP	BC
;  152	}
.LINE 152

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_plotPoint ***************************
;Name                         Addr/Register   Size   Type
;y                                     IX+9      3   parameter
;x                                     IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_plotPoint",152,"_vdp_plotPoint"
;  153	
;  154	void vdp_plotTriangle(unsigned int x, unsigned int y)
;  155	{
_vdp_plotTriangle:
.DEFINE "_vdp_plotTriangle"

.VALUE _vdp_plotTriangle

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_plotTriangle",155,"_vdp_plotTriangle"

.LINE 155

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 14

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  156		vdp_plot(0x50,x,y);
.LINE 156

	LD	BC,(IX+%9)
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	LD	BC,80
	PUSH	BC
	CALL	_vdp_plot
	POP	BC
	POP	BC
	POP	BC
;  157	}
.LINE 157

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_plotTriangle ***************************
;Name                         Addr/Register   Size   Type
;y                                     IX+9      3   parameter
;x                                     IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_plotTriangle",157,"_vdp_plotTriangle"
;  158	
;  159	void vdp_plotCircleRadius(unsigned int r)
;  160	{
_vdp_plotCircleRadius:
.DEFINE "_vdp_plotCircleRadius"

.VALUE _vdp_plotCircleRadius

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_plotCircleRadius",160,"_vdp_plotCircleRadius"

.LINE 160

.DEFINE "r"

.CLASS 65

.VALUE 6

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  161		vdp_plot(0x90,r,0);
.LINE 161

	LD	BC,0
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	LD	BC,144
	PUSH	BC
	CALL	_vdp_plot
	POP	BC
	POP	BC
	POP	BC
;  162	}
.LINE 162

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_plotCircleRadius ***************************
;Name                         Addr/Register   Size   Type
;r                                     IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_plotCircleRadius",162,"_vdp_plotCircleRadius"
;  163	
;  164	void vdp_plotCircleCircumference(unsigned int x, unsigned int y)
;  165	{
_vdp_plotCircleCircumference:
.DEFINE "_vdp_plotCircleCircumference"

.VALUE _vdp_plotCircleCircumference

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_plotCircleCircumference",165,"_vdp_plotCircleCircumference"

.LINE 165

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 14

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  166		vdp_plot(0x95,x,y);
.LINE 166

	LD	BC,(IX+%9)
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	LD	BC,149
	PUSH	BC
	CALL	_vdp_plot
	POP	BC
	POP	BC
	POP	BC
;  167	}
.LINE 167

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_plotCircleCircumference ***************************
;Name                         Addr/Register   Size   Type
;y                                     IX+9      3   parameter
;x                                     IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_plotCircleCircumference",167,"_vdp_plotCircleCircumference"
;  168	
;  169	void vdp_plotSetOrigin(unsigned int x, unsigned int y)
;  170	{
_vdp_plotSetOrigin:
.DEFINE "_vdp_plotSetOrigin"

.VALUE _vdp_plotSetOrigin

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_plotSetOrigin",170,"_vdp_plotSetOrigin"

.LINE 170

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 14

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  171	    putch(29); //Graphics ORIGIN
.LINE 171

	LD	BC,29
	PUSH	BC
	CALL	_putch
	POP	BC
;  172	    putch(x & 0xF);
.LINE 172

	LD	A,(IX+%6)
	AND	A,%F
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  173	    putch(x >> 8);
.LINE 173

	LD	HL,(IX+%6)
	LD	A,%8
	CALL	__ishru_b
	PUSH	HL
	CALL	_putch
	POP	BC
;  174	    putch(y & 0xF);
.LINE 174

	LD	A,(IX+%9)
	AND	A,%F
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  175	    putch(y >> 8);
.LINE 175

	LD	HL,(IX+%9)
	LD	A,%8
	CALL	__ishru_b
	PUSH	HL
	CALL	_putch
	POP	BC
;  176	}
.LINE 176

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_plotSetOrigin ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;y                                     IX+9      3   parameter
;x                                     IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_plotSetOrigin",176,"_vdp_plotSetOrigin"
;  177	
;  178	// Bitmap VDP functions
;  179	void vdp_bitmapSelect(UINT8 id)
;  180	{
_vdp_bitmapSelect:
.DEFINE "_vdp_bitmapSelect"

.VALUE _vdp_bitmapSelect

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_bitmapSelect",180,"_vdp_bitmapSelect"

.LINE 180

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  181		putch(23); // vdu_sys
.LINE 181

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  182		putch(27); // sprite command
.LINE 182

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  183		putch(0);  // select command
.LINE 183

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;  184		putch(id); // bitmap_id
.LINE 184

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  185		return;	
;  186	}
.LINE 186

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_bitmapSelect ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;id                                    IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_bitmapSelect",186,"_vdp_bitmapSelect"
;  187	
;  188	void vdp_bitmapSendDataSelected(UINT16 width, UINT16 height, UINT32 *data)
;  189	{
_vdp_bitmapSendDataSelected:
.DEFINE "_vdp_bitmapSendDataSelected"

.VALUE _vdp_bitmapSendDataSelected

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_bitmapSendDataSelected",189,"_vdp_bitmapSendDataSelected"

.LINE 189

.DEFINE "width"

.CLASS 65

.VALUE 6

.TYPE 13

.ENDEF

.DEFINE "height"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

.DEFINE "data"

.CLASS 65

.VALUE 12

.TYPE 47

.ENDEF

.DEFINE "n"

.CLASS 65

.VALUE -2

.TYPE 13

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
	DEC	SP
;  190		UINT16 n;
;  191		
;  192		putch(23); // vdu_sys
.LINE 192

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  193		putch(27); // sprite command
.LINE 193

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  194		putch(1);  // send data to selected bitmap
.LINE 194

	LD	BC,1
	PUSH	BC
	CALL	_putch
	POP	BC
;  195		
;  196		write16bit(width);
.LINE 196

	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_write16bit
	POP	BC
;  197		write16bit(height);
.LINE 197

	LD	BC,(IX+%9)
	PUSH	BC
	CALL	_write16bit
	POP	BC
;  198		
;  199		for(n = 0; n < (width*height); n++)
.LINE 199

	LD	(IX+%FFFFFFFE),%0
	LD	(IX+%FFFFFFFF),%0
	JR	L_25
L_23:
;  200		{
;  201			write32bit(data[n]);
.LINE 201

	LD	BC,(IX+%FFFFFFFE)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+%C)
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY)
	LD	A,(IY+%3)
	LD	H,%0
	LD	L,A
	PUSH	HL
	PUSH	BC
	CALL	_write32bit
	POP	BC
	POP	BC
	LD	HL,(IX+%FFFFFFFE)
	INC	HL
	LD	(IX+%FFFFFFFE),L
	LD	(IX+%FFFFFFFF),H
;  202			//delayms(1);
;  203		}
L_25:
.LINE 203

	LD	BC,(IX+%6)
	CALL	__stoiu
	LD	DE,HL
	LD	BC,(IX+%9)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	DE,HL
	LD	BC,(IX+%FFFFFFFE)
	CALL	__stoiu
	OR	A,A
	SBC	HL,DE
	CALL	__setflag
	JP	M,L_23
;  204		return;		
;  205	}
.LINE 205

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_bitmapSendDataSelected ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;n                                     IX-2      2   variable
;data                                 IX+12      3   parameter
;height                                IX+9      2   parameter
;width                                 IX+6      2   parameter


; Stack Frame Size: 17 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_bitmapSendDataSelected",205,"_vdp_bitmapSendDataSelected"
;  206	
;  207	void vdp_bitmapSendData(UINT8 id, UINT16 width, UINT16 height, UINT32 *data)
;  208	{
_vdp_bitmapSendData:
.DEFINE "_vdp_bitmapSendData"

.VALUE _vdp_bitmapSendData

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_bitmapSendData",208,"_vdp_bitmapSendData"

.LINE 208

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "width"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

.DEFINE "height"

.CLASS 65

.VALUE 12

.TYPE 13

.ENDEF

.DEFINE "data"

.CLASS 65

.VALUE 15

.TYPE 47

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  209		vdp_bitmapSelect(id);
.LINE 209

	LD	C,(IX+%6)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_bitmapSelect
	POP	BC
;  210		vdp_bitmapSendDataSelected(width, height, data);
.LINE 210

	LD	BC,(IX+%F)
	PUSH	BC
	LD	BC,(IX+%C)
	PUSH	BC
	LD	BC,(IX+%9)
	PUSH	BC
	CALL	_vdp_bitmapSendDataSelected
	POP	BC
	POP	BC
	POP	BC
;  211		return;	
;  212	}
.LINE 212

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_bitmapSendData ***************************
;Name                         Addr/Register   Size   Type
;_vdp_bitmapSendDataSelected         IMPORT  -----   function
;_vdp_bitmapSelect                   IMPORT  -----   function
;data                                 IX+15      3   parameter
;height                               IX+12      2   parameter
;width                                 IX+9      2   parameter
;id                                    IX+6      1   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_bitmapSendData",212,"_vdp_bitmapSendData"
;  213	
;  214	void vdp_bitmapDrawSelected(UINT16 x, UINT16 y)
;  215	{
_vdp_bitmapDrawSelected:
.DEFINE "_vdp_bitmapDrawSelected"

.VALUE _vdp_bitmapDrawSelected

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_bitmapDrawSelected",215,"_vdp_bitmapDrawSelected"

.LINE 215

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 13

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  216		putch(23); // vdu_sys
.LINE 216

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  217		putch(27); // sprite command
.LINE 217

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  218		putch(3);  // draw selected bitmap
.LINE 218

	LD	BC,3
	PUSH	BC
	CALL	_putch
	POP	BC
;  219		
;  220		write16bit(x);
.LINE 220

	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_write16bit
	POP	BC
;  221		write16bit(y);
.LINE 221

	LD	BC,(IX+%9)
	PUSH	BC
	CALL	_write16bit
	POP	BC
;  222		
;  223		return;
;  224	}
.LINE 224

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_bitmapDrawSelected ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;y                                     IX+9      2   parameter
;x                                     IX+6      2   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_bitmapDrawSelected",224,"_vdp_bitmapDrawSelected"
;  225	
;  226	void vdp_bitmapDraw(UINT8 id, UINT16 x, UINT16 y)
;  227	{
_vdp_bitmapDraw:
.DEFINE "_vdp_bitmapDraw"

.VALUE _vdp_bitmapDraw

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_bitmapDraw",227,"_vdp_bitmapDraw"

.LINE 227

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "x"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 12

.TYPE 13

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  228		vdp_bitmapSelect(id);
.LINE 228

	LD	C,(IX+%6)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_bitmapSelect
	POP	BC
;  229		vdp_bitmapDrawSelected(x,y);
.LINE 229

	LD	BC,(IX+%C)
	PUSH	BC
	LD	BC,(IX+%9)
	PUSH	BC
	CALL	_vdp_bitmapDrawSelected
	POP	BC
	POP	BC
;  230		return;	
;  231	}
.LINE 231

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_bitmapDraw ***************************
;Name                         Addr/Register   Size   Type
;_vdp_bitmapDrawSelected             IMPORT  -----   function
;_vdp_bitmapSelect                   IMPORT  -----   function
;y                                    IX+12      2   parameter
;x                                     IX+9      2   parameter
;id                                    IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_bitmapDraw",231,"_vdp_bitmapDraw"
;  232	
;  233	void vdp_bitmapCreateSolidColorSelected(UINT16 width, UINT16 height, UINT32 abgr)
;  234	{
_vdp_bitmapCreateSolidColorSelected:
.DEFINE "_vdp_bitmapCreateSolidColorSelected"

.VALUE _vdp_bitmapCreateSolidColorSelected

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_bitmapCreateSolidColorSelected",234,"_vdp_bitmapCreateSolidColorSelected"

.LINE 234

.DEFINE "width"

.CLASS 65

.VALUE 6

.TYPE 13

.ENDEF

.DEFINE "height"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

.DEFINE "abgr"

.CLASS 65

.VALUE 12

.TYPE 15

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  235		putch(23); // vdu_sys
.LINE 235

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  236		putch(27); // sprite command
.LINE 236

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  237		putch(2);  // define in single color command
.LINE 237

	LD	BC,2
	PUSH	BC
	CALL	_putch
	POP	BC
;  238		
;  239		write16bit(width);
.LINE 239

	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_write16bit
	POP	BC
;  240		write16bit(height);
.LINE 240

	LD	BC,(IX+%9)
	PUSH	BC
	CALL	_write16bit
	POP	BC
;  241		write32bit(abgr);
.LINE 241

	LD	C,(IX+%F)
	LD	B,%0
	PUSH	BC
	LD	BC,(IX+%C)
	PUSH	BC
	CALL	_write32bit
	POP	BC
	POP	BC
;  242		return;		
;  243	}
.LINE 243

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_bitmapCreateSolidColorSelected ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;abgr                                 IX+12      4   parameter
;height                                IX+9      2   parameter
;width                                 IX+6      2   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_bitmapCreateSolidColorSelected",243,"_vdp_bitmapCreateSolidColorSelected"
;  244	
;  245	void vdp_bitmapCreateSolidColor(UINT8 id, UINT16 width, UINT16 height, UINT32 abgr)
;  246	{
_vdp_bitmapCreateSolidColor:
.DEFINE "_vdp_bitmapCreateSolidColor"

.VALUE _vdp_bitmapCreateSolidColor

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_bitmapCreateSolidColor",246,"_vdp_bitmapCreateSolidColor"

.LINE 246

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "width"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

.DEFINE "height"

.CLASS 65

.VALUE 12

.TYPE 13

.ENDEF

.DEFINE "abgr"

.CLASS 65

.VALUE 15

.TYPE 15

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  247		vdp_bitmapSelect(id);
.LINE 247

	LD	C,(IX+%6)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_bitmapSelect
	POP	BC
;  248		vdp_bitmapCreateSolidColorSelected(width, height, abgr);
.LINE 248

	LD	C,(IX+%12)
	LD	B,%0
	PUSH	BC
	LD	BC,(IX+%F)
	PUSH	BC
	LD	BC,(IX+%C)
	PUSH	BC
	LD	BC,(IX+%9)
	PUSH	BC
	CALL	_vdp_bitmapCreateSolidColorSelected
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  249		return;	
;  250	}
.LINE 250

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_bitmapCreateSolidColor ***************************
;Name                         Addr/Register   Size   Type
;_vdp_bitmapCreateSolidColorSelected      IMPORT  -----   function
;_vdp_bitmapSelect                   IMPORT  -----   function
;abgr                                 IX+15      4   parameter
;height                               IX+12      2   parameter
;width                                 IX+9      2   parameter
;id                                    IX+6      1   parameter


; Stack Frame Size: 21 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_bitmapCreateSolidColor",250,"_vdp_bitmapCreateSolidColor"
;  251	
;  252	// Sprite VDP functions
;  253	void vdp_spriteSelect(UINT8 id)
;  254	{
_vdp_spriteSelect:
.DEFINE "_vdp_spriteSelect"

.VALUE _vdp_spriteSelect

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteSelect",254,"_vdp_spriteSelect"

.LINE 254

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  255		putch(23); // vdu_sys
.LINE 255

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  256		putch(27); // sprite command
.LINE 256

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  257		putch(4);  // select sprite
.LINE 257

	LD	BC,4
	PUSH	BC
	CALL	_putch
	POP	BC
;  258		putch(id);
.LINE 258

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  259		return;			
;  260	}
.LINE 260

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteSelect ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;id                                    IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteSelect",260,"_vdp_spriteSelect"
;  261	
;  262	void vdp_spriteClearFramesSelected(void)
;  263	{
_vdp_spriteClearFramesSelected:
.DEFINE "_vdp_spriteClearFramesSelected"

.VALUE _vdp_spriteClearFramesSelected

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteClearFramesSelected",263,"_vdp_spriteClearFramesSelected"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  264		putch(23); // vdu_sys
.LINE 264

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  265		putch(27); // sprite command
.LINE 265

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  266		putch(5);  // clear frames
.LINE 266

	LD	BC,5
	PUSH	BC
	CALL	_putch
	POP	BC
;  267		return;				
;  268	}
.LINE 268

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteClearFramesSelected ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteClearFramesSelected",268,"_vdp_spriteClearFramesSelected"
;  269	
;  270	void vdp_spriteClearFrames(UINT8 bitmapid)
;  271	{
_vdp_spriteClearFrames:
.DEFINE "_vdp_spriteClearFrames"

.VALUE _vdp_spriteClearFrames

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteClearFrames",271,"_vdp_spriteClearFrames"

.LINE 271

.DEFINE "bitmapid"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  272		vdp_spriteSelect(bitmapid);
.LINE 272

	LD	C,(IX+%6)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  273		vdp_spriteClearFramesSelected();
.LINE 273

	CALL	_vdp_spriteClearFramesSelected
;  274		return;				
;  275	}
.LINE 275

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteClearFrames ***************************
;Name                         Addr/Register   Size   Type
;_vdp_spriteClearFramesSelected      IMPORT  -----   function
;_vdp_spriteSelect                   IMPORT  -----   function
;bitmapid                              IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteClearFrames",275,"_vdp_spriteClearFrames"
;  276	
;  277	void vdp_spriteAddFrameSelected(UINT8 bitmapid)
;  278	{
_vdp_spriteAddFrameSelected:
.DEFINE "_vdp_spriteAddFrameSelected"

.VALUE _vdp_spriteAddFrameSelected

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteAddFrameSelected",278,"_vdp_spriteAddFrameSelected"

.LINE 278

.DEFINE "bitmapid"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  279		putch(23); // vdu_sys
.LINE 279

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  280		putch(27); // sprite command
.LINE 280

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  281		putch(6);  // add frame
.LINE 281

	LD	BC,6
	PUSH	BC
	CALL	_putch
	POP	BC
;  282		putch(bitmapid);
.LINE 282

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  283		return;	
;  284	}
.LINE 284

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteAddFrameSelected ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;bitmapid                              IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteAddFrameSelected",284,"_vdp_spriteAddFrameSelected"
;  285	
;  286	void vdp_spriteAddFrame(UINT8 id, UINT8 bitmapid)
;  287	{
_vdp_spriteAddFrame:
.DEFINE "_vdp_spriteAddFrame"

.VALUE _vdp_spriteAddFrame

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteAddFrame",287,"_vdp_spriteAddFrame"

.LINE 287

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "bitmapid"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  288		vdp_spriteSelect(id);
.LINE 288

	LD	C,(IX+%6)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  289		vdp_spriteAddFrameSelected(bitmapid);
.LINE 289

	LD	C,(IX+%9)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteAddFrameSelected
	POP	BC
;  290		return;	
;  291	}
.LINE 291

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteAddFrame ***************************
;Name                         Addr/Register   Size   Type
;_vdp_spriteAddFrameSelected         IMPORT  -----   function
;_vdp_spriteSelect                   IMPORT  -----   function
;bitmapid                              IX+9      1   parameter
;id                                    IX+6      1   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteAddFrame",291,"_vdp_spriteAddFrame"
;  292	
;  293	void vdp_spriteNextFrameSelected(void)
;  294	{
_vdp_spriteNextFrameSelected:
.DEFINE "_vdp_spriteNextFrameSelected"

.VALUE _vdp_spriteNextFrameSelected

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteNextFrameSelected",294,"_vdp_spriteNextFrameSelected"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  295		putch(23); // vdu_sys
.LINE 295

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  296		putch(27); // sprite command
.LINE 296

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  297		putch(8);  // next frame
.LINE 297

	LD	BC,8
	PUSH	BC
	CALL	_putch
	POP	BC
;  298		return;			
;  299	}
.LINE 299

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteNextFrameSelected ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteNextFrameSelected",299,"_vdp_spriteNextFrameSelected"
;  300	
;  301	void vdp_spriteNextFrame(UINT8 id)
;  302	{
_vdp_spriteNextFrame:
.DEFINE "_vdp_spriteNextFrame"

.VALUE _vdp_spriteNextFrame

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteNextFrame",302,"_vdp_spriteNextFrame"

.LINE 302

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  303		vdp_spriteSelect(id);
.LINE 303

	LD	C,(IX+%6)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  304		vdp_spriteNextFrameSelected();
.LINE 304

	CALL	_vdp_spriteNextFrameSelected
;  305		return;
;  306	}
.LINE 306

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteNextFrame ***************************
;Name                         Addr/Register   Size   Type
;_vdp_spriteNextFrameSelected        IMPORT  -----   function
;_vdp_spriteSelect                   IMPORT  -----   function
;id                                    IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteNextFrame",306,"_vdp_spriteNextFrame"
;  307	
;  308	void vdp_spritePreviousFrameSelected(void)
;  309	{
_vdp_spritePreviousFrameSelected:
.DEFINE "_vdp_spritePreviousFrameSelected"

.VALUE _vdp_spritePreviousFrameSelected

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spritePreviousFrameSelected",309,"_vdp_spritePreviousFrameSelected"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  310		putch(23); // vdu_sys
.LINE 310

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  311		putch(27); // sprite command
.LINE 311

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  312		putch(9); // previous frame
.LINE 312

	LD	BC,9
	PUSH	BC
	CALL	_putch
	POP	BC
;  313		return;	
;  314	}
.LINE 314

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spritePreviousFrameSelected ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spritePreviousFrameSelected",314,"_vdp_spritePreviousFrameSelected"
;  315	
;  316	void vdp_spritePreviousFrame(UINT8 id)
;  317	{
_vdp_spritePreviousFrame:
.DEFINE "_vdp_spritePreviousFrame"

.VALUE _vdp_spritePreviousFrame

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spritePreviousFrame",317,"_vdp_spritePreviousFrame"

.LINE 317

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  318		vdp_spriteSelect(id);
.LINE 318

	LD	C,(IX+%6)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  319		vdp_spritePreviousFrameSelected();
.LINE 319

	CALL	_vdp_spritePreviousFrameSelected
;  320		return;
;  321	}
.LINE 321

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spritePreviousFrame ***************************
;Name                         Addr/Register   Size   Type
;_vdp_spritePreviousFrameSelected      IMPORT  -----   function
;_vdp_spriteSelect                   IMPORT  -----   function
;id                                    IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spritePreviousFrame",321,"_vdp_spritePreviousFrame"
;  322	
;  323	void vdp_spriteSetFrameSelected(UINT8 framenumber)
;  324	{
_vdp_spriteSetFrameSelected:
.DEFINE "_vdp_spriteSetFrameSelected"

.VALUE _vdp_spriteSetFrameSelected

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteSetFrameSelected",324,"_vdp_spriteSetFrameSelected"

.LINE 324

.DEFINE "framenumber"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  325		putch(23); // vdu_sys
.LINE 325

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  326		putch(27); // sprite command
.LINE 326

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  327		putch(10); // set current frame
.LINE 327

	LD	BC,10
	PUSH	BC
	CALL	_putch
	POP	BC
;  328		putch(framenumber);
.LINE 328

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  329		return;	
;  330	}
.LINE 330

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteSetFrameSelected ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;framenumber                           IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteSetFrameSelected",330,"_vdp_spriteSetFrameSelected"
;  331	
;  332	void vdp_spriteSetFrame(UINT8 id, UINT8 framenumber)
;  333	{
_vdp_spriteSetFrame:
.DEFINE "_vdp_spriteSetFrame"

.VALUE _vdp_spriteSetFrame

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteSetFrame",333,"_vdp_spriteSetFrame"

.LINE 333

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "framenumber"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  334		vdp_spriteSelect(id);
.LINE 334

	LD	C,(IX+%6)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  335		vdp_spriteSetFrameSelected(framenumber);
.LINE 335

	LD	C,(IX+%9)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSetFrameSelected
	POP	BC
;  336		return;
;  337	}
.LINE 337

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteSetFrame ***************************
;Name                         Addr/Register   Size   Type
;_vdp_spriteSetFrameSelected         IMPORT  -----   function
;_vdp_spriteSelect                   IMPORT  -----   function
;framenumber                           IX+9      1   parameter
;id                                    IX+6      1   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteSetFrame",337,"_vdp_spriteSetFrame"
;  338	
;  339	void vdp_spriteShowSelected(void)
;  340	{
_vdp_spriteShowSelected:
.DEFINE "_vdp_spriteShowSelected"

.VALUE _vdp_spriteShowSelected

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteShowSelected",340,"_vdp_spriteShowSelected"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  341		putch(23); // vdu_sys
.LINE 341

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  342		putch(27); // sprite command
.LINE 342

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  343		putch(11); // show sprite
.LINE 343

	LD	BC,11
	PUSH	BC
	CALL	_putch
	POP	BC
;  344		return;			
;  345	}
.LINE 345

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteShowSelected ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteShowSelected",345,"_vdp_spriteShowSelected"
;  346	
;  347	void vdp_spriteShow(UINT8 id)
;  348	{
_vdp_spriteShow:
.DEFINE "_vdp_spriteShow"

.VALUE _vdp_spriteShow

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteShow",348,"_vdp_spriteShow"

.LINE 348

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  349		vdp_spriteSelect(id);
.LINE 349

	LD	C,(IX+%6)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  350		vdp_spriteShowSelected();
.LINE 350

	CALL	_vdp_spriteShowSelected
;  351		return;
;  352	}
.LINE 352

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteShow ***************************
;Name                         Addr/Register   Size   Type
;_vdp_spriteShowSelected             IMPORT  -----   function
;_vdp_spriteSelect                   IMPORT  -----   function
;id                                    IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteShow",352,"_vdp_spriteShow"
;  353	
;  354	void vdp_spriteHideSelected(void)
;  355	{
_vdp_spriteHideSelected:
.DEFINE "_vdp_spriteHideSelected"

.VALUE _vdp_spriteHideSelected

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteHideSelected",355,"_vdp_spriteHideSelected"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  356		putch(23); // vdu_sys
.LINE 356

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  357		putch(27); // sprite command
.LINE 357

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  358		putch(12); // hide sprite
.LINE 358

	LD	BC,12
	PUSH	BC
	CALL	_putch
	POP	BC
;  359		return;		
;  360	}
.LINE 360

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteHideSelected ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteHideSelected",360,"_vdp_spriteHideSelected"
;  361	
;  362	void vdp_spriteHide(UINT8 id)
;  363	{
_vdp_spriteHide:
.DEFINE "_vdp_spriteHide"

.VALUE _vdp_spriteHide

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteHide",363,"_vdp_spriteHide"

.LINE 363

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  364		vdp_spriteSelect(id);
.LINE 364

	LD	C,(IX+%6)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  365		vdp_spriteHideSelected();
.LINE 365

	CALL	_vdp_spriteHideSelected
;  366		return;
;  367	}
.LINE 367

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteHide ***************************
;Name                         Addr/Register   Size   Type
;_vdp_spriteHideSelected             IMPORT  -----   function
;_vdp_spriteSelect                   IMPORT  -----   function
;id                                    IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteHide",367,"_vdp_spriteHide"
;  368	
;  369	void vdp_spriteMoveToSelected(UINT16 x, UINT16 y)
;  370	{
_vdp_spriteMoveToSelected:
.DEFINE "_vdp_spriteMoveToSelected"

.VALUE _vdp_spriteMoveToSelected

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteMoveToSelected",370,"_vdp_spriteMoveToSelected"

.LINE 370

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 13

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  371		putch(23); // vdu_sys
.LINE 371

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  372		putch(27); // sprite command
.LINE 372

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  373		putch(13); // move to
.LINE 373

	LD	BC,13
	PUSH	BC
	CALL	_putch
	POP	BC
;  374		write16bit(x);
.LINE 374

	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_write16bit
	POP	BC
;  375		write16bit(y);
.LINE 375

	LD	BC,(IX+%9)
	PUSH	BC
	CALL	_write16bit
	POP	BC
;  376		return;	
;  377	}
.LINE 377

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteMoveToSelected ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;y                                     IX+9      2   parameter
;x                                     IX+6      2   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteMoveToSelected",377,"_vdp_spriteMoveToSelected"
;  378	
;  379	void vdp_spriteMoveTo(UINT8 id, UINT16 x, UINT16 y)
;  380	{
_vdp_spriteMoveTo:
.DEFINE "_vdp_spriteMoveTo"

.VALUE _vdp_spriteMoveTo

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteMoveTo",380,"_vdp_spriteMoveTo"

.LINE 380

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "x"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 12

.TYPE 13

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  381		vdp_spriteSelect(id);
.LINE 381

	LD	C,(IX+%6)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  382		vdp_spriteMoveToSelected(x,y);
.LINE 382

	LD	BC,(IX+%C)
	PUSH	BC
	LD	BC,(IX+%9)
	PUSH	BC
	CALL	_vdp_spriteMoveToSelected
	POP	BC
	POP	BC
;  383		return;
;  384	}
.LINE 384

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteMoveTo ***************************
;Name                         Addr/Register   Size   Type
;_vdp_spriteMoveToSelected           IMPORT  -----   function
;_vdp_spriteSelect                   IMPORT  -----   function
;y                                    IX+12      2   parameter
;x                                     IX+9      2   parameter
;id                                    IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteMoveTo",384,"_vdp_spriteMoveTo"
;  385	
;  386	void vdp_spriteMoveBySelected(UINT16 x, UINT16 y)
;  387	{
_vdp_spriteMoveBySelected:
.DEFINE "_vdp_spriteMoveBySelected"

.VALUE _vdp_spriteMoveBySelected

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteMoveBySelected",387,"_vdp_spriteMoveBySelected"

.LINE 387

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 13

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  388		putch(23); // vdu_sys
.LINE 388

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  389		putch(27); // sprite command
.LINE 389

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  390		putch(14); // move by
.LINE 390

	LD	BC,14
	PUSH	BC
	CALL	_putch
	POP	BC
;  391		write16bit(x);
.LINE 391

	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_write16bit
	POP	BC
;  392		write16bit(y);
.LINE 392

	LD	BC,(IX+%9)
	PUSH	BC
	CALL	_write16bit
	POP	BC
;  393		return;	
;  394	}
.LINE 394

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteMoveBySelected ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;y                                     IX+9      2   parameter
;x                                     IX+6      2   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteMoveBySelected",394,"_vdp_spriteMoveBySelected"
;  395	
;  396	void vdp_spriteMoveBy(UINT8 id, UINT16 x, UINT16 y)
;  397	{
_vdp_spriteMoveBy:
.DEFINE "_vdp_spriteMoveBy"

.VALUE _vdp_spriteMoveBy

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteMoveBy",397,"_vdp_spriteMoveBy"

.LINE 397

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "x"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 12

.TYPE 13

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  398		vdp_spriteSelect(id);
.LINE 398

	LD	C,(IX+%6)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  399		vdp_spriteMoveBySelected(x,y);
.LINE 399

	LD	BC,(IX+%C)
	PUSH	BC
	LD	BC,(IX+%9)
	PUSH	BC
	CALL	_vdp_spriteMoveBySelected
	POP	BC
	POP	BC
;  400		return;
;  401	}
.LINE 401

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteMoveBy ***************************
;Name                         Addr/Register   Size   Type
;_vdp_spriteMoveBySelected           IMPORT  -----   function
;_vdp_spriteSelect                   IMPORT  -----   function
;y                                    IX+12      2   parameter
;x                                     IX+9      2   parameter
;id                                    IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteMoveBy",401,"_vdp_spriteMoveBy"
;  402	
;  403	void vdp_spriteActivateTotal(UINT8 number)
;  404	{
_vdp_spriteActivateTotal:
.DEFINE "_vdp_spriteActivateTotal"

.VALUE _vdp_spriteActivateTotal

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteActivateTotal",404,"_vdp_spriteActivateTotal"

.LINE 404

.DEFINE "number"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  405		putch(23); // vdu_sys
.LINE 405

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  406		putch(27); // sprite command
.LINE 406

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  407		putch(7);  // set number of sprites
.LINE 407

	LD	BC,7
	PUSH	BC
	CALL	_putch
	POP	BC
;  408		putch(number);
.LINE 408

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  409		return;	
;  410	}
.LINE 410

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteActivateTotal ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;number                                IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteActivateTotal",410,"_vdp_spriteActivateTotal"
;  411	
;  412	void vdp_spriteRefresh(void)
;  413	{
_vdp_spriteRefresh:
.DEFINE "_vdp_spriteRefresh"

.VALUE _vdp_spriteRefresh

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteRefresh",413,"_vdp_spriteRefresh"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  414		putch(23);	// vdu_sys
.LINE 414

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  415		putch(27);	// sprite command
.LINE 415

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  416		putch(15);	// refresh all sprites
.LINE 416

	LD	BC,15
	PUSH	BC
	CALL	_putch
	POP	BC
;  417		return;
;  418	}
.LINE 418

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteRefresh ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteRefresh",418,"_vdp_spriteRefresh"
;  419	
;  420	UINT8 vdp_cursorGetXpos(void)
;  421	{
_vdp_cursorGetXpos:
.DEFINE "_vdp_cursorGetXpos"

.VALUE _vdp_cursorGetXpos

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "vdp_cursorGetXpos",421,"_vdp_cursorGetXpos"

.LINE 421

.DEFINE "delay"

.CLASS 65

.VALUE -3

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
;  422		unsigned int delay;
;  423		
;  424		putch(23);	// VDP command
.LINE 424

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  425		putch(0);	// VDP command
.LINE 425

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;  426		putch(0x82);	// Request cursor position
.LINE 426

	LD	BC,130
	PUSH	BC
	CALL	_putch
	POP	BC
;  427		
;  428		delay = 255;
.LINE 428

	LD	BC,255
	LD	(IX+%FFFFFFFD),BC
;  429		while(delay--);
L_56:
.LINE 429

	LD	HL,(IX+%FFFFFFFD)
	LD	IY,(IX+%FFFFFFFD)
	LEA	IY,IY+%FFFFFFFF
	LD	(IX+%FFFFFFFD),IY
	CALL	__icmpzero
	JR	NZ,L_56
;  430		return(getsysvar_cursorX());
.LINE 430

	CALL	_getsysvar_cursorX
;  431	
;  432	}
.LINE 432

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_cursorGetXpos ***************************
;Name                         Addr/Register   Size   Type
;_getsysvar_cursorX                  IMPORT  -----   function
;_putch                              IMPORT  -----   function
;delay                                 IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_cursorGetXpos",432,"_vdp_cursorGetXpos"
;  433	
;  434	UINT8 vdp_cursorGetYpos(void)
;  435	{
_vdp_cursorGetYpos:
.DEFINE "_vdp_cursorGetYpos"

.VALUE _vdp_cursorGetYpos

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "vdp_cursorGetYpos",435,"_vdp_cursorGetYpos"

.LINE 435

.DEFINE "delay"

.CLASS 65

.VALUE -3

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
;  436		unsigned int delay;
;  437		
;  438		putch(23);	// VDP command
.LINE 438

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  439		putch(0);	// VDP command
.LINE 439

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;  440		putch(0x82);	// Request cursor position
.LINE 440

	LD	BC,130
	PUSH	BC
	CALL	_putch
	POP	BC
;  441		
;  442		delay = 255;
.LINE 442

	LD	BC,255
	LD	(IX+%FFFFFFFD),BC
;  443		while(delay--);
L_61:
.LINE 443

	LD	HL,(IX+%FFFFFFFD)
	LD	IY,(IX+%FFFFFFFD)
	LEA	IY,IY+%FFFFFFFF
	LD	(IX+%FFFFFFFD),IY
	CALL	__icmpzero
	JR	NZ,L_61
;  444		return(getsysvar_cursorY());
.LINE 444

	CALL	_getsysvar_cursorY
;  445	}
.LINE 445

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_cursorGetYpos ***************************
;Name                         Addr/Register   Size   Type
;_getsysvar_cursorY                  IMPORT  -----   function
;_putch                              IMPORT  -----   function
;delay                                 IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_cursorGetYpos",445,"_vdp_cursorGetYpos"
;  446	
;  447	char vdp_asciiCodeAt(unsigned char x, unsigned char y)
;  448	{
_vdp_asciiCodeAt:
.DEFINE "_vdp_asciiCodeAt"

.VALUE _vdp_asciiCodeAt

.CLASS 2

.TYPE 66

.ENDEF

.BEGFUNC "vdp_asciiCodeAt",448,"_vdp_asciiCodeAt"

.LINE 448

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

.DEFINE "delay"

.CLASS 65

.VALUE -3

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
;  449		unsigned int delay;
;  450		
;  451		putch(23);	// VDP command
.LINE 451

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  452		putch(0);	// VDP command
.LINE 452

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;  453		putch(0x83);	// Request ascii code at position (x,y)
.LINE 453

	LD	BC,131
	PUSH	BC
	CALL	_putch
	POP	BC
;  454		putch(x);
.LINE 454

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  455		putch(0);
.LINE 455

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;  456		putch(y);
.LINE 456

	LD	A,(IX+%9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  457		putch(0);
.LINE 457

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;  458		
;  459		delay = 64000;
.LINE 459

	LD	BC,64000
	LD	(IX+%FFFFFFFD),BC
;  460		while(delay--);
L_66:
.LINE 460

	LD	HL,(IX+%FFFFFFFD)
	LD	IY,(IX+%FFFFFFFD)
	LEA	IY,IY+%FFFFFFFF
	LD	(IX+%FFFFFFFD),IY
	CALL	__icmpzero
	JR	NZ,L_66
;  461		return(getsysvar_scrchar());
.LINE 461

	CALL	_getsysvar_scrchar
;  462	}
.LINE 462

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_asciiCodeAt ***************************
;Name                         Addr/Register   Size   Type
;_getsysvar_scrchar                  IMPORT  -----   function
;_putch                              IMPORT  -----   function
;delay                                 IX-3      3   variable
;y                                     IX+9      1   parameter
;x                                     IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_asciiCodeAt",462,"_vdp_asciiCodeAt"
;  463	
;  464	void  vdp_setpagedMode(bool mode) {
_vdp_setpagedMode:
.DEFINE "_vdp_setpagedMode"

.VALUE _vdp_setpagedMode

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_setpagedMode",464,"_vdp_setpagedMode"

.LINE 464

.DEFINE "mode"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  465		if(mode) putch(0x0E);
.LINE 465

	LD	A,(IX+%6)
	OR	A,A
	JR	Z,L_70
	LD	BC,14
	PUSH	BC
	CALL	_putch
	POP	BC
;  466		else putch(0x0F);
.LINE 466

	JR	L_71
L_70:
	LD	BC,15
	PUSH	BC
	CALL	_putch
	POP	BC
;  467	}
L_71:
.LINE 467

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_setpagedMode ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;mode                                  IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_setpagedMode",467,"_vdp_setpagedMode"
;  468	
;  469	void vdp_cursorDisable(void)
;  470	{
_vdp_cursorDisable:
.DEFINE "_vdp_cursorDisable"

.VALUE _vdp_cursorDisable

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_cursorDisable",470,"_vdp_cursorDisable"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  471		putch(23);
.LINE 471

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  472		putch(1);
.LINE 472

	LD	BC,1
	PUSH	BC
	CALL	_putch
	POP	BC
;  473		putch(0);
.LINE 473

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;  474	}
.LINE 474

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_cursorDisable ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_cursorDisable",474,"_vdp_cursorDisable"
;  475	
;  476	void vdp_cursorEnable(void)
;  477	{
_vdp_cursorEnable:
.DEFINE "_vdp_cursorEnable"

.VALUE _vdp_cursorEnable

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_cursorEnable",477,"_vdp_cursorEnable"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  478		putch(23);
.LINE 478

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  479		putch(1);
.LINE 479

	LD	BC,1
	PUSH	BC
	CALL	_putch
	POP	BC
;  480		putch(1);
.LINE 480

	LD	BC,1
	PUSH	BC
	CALL	_putch
	POP	BC
;  481	}
.LINE 481

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_cursorEnable ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_cursorEnable",481,"_vdp_cursorEnable"
;  482	
;  483	void vdp_scroll(unsigned char extent, unsigned char direction, unsigned char speed)
;  484	{
_vdp_scroll:
.DEFINE "_vdp_scroll"

.VALUE _vdp_scroll

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_scroll",484,"_vdp_scroll"

.LINE 484

.DEFINE "extent"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "direction"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

.DEFINE "speed"

.CLASS 65

.VALUE 12

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  485		putch(23);
.LINE 485

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  486		putch(7);	// scroll
.LINE 486

	LD	BC,7
	PUSH	BC
	CALL	_putch
	POP	BC
;  487		putch(extent);
.LINE 487

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  488		putch(direction);
.LINE 488

	LD	A,(IX+%9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  489		putch(speed);
.LINE 489

	LD	A,(IX+%C)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
.LINE 490

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_scroll ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;speed                                IX+12      1   parameter
;direction                             IX+9      1   parameter
;extent                                IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_scroll",490,"_vdp_scroll"
	XREF _getsysvar_scrchar:ROM
	XREF _getsysvar_cursorY:ROM
	XREF _getsysvar_cursorX:ROM
	XREF _putch:ROM
	XREF __imuls:ROM
	XREF __ior:ROM
	XREF __lshru:ROM
	XREF __stoiu:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __ishru_b:ROM
	XREF __ishrs_b:ROM
	XDEF _vdp_scroll
	XDEF _vdp_cursorEnable
	XDEF _vdp_cursorDisable
	XDEF _vdp_setpagedMode
	XDEF _vdp_asciiCodeAt
	XDEF _vdp_cursorGetYpos
	XDEF _vdp_cursorGetXpos
	XDEF _vdp_spriteRefresh
	XDEF _vdp_spriteActivateTotal
	XDEF _vdp_spriteMoveBy
	XDEF _vdp_spriteMoveBySelected
	XDEF _vdp_spriteMoveTo
	XDEF _vdp_spriteMoveToSelected
	XDEF _vdp_spriteHide
	XDEF _vdp_spriteHideSelected
	XDEF _vdp_spriteShow
	XDEF _vdp_spriteShowSelected
	XDEF _vdp_spriteSetFrame
	XDEF _vdp_spriteSetFrameSelected
	XDEF _vdp_spritePreviousFrame
	XDEF _vdp_spritePreviousFrameSelected
	XDEF _vdp_spriteNextFrame
	XDEF _vdp_spriteNextFrameSelected
	XDEF _vdp_spriteAddFrame
	XDEF _vdp_spriteAddFrameSelected
	XDEF _vdp_spriteClearFrames
	XDEF _vdp_spriteClearFramesSelected
	XDEF _vdp_spriteSelect
	XDEF _vdp_bitmapCreateSolidColor
	XDEF _vdp_bitmapCreateSolidColorSelected
	XDEF _vdp_bitmapDraw
	XDEF _vdp_bitmapDrawSelected
	XDEF _vdp_bitmapSendData
	XDEF _vdp_bitmapSendDataSelected
	XDEF _vdp_bitmapSelect
	XDEF _vdp_plotSetOrigin
	XDEF _vdp_plotCircleCircumference
	XDEF _vdp_plotCircleRadius
	XDEF _vdp_plotTriangle
	XDEF _vdp_plotPoint
	XDEF _vdp_plotLineTo
	XDEF _vdp_plotMoveTo
	XDEF _vdp_plot
	XDEF _vdp_plotColour
	XDEF _vdp_clearGraphics
	XDEF _vdp_bgcolour
	XDEF _vdp_fgcolour
	XDEF _vdp_cursorGoto
	XDEF _vdp_cursorUp
	XDEF _vdp_cursorHome
	XDEF _vdp_cls
	XDEF _vdp_setPaletteColor
	XDEF _vdp_getMode
	XDEF _vdp_mode
	XDEF _write32bit
	XDEF _write16bit
	END
