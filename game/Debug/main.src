; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optsize -noreduceopt -nopadbranch -debug
; -peephole -globalopt -localcse -const=ROM 
	FILE	"..\main.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "fmt_type",19
.DEFINE "status"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flags"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "size"
.VALUE 2
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "chr"
.VALUE 3
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "type"
.VALUE 4
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "field_width"
.VALUE 5
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "precision"
.VALUE 6
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "set_begin"
.VALUE 7
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "set_end"
.VALUE 10
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "pad_whole"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_pre_fract"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_post_fract"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_at"
.VALUE 16
.CLASS 8
.TYPE 34
.ENDEF
.ENDREC "fmt_type"
.BEGREC "flt_info",12
.DEFINE "flags"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "digits"
.VALUE 2
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.ENDREC "flt_info"
.BEGREC "NONAME0",8
.DEFINE "baudRate"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "dataBits"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stopBits"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "parity"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flowcontrol"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "eir"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "NONAME0"
.BEGREC "sokobanlevel",1207
.DEFINE "xpos"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "ypos"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "width"
.VALUE 2
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "goals"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "goalstaken"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "crates"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "data"
.VALUE 7
.CLASS 8
.DIM 30
.DIM 40
.TYPE 876
.ENDEF
.ENDREC "sokobanlevel"
.BEGREC "NONAME1",2
.DEFINE "ch"
.VALUE 0
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "tile_id"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "NONAME1"
.BEGREC "undoitem",2
.DEFINE "movekey"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pushed"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "undoitem"
;    1	#include <stdio.h>
;    2	#include <ctype.h>
;    3	#include "mos-interface.h"
;    4	#include "vdp.h"
;    5	#include "game.h"
;    6	#include "agontimer.h"
;    7	
;    8	#define FILE_LEVELS	"levels.bin"
;    9	
;   10	int main(int argc, char * argv[]) {
_main:
.DEFINE "_main"

.VALUE _main

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "main",10,"_main"

.LINE 10

.DEFINE "argc"

.CLASS 65

.VALUE 6

.TYPE 4

.ENDEF

.DEFINE "argv"

.CLASS 65

.VALUE 9

.TYPE 290

.ENDEF

.DEFINE "levelnumber"

.CLASS 65

.VALUE -2

.TYPE 3

.ENDEF

.DEFINE "ingame"

.CLASS 65

.VALUE -3

.TYPE 12

.ENDEF

.DEFINE "levels"

.CLASS 65

.VALUE -4

.TYPE 12

.ENDEF

.DEFINE "key"

.CLASS 65

.VALUE -5

.TYPE 2

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
	DEC	SP
	DEC	SP
;   11		UINT8 levels;
;   12		INT16 levelnumber = 0;
.LINE 12

	LD	(IX+%FFFFFFFE),%0
	LD	(IX+%FFFFFFFF),%0
;   13		BOOL quit;
;   14		BOOL ingame;
;   15		char key;
;   16		
;   17		game_splash_screen();
.LINE 17

	CALL	_game_splash_screen
;   18	
;   19		levels = game_readLevels(FILE_LEVELS);
.LINE 19

	LD	BC,L__0
	PUSH	BC
	CALL	_game_readLevels
	POP	BC
	LD	(IX+%FFFFFFFC),A
;   20		
;   21		if(levels)	{	
.LINE 21

	OR	A,A
	JR	Z,L_23
;   22			vdp_mode(VDPMODE_640x480_16C);
.LINE 22

	LD	BC,3
	PUSH	BC
	CALL	_vdp_mode
	POP	BC
;   23			delayms(1000);
.LINE 23

	LD	BC,1000
	PUSH	BC
	CALL	_delayms
	POP	BC
;   24			vdp_cursorDisable();
.LINE 24

	CALL	_vdp_cursorDisable
;   25	
;   26			game_sendSpriteData();		
.LINE 26

	CALL	_game_sendSpriteData
;   27			while(levelnumber >= 0) {
.LINE 27

	JR	L_20
L_21:
;   28				levelnumber = game_selectLevel(levels, levelnumber); // returns -1 if abort, or valid number between 0-(levels-1)
.LINE 28

	LD	BC,(IX+%FFFFFFFE)
	PUSH	BC
	LD	C,(IX+%FFFFFFFC)
	LD	B,%0
	PUSH	BC
	CALL	_game_selectLevel
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFE),L
	LD	(IX+%FFFFFFFF),H
;   29				if(levelnumber >= 0)
.LINE 29

	LD	HL,(IX+%FFFFFFFE)
	CALL	__scmpzero
	JP	M,L_20
;   30				{
;   31					// Start game
;   32					ingame = TRUE;
.LINE 32

	LD	(IX+%FFFFFFFD),%1
;   33					vdp_cls();
.LINE 33

	CALL	_vdp_cls
;   34					game_initLevel(levelnumber);	// initialize playing field data from memory or disk
.LINE 34

	LD	C,(IX+%FFFFFFFE)
	LD	B,%0
	PUSH	BC
	CALL	_game_initLevel
	POP	BC
;   35					game_initSprites();				// position sprites in grid, according to level data						
.LINE 35

	CALL	_game_initSprites
;   36					game_displayLevel();
.LINE 36

	CALL	_game_displayLevel
;   37					while(ingame) {
.LINE 37

	JR	L_17
L_18:
;   38						key = getch();
.LINE 38

	CALL	_getch
	LD	(IX+%FFFFFFFB),A
;   39						switch(key) {
.LINE 39

	SEXT	HL
	LD	L,(IX+%FFFFFFFB)
	CALL	__case8D
	JP	(HL)
L__3:
	DW	5
	DB	27
	DW24	L_2	

	DB	81
	DW24	L_1	

	DB	104
	DW24	L_5	

	DB	113
	DW24	L_0	

	DB	117
	DW24	L_6	

	DW24	L_7	

;   40							case 'q':
L_0:
.LINE 40

;   41							case 'Q':
L_1:
.LINE 41

;   42							case 27:
L_2:
.LINE 42

;   43								game_resetSprites();
.LINE 43

	CALL	_game_resetSprites
;   44								ingame = (game_getResponse("Really QUIT level (y/n)?",'y','n') != 'y');
.LINE 44

	LD	BC,110
	PUSH	BC
	LD	BC,121
	PUSH	BC
	LD	BC,L__4
	PUSH	BC
	CALL	_game_getResponse
	POP	BC
	POP	BC
	POP	BC
	LD	B,A
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	BC,121
	OR	A,A
	SBC	HL,BC
	JR	Z,L__6
	LD	A,%1
	JR	L__7
L__6:
	XOR	A,A
L__7:
	LD	(IX+%FFFFFFFD),A
;   45								if(ingame) {
.LINE 45

	OR	A,A
	JR	Z,L_17
;   46									game_initSprites();
.LINE 46

	CALL	_game_initSprites
;   47									game_displayLevel();
.LINE 47

	CALL	_game_displayLevel
;   48								}
.LINE 48

;   49								break;
.LINE 49

	JR	L_17
;   50							case 'h':
L_5:
.LINE 50

;   51								game_resetSprites();
.LINE 51

	CALL	_game_resetSprites
;   52								vdp_cls();
.LINE 52

	CALL	_vdp_cls
;   53								game_displayHelp(HELP_XPOS_GAME, HELP_YPOS_GAME);
.LINE 53

	LD	BC,13
	PUSH	BC
	LD	BC,30
	PUSH	BC
	CALL	_game_displayHelp
	POP	BC
	POP	BC
;   54								getch();
.LINE 54

	CALL	_getch
;   55								vdp_cls();
.LINE 55

	CALL	_vdp_cls
;   56								game_initSprites();
.LINE 56

	CALL	_game_initSprites
;   57								game_displayLevel();
.LINE 57

	CALL	_game_displayLevel
;   58								break;
.LINE 58

	JR	L_17
;   59							case 'u':
L_6:
.LINE 59

;   60								game_handleUndoMove();
.LINE 60

	CALL	_game_handleUndoMove
;   61								break;
.LINE 61

	JR	L_17
;   62							default:
L_7:
.LINE 62

;   63								ingame = !game_handleKey(key);	// handleKey returns TRUE when game is finished
.LINE 63

	LD	C,(IX+%FFFFFFFB)
	LD	B,%0
	PUSH	BC
	CALL	_game_handleKey
	POP	BC
	OR	A,A
	JR	NZ,L_9
	LD	BC,1
	LD	(IX+%FFFFFFF8),BC
	JR	L_10
L_9:
	LD	BC,0
	LD	(IX+%FFFFFFF8),BC
L_10:
	LD	A,(IX+%FFFFFFF8)
	LD	(IX+%FFFFFFFD),A
;   64								if(!ingame)
.LINE 64

	OR	A,A
	JR	NZ,L_17
;   65								{
;   66									levelnumber++;
.LINE 66

	LD	HL,(IX+%FFFFFFFE)
	INC	HL
	LD	(IX+%FFFFFFFE),L
	LD	(IX+%FFFFFFFF),H
;   67									if(levelnumber == levels) levelnumber = 0;
.LINE 67

	LD	BC,(IX+%FFFFFFFE)
	CALL	__stoi
	LD	BC,HL
	LD	A,(IX+%FFFFFFFC)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	NZ,L_14
	LD	(IX+%FFFFFFFE),%0
	LD	(IX+%FFFFFFFF),%0
L_14:
;   68									delayms(200);
.LINE 68

	LD	BC,200
	PUSH	BC
	CALL	_delayms
	POP	BC
;   69									game_resetSprites();
.LINE 69

	CALL	_game_resetSprites
;   70									game_getResponse("Level complete!",0xd,27);
.LINE 70

	LD	BC,27
	PUSH	BC
	LD	BC,13
	PUSH	BC
	LD	BC,L__12
	PUSH	BC
	CALL	_game_getResponse
	POP	BC
	POP	BC
	POP	BC
;   71								}
;   72							break;
;   73						}						
;   74					}
L_17:
.LINE 74

	LD	A,(IX+%FFFFFFFD)
	OR	A,A
	JR	NZ,L_18
;   75				}
;   76			}
L_20:
.LINE 76

	LD	HL,(IX+%FFFFFFFE)
	CALL	__scmpzero
	JP	P,L_21
	JR	L_24
;   77		}
;   78		else {
L_23:
.LINE 78

;   79			vdp_cursorGoto(15,38);
.LINE 79

	LD	BC,38
	PUSH	BC
	LD	BC,15
	PUSH	BC
	CALL	_vdp_cursorGoto
	POP	BC
	POP	BC
;   80			vdp_fgcolour(BRIGHT_RED);
.LINE 80

	LD	BC,9
	PUSH	BC
	CALL	_vdp_fgcolour
	POP	BC
;   81			puts("No level available! - press any key");
.LINE 81

	LD	BC,L__15
	PUSH	BC
	CALL	_puts
	POP	BC
;   82			getch();
.LINE 82

	CALL	_getch
;   83			vdp_cls();
.LINE 83

	CALL	_vdp_cls
;   84			vdp_fgcolour(BRIGHT_WHITE);
.LINE 84

	LD	BC,15
	PUSH	BC
	CALL	_vdp_fgcolour
	POP	BC
;   85		}
L_24:
.LINE 85

;   86		vdp_mode(VDPMODE_DEFAULT);
.LINE 86

	LD	BC,1
	PUSH	BC
	CALL	_vdp_mode
	POP	BC
;   87		puts("Thank you for playing Sokoban\r\n");
.LINE 87

	LD	BC,L__16
	PUSH	BC
	CALL	_puts
	POP	BC
;   88		return 0;
.LINE 88

	OR	A,A
	SBC	HL,HL
;   89	}
.LINE 89

	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_puts                               IMPORT  -----   function
;_vdp_fgcolour                       IMPORT  -----   function
;_vdp_cursorGoto                     IMPORT  -----   function
;_game_handleKey                     IMPORT  -----   function
;_game_handleUndoMove                IMPORT  -----   function
;_game_displayHelp                   IMPORT  -----   function
;_game_getResponse                   IMPORT  -----   function
;_game_resetSprites                  IMPORT  -----   function
;_getch                              IMPORT  -----   function
;_game_displayLevel                  IMPORT  -----   function
;_game_initSprites                   IMPORT  -----   function
;_game_initLevel                     IMPORT  -----   function
;_vdp_cls                            IMPORT  -----   function
;_game_selectLevel                   IMPORT  -----   function
;_game_sendSpriteData                IMPORT  -----   function
;_vdp_cursorDisable                  IMPORT  -----   function
;_delayms                            IMPORT  -----   function
;_vdp_mode                           IMPORT  -----   function
;_game_readLevels                    IMPORT  -----   function
;_game_splash_screen                 IMPORT  -----   function
;temp11                                IX-8      3   variable
;key                                   IX-5      1   variable
;levels                                IX-4      1   variable
;ingame                                IX-3      1   variable
;levelnumber                           IX-2      2   variable
;argv                                  IX+9      3   parameter
;argc                                  IX+6      3   parameter


; Stack Frame Size: 20 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "main",89,"_main"
	SEGMENT STRSECT
L__0:
	DB	"levels.bin"
	DB	0
L__4:
	DB	"Really QUIT level (y/n)?"
	DB	0
L__12:
	DB	"Level complete!"
	DB	0
L__15:
	DB	"No level available! - press any key"
	DB	0
L__16:
	DB	"Thank you for playing Sokoban"
	DB	13,10,0
	XREF _delayms:ROM
	XREF _game_splash_screen:ROM
	XREF _game_handleUndoMove:ROM
	XREF _game_displayHelp:ROM
	XREF _game_getResponse:ROM
	XREF _game_selectLevel:ROM
	XREF _game_handleKey:ROM
	XREF _game_displayLevel:ROM
	XREF _game_resetSprites:ROM
	XREF _game_initSprites:ROM
	XREF _game_initLevel:ROM
	XREF _game_sendSpriteData:ROM
	XREF _game_readLevels:ROM
	XREF _vdp_fgcolour:ROM
	XREF _vdp_cursorDisable:ROM
	XREF _vdp_cursorGoto:ROM
	XREF _vdp_cls:ROM
	XREF _vdp_mode:ROM
	XREF _getch:ROM
	XREF _puts:ROM
	XREF __stoi:ROM
	XREF __scmpzero:ROM
	XREF __case8D:ROM
	XDEF _main
	END
